617488eee626c819ba04d09c840c2f7f
var _EmptyState = require("../../components/EmptyState");
var _testUtils = require("../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
describe('EmptyState', function () {
  var defaultProps = {
    title: 'No Notes Found',
    description: 'Create your first note to get started',
    icon: 'document-text-outline'
  };
  it('renders correctly with all props', function () {
    var _render = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, defaultProps))),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText('No Notes Found')).toBeTruthy();
    expect(getByText('Create your first note to get started')).toBeTruthy();
    expect(getByTestId('icon-document-text-outline')).toBeTruthy();
  });
  it('renders with different icon', function () {
    var props = Object.assign({}, defaultProps, {
      icon: 'search-outline'
    });
    var _render2 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, props))),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('icon-search-outline')).toBeTruthy();
  });
  it('renders with custom title and description', function () {
    var props = {
      title: 'Search Results Empty',
      description: 'No notes match your search criteria',
      icon: 'search-outline'
    };
    var _render3 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, props))),
      getByText = _render3.getByText;
    expect(getByText('Search Results Empty')).toBeTruthy();
    expect(getByText('No notes match your search criteria')).toBeTruthy();
  });
  it('handles long text content', function () {
    var props = {
      title: 'This is a very long title that might wrap to multiple lines',
      description: 'This is a very long description that provides detailed information about the current state and what the user can do to resolve it. It should handle text wrapping gracefully.',
      icon: 'information-circle-outline'
    };
    var _render4 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, props))),
      getByText = _render4.getByText;
    expect(getByText(props.title)).toBeTruthy();
    expect(getByText(props.description)).toBeTruthy();
  });
  it('applies correct styles to title', function () {
    var _render5 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, defaultProps))),
      getByText = _render5.getByText;
    var titleText = getByText(defaultProps.title);
    expect(titleText.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
      fontSize: 24,
      fontWeight: '700',
      marginBottom: 8,
      textAlign: 'center'
    })]));
  });
  it('applies correct styles to description', function () {
    var _render6 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, defaultProps))),
      getByText = _render6.getByText;
    var descriptionText = getByText(defaultProps.description);
    expect(descriptionText.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
      fontSize: 16,
      textAlign: 'center',
      lineHeight: 24,
      maxWidth: 280
    })]));
  });
  it('renders icon with correct accessibility label', function () {
    var _render7 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_EmptyState.EmptyState, Object.assign({}, defaultProps))),
      getByLabelText = _render7.getByLabelText;
    expect(getByLabelText('document-text-outline icon')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,