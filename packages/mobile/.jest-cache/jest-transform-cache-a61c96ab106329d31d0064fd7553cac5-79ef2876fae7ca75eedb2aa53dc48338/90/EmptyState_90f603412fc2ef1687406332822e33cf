168e60caee34827cf51ee1c4af6fd829
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmptyState = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _vectorIcons = require("@expo/vector-icons");
var _expoLinearGradient = require("expo-linear-gradient");
var _jsxRuntime = require("react/jsx-runtime");
var EmptyState = exports.EmptyState = function EmptyState(_ref) {
  var title = _ref.title,
    description = _ref.description,
    icon = _ref.icon;
  var theme = (0, _reactNativePaper.useTheme)();
  var scaleAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;
  var fadeAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;
  _react.default.useEffect(function () {
    _reactNative.Animated.parallel([_reactNative.Animated.spring(scaleAnim, {
      toValue: 1,
      tension: 10,
      friction: 3,
      useNativeDriver: true
    }), _reactNative.Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 600,
      useNativeDriver: true
    })]).start();
  }, [fadeAnim, scaleAnim]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
      style: [styles.iconContainer, {
        transform: [{
          scale: scaleAnim
        }],
        opacity: fadeAnim
      }],
      children: (0, _jsxRuntime.jsx)(_expoLinearGradient.LinearGradient, {
        colors: [theme.colors.primaryContainer, theme.colors.primary],
        style: styles.iconGradient,
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.iconBackground, {
            backgroundColor: theme.colors.surface
          }],
          children: (0, _jsxRuntime.jsx)(_vectorIcons.Ionicons, {
            name: icon,
            size: 48,
            color: theme.colors.primary
          })
        })
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {
      style: [styles.textContainer, {
        opacity: fadeAnim,
        transform: [{
          translateY: fadeAnim.interpolate({
            inputRange: [0, 1],
            outputRange: [20, 0]
          })
        }]
      }],
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: [styles.title, {
          color: theme.colors.onSurface
        }],
        children: title
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: [styles.description, {
          color: theme.colors.onSurfaceVariant
        }],
        children: description
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32
  },
  iconContainer: {
    marginBottom: 24
  },
  iconGradient: {
    width: 120,
    height: 120,
    borderRadius: 60,
    padding: 3
  },
  iconBackground: {
    flex: 1,
    borderRadius: 57,
    justifyContent: 'center',
    alignItems: 'center'
  },
  textContainer: {
    alignItems: 'center'
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 8
  },
  description: {
    fontSize: 16,
    textAlign: 'center',
    lineHeight: 24,
    maxWidth: 280
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,