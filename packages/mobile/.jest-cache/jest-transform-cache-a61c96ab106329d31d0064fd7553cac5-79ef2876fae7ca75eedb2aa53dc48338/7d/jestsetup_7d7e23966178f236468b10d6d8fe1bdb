cfc4338731d206851636f12c24e466b0
_getJestObj().mock('expo-router', function () {
  return {
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn()
    },
    useRouter: function useRouter() {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn()
      };
    },
    useLocalSearchParams: function useLocalSearchParams() {
      return {};
    },
    useSegments: function useSegments() {
      return [];
    },
    Link: function Link(_ref) {
      var children = _ref.children;
      return children;
    },
    Tabs: function Tabs(_ref2) {
      var children = _ref2.children;
      return children;
    },
    Stack: {
      Screen: function Screen(_ref3) {
        var children = _ref3.children;
        return children;
      }
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    _Text = _require.Text;
  var mockTheme = {
    colors: {
      primary: '#000',
      background: '#fff',
      surface: '#fff',
      text: '#000',
      error: '#f00',
      onSurface: '#000',
      disabled: '#ccc',
      placeholder: '#999',
      backdrop: '#000',
      notification: '#000'
    },
    fonts: {
      regular: {
        fontFamily: 'System',
        fontWeight: '400'
      },
      medium: {
        fontFamily: 'System',
        fontWeight: '500'
      },
      light: {
        fontFamily: 'System',
        fontWeight: '300'
      },
      thin: {
        fontFamily: 'System',
        fontWeight: '100'
      }
    },
    roundness: 4,
    animation: {
      scale: 1
    },
    dark: false
  };
  return {
    Provider: function Provider(_ref4) {
      var children = _ref4.children;
      return children;
    },
    DefaultTheme: mockTheme,
    MD3LightTheme: mockTheme,
    ThemeProvider: function ThemeProvider(_ref5) {
      var children = _ref5.children;
      return children;
    },
    Card: function Card(_ref6) {
      var children = _ref6.children,
        props = (0, _objectWithoutProperties2.default)(_ref6, _excluded);
      return React.createElement(View, props, children);
    },
    'Card.Title': function CardTitle(_ref7) {
      var title = _ref7.title,
        subtitle = _ref7.subtitle;
      return React.createElement(View, {}, React.createElement(_Text, {}, title), subtitle && React.createElement(_Text, {}, subtitle));
    },
    'Card.Content': function CardContent(_ref8) {
      var children = _ref8.children,
        props = (0, _objectWithoutProperties2.default)(_ref8, _excluded2);
      return React.createElement(View, props, children);
    },
    Title: function Title(_ref9) {
      var children = _ref9.children,
        props = (0, _objectWithoutProperties2.default)(_ref9, _excluded3);
      return React.createElement(_Text, props, children);
    },
    Paragraph: function Paragraph(_ref0) {
      var children = _ref0.children,
        props = (0, _objectWithoutProperties2.default)(_ref0, _excluded4);
      return React.createElement(_Text, props, children);
    },
    Chip: function Chip(_ref1) {
      var children = _ref1.children,
        props = (0, _objectWithoutProperties2.default)(_ref1, _excluded5);
      return React.createElement(View, props, React.createElement(_Text, {}, children));
    },
    Text: function Text(_ref10) {
      var children = _ref10.children,
        props = (0, _objectWithoutProperties2.default)(_ref10, _excluded6);
      return React.createElement(_Text, props, children);
    },
    Searchbar: function Searchbar(_ref11) {
      var props = Object.assign({}, ((0, _objectDestructuringEmpty2.default)(_ref11), _ref11));
      return React.createElement(View, props);
    },
    ActivityIndicator: function ActivityIndicator() {
      return React.createElement(View);
    },
    Button: function Button(_ref12) {
      var children = _ref12.children,
        onPress = _ref12.onPress,
        props = (0, _objectWithoutProperties2.default)(_ref12, _excluded7);
      return React.createElement(View, Object.assign({
        onPress: onPress
      }, props), React.createElement(_Text, {}, children));
    },
    Appbar: {
      Header: function Header(_ref13) {
        var children = _ref13.children,
          props = (0, _objectWithoutProperties2.default)(_ref13, _excluded8);
        return React.createElement(View, props, children);
      },
      BackAction: function BackAction(props) {
        return React.createElement(View, props);
      },
      Content: function Content(_ref14) {
        var children = _ref14.children,
          props = (0, _objectWithoutProperties2.default)(_ref14, _excluded9);
        return React.createElement(View, props, children);
      }
    },
    FAB: function FAB(_ref15) {
      var onPress = _ref15.onPress,
        props = (0, _objectWithoutProperties2.default)(_ref15, _excluded0);
      return React.createElement(View, Object.assign({
        onPress: onPress
      }, props));
    },
    List: {
      Item: function Item(_ref16) {
        var title = _ref16.title,
          description = _ref16.description,
          props = (0, _objectWithoutProperties2.default)(_ref16, _excluded1);
        return React.createElement(View, props, React.createElement(_Text, {}, title), description && React.createElement(_Text, {}, description));
      }
    },
    useTheme: function useTheme() {
      return mockTheme;
    }
  };
});
_getJestObj().mock('./components/SupabaseProvider', function () {
  return {
    useSupabase: function useSupabase() {
      return {
        user: null,
        isLoading: false,
        signIn: jest.fn(),
        signUp: jest.fn(),
        signOut: jest.fn(),
        supabase: mockSupabase
      };
    },
    SupabaseProvider: function SupabaseProvider(_ref17) {
      var children = _ref17.children;
      return children;
    }
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native-gesture-handler', function () {
  return {
    Directions: {},
    State: {},
    PanGestureHandler: 'PanGestureHandler',
    BaseButton: 'BaseButton',
    Swipeable: 'Swipeable',
    DrawerLayout: 'DrawerLayout',
    DrawerLayoutAndroid: 'DrawerLayoutAndroid',
    DrawerLayoutIOS: 'DrawerLayoutIOS',
    ScrollView: 'ScrollView',
    NativeViewGestureHandler: 'NativeViewGestureHandler',
    TapGestureHandler: 'TapGestureHandler',
    TouchableHighlight: 'TouchableHighlight',
    TouchableNativeFeedback: 'TouchableNativeFeedback',
    TouchableOpacity: 'TouchableOpacity',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback'
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children"],
  _excluded2 = ["children"],
  _excluded3 = ["children"],
  _excluded4 = ["children"],
  _excluded5 = ["children"],
  _excluded6 = ["children"],
  _excluded7 = ["children", "onPress"],
  _excluded8 = ["children"],
  _excluded9 = ["children"],
  _excluded0 = ["onPress"],
  _excluded1 = ["title", "description"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockSupabase = {
  auth: {
    getSession: jest.fn().mockResolvedValue({
      data: {
        session: null
      },
      error: null
    }),
    onAuthStateChange: jest.fn(function () {
      return {
        data: {
          subscription: {
            unsubscribe: jest.fn()
          }
        }
      };
    }),
    signInWithPassword: jest.fn().mockResolvedValue({
      data: null,
      error: null
    }),
    signUp: jest.fn().mockResolvedValue({
      data: null,
      error: null
    }),
    signOut: jest.fn().mockResolvedValue({
      error: null
    })
  },
  from: jest.fn(function () {
    return {
      select: jest.fn().mockReturnThis(),
      eq: jest.fn().mockReturnThis(),
      order: jest.fn().mockReturnThis(),
      limit: jest.fn().mockReturnThis(),
      single: jest.fn().mockResolvedValue({
        data: null,
        error: null
      }),
      insert: jest.fn().mockResolvedValue({
        data: null,
        error: null
      }),
      update: jest.fn().mockResolvedValue({
        data: null,
        error: null
      }),
      delete: jest.fn().mockResolvedValue({
        data: null,
        error: null
      })
    };
  })
};
global.console = Object.assign({}, console, {
  warn: jest.fn(),
  error: jest.fn()
});
jest.setTimeout(10000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,