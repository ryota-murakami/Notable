395d0bc4b7f7357888135a1a2a27c847
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useOfflineNotes = require("../../hooks/use-offline-notes");
describe('useOfflineNotes', function () {
  it('initializes with correct default state', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useOfflineNotes.useOfflineNotes)();
      }),
      result = _renderHook.result;
    expect(result.current.notes).toEqual([]);
    expect(result.current.isLoading).toBe(false);
    expect(result.current.isSaving).toBe(false);
    expect(result.current.onlineUsers).toEqual([]);
    expect(result.current.typingUsers).toEqual([]);
  });
  it('provides all required functions', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useOfflineNotes.useOfflineNotes)();
      }),
      result = _renderHook2.result;
    expect(typeof result.current.createNote).toBe('function');
    expect(typeof result.current.updateNote).toBe('function');
    expect(typeof result.current.deleteNote).toBe('function');
    expect(typeof result.current.startTyping).toBe('function');
    expect(typeof result.current.stopTyping).toBe('function');
  });
  it('accepts options parameter', function () {
    var options = {
      someOption: 'value'
    };
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useOfflineNotes.useOfflineNotes)(options);
      }),
      result = _renderHook3.result;
    expect(result.current.notes).toEqual([]);
  });
  describe('createNote', function () {
    it('creates a note with provided data', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook4 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook4.result;
      var noteData = {
        title: 'Test Note',
        content: 'Test content'
      };
      var createdNote;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        createdNote = yield result.current.createNote(noteData);
      }));
      expect(createdNote).toBeDefined();
      expect(createdNote.title).toBe('Test Note');
      expect(createdNote.content).toBe('Test content');
      expect(createdNote.is_folder).toBe(false);
      expect(typeof createdNote.id).toBe('string');
    }));
    it('creates a note with default values when data is missing', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook5 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook5.result;
      var createdNote;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        createdNote = yield result.current.createNote({});
      }));
      expect(createdNote).toBeDefined();
      expect(createdNote.title).toBe('Untitled');
      expect(createdNote.content).toBe('');
      expect(createdNote.is_folder).toBe(false);
    }));
    it('creates a folder when is_folder is true', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook6 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook6.result;
      var folderData = {
        title: 'Test Folder',
        is_folder: true
      };
      var createdNote;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        createdNote = yield result.current.createNote(folderData);
      }));
      expect(createdNote).toBeDefined();
      expect(createdNote.title).toBe('Test Folder');
      expect(createdNote.is_folder).toBe(true);
    }));
    it('generates unique IDs for each note', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook7 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook7.result;
      var note1, note2;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        note1 = yield result.current.createNote({
          title: 'Note 1'
        });
        note2 = yield result.current.createNote({
          title: 'Note 2'
        });
      }));
      expect(note1.id).toBeDefined();
      expect(note2.id).toBeDefined();
      expect(note1.id).not.toBe(note2.id);
    }));
  });
  describe('updateNote', function () {
    it('calls updateNote without throwing', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook8 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook8.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield expect(result.current.updateNote('test-id', {
          title: 'Updated Title'
        })).resolves.toBeUndefined();
      }));
    }));
  });
  describe('deleteNote', function () {
    it('calls deleteNote without throwing', (0, _asyncToGenerator2.default)(function* () {
      var _renderHook9 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook9.result;
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield expect(result.current.deleteNote('test-id')).resolves.toBeUndefined();
      }));
    }));
  });
  describe('typing functions', function () {
    it('calls startTyping without throwing', function () {
      var _renderHook0 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook0.result;
      expect(function () {
        return result.current.startTyping();
      }).not.toThrow();
    });
    it('calls stopTyping without throwing', function () {
      var _renderHook1 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook1.result;
      expect(function () {
        return result.current.stopTyping();
      }).not.toThrow();
    });
  });
  describe('state consistency', function () {
    it('maintains state throughout hook lifecycle', function () {
      var _renderHook10 = (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)();
        }),
        result = _renderHook10.result,
        rerender = _renderHook10.rerender;
      var initialNotes = result.current.notes;
      var initialIsLoading = result.current.isLoading;
      rerender({});
      expect(result.current.notes).toBe(initialNotes);
      expect(result.current.isLoading).toBe(initialIsLoading);
    });
  });
  describe('error handling', function () {
    it('handles undefined options gracefully', function () {
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)(undefined);
        });
      }).not.toThrow();
    });
    it('handles null options gracefully', function () {
      expect(function () {
        (0, _reactNative.renderHook)(function () {
          return (0, _useOfflineNotes.useOfflineNotes)(null);
        });
      }).not.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,