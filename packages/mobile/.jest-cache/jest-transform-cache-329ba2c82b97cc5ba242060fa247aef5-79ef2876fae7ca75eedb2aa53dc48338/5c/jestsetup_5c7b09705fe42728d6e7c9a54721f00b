c58d2b30aa9e1361a5e417578fa72cc5
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return require('@react-native-community/netinfo/jest/netinfo-mock');
});
_getJestObj().mock('expo-file-system', function () {
  return {
    documentDirectory: 'file://test-directory/',
    readAsStringAsync: jest.fn(function () {
      return Promise.resolve('test file content');
    }),
    writeAsStringAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    deleteAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    getInfoAsync: jest.fn(function () {
      return Promise.resolve({
        exists: true,
        isDirectory: false
      });
    }),
    makeDirectoryAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    readDirectoryAsync: jest.fn(function () {
      return Promise.resolve(['file1', 'file2']);
    }),
    copyAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    moveAsync: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('expo-sharing', function () {
  return {
    isAvailableAsync: jest.fn(function () {
      return Promise.resolve(true);
    }),
    shareAsync: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('expo-font', function () {
  return {
    useFonts: jest.fn(function () {
      return [true, null];
    }),
    loadAsync: jest.fn(function () {
      return Promise.resolve();
    }),
    isLoaded: jest.fn(function () {
      return true;
    }),
    isLoading: jest.fn(function () {
      return false;
    })
  };
});
_getJestObj().mock('expo-router', function () {
  return {
    useRouter: function useRouter() {
      return {
        push: jest.fn(),
        replace: jest.fn(),
        back: jest.fn(),
        canGoBack: jest.fn(function () {
          return true;
        })
      };
    },
    usePathname: function usePathname() {
      return '/';
    },
    useSearchParams: function useSearchParams() {
      return {};
    },
    Link: function Link(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return children;
    },
    router: {
      push: jest.fn(),
      replace: jest.fn(),
      back: jest.fn(),
      canGoBack: jest.fn(function () {
        return true;
      })
    }
  };
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('@supabase/supabase-js', function () {
  var mockSupabase = {
    auth: {
      signInWithPassword: jest.fn(function () {
        return Promise.resolve({
          data: {
            user: {
              id: 'test-user',
              email: 'test@example.com'
            },
            session: {
              access_token: 'test-token'
            }
          },
          error: null
        });
      }),
      signUp: jest.fn(function () {
        return Promise.resolve({
          data: {
            user: {
              id: 'test-user',
              email: 'test@example.com'
            },
            session: null
          },
          error: null
        });
      }),
      signOut: jest.fn(function () {
        return Promise.resolve({
          error: null
        });
      }),
      onAuthStateChange: jest.fn(function () {
        return {
          data: {
            subscription: {}
          },
          unsubscribe: jest.fn()
        };
      }),
      getSession: jest.fn(function () {
        return Promise.resolve({
          data: {
            session: {
              access_token: 'test-token'
            }
          },
          error: null
        });
      }),
      getUser: jest.fn(function () {
        return Promise.resolve({
          data: {
            user: {
              id: 'test-user',
              email: 'test@example.com'
            }
          },
          error: null
        });
      })
    },
    from: jest.fn().mockReturnThis(),
    select: jest.fn().mockReturnThis(),
    insert: jest.fn().mockReturnThis(),
    update: jest.fn().mockReturnThis(),
    delete: jest.fn().mockReturnThis(),
    eq: jest.fn().mockReturnThis(),
    order: jest.fn().mockReturnThis(),
    limit: jest.fn().mockReturnThis(),
    single: jest.fn(function () {
      return Promise.resolve({
        data: {
          id: 'test-id',
          title: 'Test Note'
        },
        error: null
      });
    }),
    then: jest.fn(function () {
      return Promise.resolve({
        data: [{
          id: 'test-id',
          title: 'Test Note'
        }],
        error: null
      });
    })
  };
  return {
    createClient: jest.fn(function () {
      return mockSupabase;
    })
  };
});
_getJestObj().mock('react-native-paper', function () {
  var RN = require('react-native');
  return Object.assign({}, jest.requireActual('react-native-paper'), {
    Portal: function Portal(_ref2) {
      var children = _ref2.children;
      return children;
    },
    Modal: RN.Modal,
    Surface: RN.View,
    Appbar: {
      Header: RN.View,
      Content: RN.View,
      Action: RN.TouchableOpacity,
      BackAction: RN.TouchableOpacity
    },
    Button: RN.TouchableOpacity,
    Card: Object.assign({}, RN.View, {
      Title: RN.Text,
      Content: RN.View,
      Actions: RN.View
    }),
    Chip: RN.TouchableOpacity,
    FAB: RN.TouchableOpacity,
    IconButton: RN.TouchableOpacity,
    List: {
      Item: RN.TouchableOpacity,
      Section: RN.View,
      Subheader: RN.Text
    },
    Menu: Object.assign({}, RN.View, {
      Item: RN.TouchableOpacity
    }),
    Searchbar: RN.TextInput,
    Snackbar: RN.View,
    TextInput: RN.TextInput,
    Text: RN.Text
  });
});
_getJestObj().mock('react-native-markdown-display', function () {
  var React = require('react');
  var _require = require('react-native'),
    Text = _require.Text;
  return {
    __esModule: true,
    default: function _default(_ref3) {
      var children = _ref3.children;
      return React.createElement(Text, null, children);
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
require('react-native-gesture-handler/jestSetup');
global.beforeEach(function () {
  jest.clearAllMocks();
});
global.console.warn = jest.fn();
global.console.error = jest.fn();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,