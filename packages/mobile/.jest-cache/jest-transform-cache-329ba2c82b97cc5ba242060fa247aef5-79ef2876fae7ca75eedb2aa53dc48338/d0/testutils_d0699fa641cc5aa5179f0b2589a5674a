8535d11a367d9282126325e61a64637f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  render: true,
  createMockNote: true,
  createMockUser: true,
  createMockNavigation: true,
  createMockRoute: true,
  waitForAsyncOperations: true,
  delay: true
};
exports.waitForAsyncOperations = exports.render = exports.delay = exports.createMockUser = exports.createMockRoute = exports.createMockNote = exports.createMockNavigation = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
Object.keys(_reactNative).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _reactNative[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _reactNative[key];
    }
  });
});
var _reactNativePaper = require("react-native-paper");
var _jsxRuntime = require("react/jsx-runtime");
var testTheme = {
  colors: {
    primary: '#6200ee',
    onPrimary: '#ffffff',
    secondary: '#03dac6',
    onSecondary: '#000000',
    background: '#ffffff',
    onBackground: '#000000',
    surface: '#ffffff',
    onSurface: '#000000',
    error: '#b00020',
    onError: '#ffffff'
  }
};
var AllTheProviders = function AllTheProviders(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(_reactNativePaper.PaperProvider, {
    theme: testTheme,
    children: children
  });
};
var customRender = exports.render = function customRender(ui, options) {
  return (0, _reactNative.render)(ui, Object.assign({
    wrapper: AllTheProviders
  }, options));
};
var createMockNote = exports.createMockNote = function createMockNote() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({
    id: 'test-note-id',
    title: 'Test Note',
    content: 'This is test content',
    created_at: new Date('2023-01-01').toISOString(),
    updated_at: new Date('2023-01-01').toISOString(),
    user_id: 'test-user-id'
  }, overrides);
};
var createMockUser = exports.createMockUser = function createMockUser() {
  var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({
    id: 'test-user-id',
    email: 'test@example.com',
    created_at: new Date('2023-01-01').toISOString()
  }, overrides);
};
var createMockNavigation = exports.createMockNavigation = function createMockNavigation() {
  return {
    navigate: jest.fn(),
    goBack: jest.fn(),
    dispatch: jest.fn(),
    setParams: jest.fn(),
    isFocused: jest.fn(function () {
      return true;
    }),
    canGoBack: jest.fn(function () {
      return true;
    }),
    getId: jest.fn(function () {
      return 'test-route';
    }),
    getParent: jest.fn(),
    getState: jest.fn(function () {
      return {
        key: 'test-key',
        index: 0,
        routeNames: ['Test'],
        routes: [{
          key: 'test-route',
          name: 'Test'
        }]
      };
    })
  };
};
var createMockRoute = exports.createMockRoute = function createMockRoute() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    key: 'test-route',
    name: 'Test',
    params: params
  };
};
var waitForAsyncOperations = exports.waitForAsyncOperations = function waitForAsyncOperations() {
  return new Promise(function (resolve) {
    return setTimeout(resolve, 0);
  });
};
var delay = exports.delay = function delay(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,