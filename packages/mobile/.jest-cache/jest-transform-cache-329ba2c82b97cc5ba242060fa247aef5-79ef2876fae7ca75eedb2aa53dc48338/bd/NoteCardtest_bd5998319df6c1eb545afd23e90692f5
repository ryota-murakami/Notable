3b6c27723a47cf03c953e258ecf9c178
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NoteCard = require("../../components/NoteCard");
var _testUtils = require("../utils/test-utils");
var _jsxRuntime = require("react/jsx-runtime");
describe('NoteCard', function () {
  var mockOnPress = jest.fn();
  var mockOnDelete = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders correctly with note data', function () {
    var mockNote = (0, _testUtils.createMockNote)({
      title: 'Test Note Title',
      content: 'This is test content for the note'
    });
    var _render = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByText = _render.getByText;
    expect(getByText('Test Note Title')).toBeTruthy();
    expect(getByText('This is test content for the note')).toBeTruthy();
  });
  it('calls onPress when card is pressed', function () {
    var _getByText$parent;
    var mockNote = (0, _testUtils.createMockNote)();
    var _render2 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByTestId = _render2.getByTestId;
    var cardContent = getByTestId('card-content') || ((_getByText$parent = getByText(mockNote.title).parent) == null ? void 0 : _getByText$parent.parent);
    if (cardContent) {
      _reactNative.fireEvent.press(cardContent);
      expect(mockOnPress).toHaveBeenCalledTimes(1);
    }
  });
  it('calls onDelete when delete button is pressed', function () {
    var mockNote = (0, _testUtils.createMockNote)();
    var _render3 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByLabelText = _render3.getByLabelText;
    var deleteButton = getByLabelText('delete');
    _reactNative.fireEvent.press(deleteButton);
    expect(mockOnDelete).toHaveBeenCalledTimes(1);
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('truncates content to 2 lines', function () {
    var mockNote = (0, _testUtils.createMockNote)({
      content: 'This is a very long content that should be truncated after two lines. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'
    });
    var _render4 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByText = _render4.getByText;
    var contentText = getByText(mockNote.content);
    expect(contentText.props.numberOfLines).toBe(2);
  });
  it('handles empty title gracefully', function () {
    var mockNote = (0, _testUtils.createMockNote)({
      title: '',
      content: 'Content without title'
    });
    var _render5 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByText = _render5.getByText,
      queryByText = _render5.queryByText;
    expect(getByText('Content without title')).toBeTruthy();
    expect(queryByText('')).toBeTruthy();
  });
  it('handles empty content gracefully', function () {
    var mockNote = (0, _testUtils.createMockNote)({
      title: 'Title Only',
      content: ''
    });
    var _render6 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByText = _render6.getByText;
    expect(getByText('Title Only')).toBeTruthy();
  });
  it('applies correct styles', function () {
    var mockNote = (0, _testUtils.createMockNote)();
    var _render7 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByText = _render7.getByText;
    var titleText = getByText(mockNote.title);
    var contentText = getByText(mockNote.content);
    expect(titleText.props.style).toEqual(expect.objectContaining({
      fontSize: 18,
      fontWeight: 'bold',
      marginBottom: 8
    }));
    expect(contentText.props.style).toEqual(expect.objectContaining({
      fontSize: 14
    }));
  });
  it('renders delete icon button', function () {
    var mockNote = (0, _testUtils.createMockNote)();
    var _render8 = (0, _testUtils.render)((0, _jsxRuntime.jsx)(_NoteCard.NoteCard, {
        note: mockNote,
        onPress: mockOnPress,
        onDelete: mockOnDelete
      })),
      getByLabelText = _render8.getByLabelText;
    var deleteButton = getByLabelText('delete');
    expect(deleteButton).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,