'use strict'
;(self.webpackChunk_notable_web = self.webpackChunk_notable_web || []).push([
  [1773],
  {
    './components/export/export-dialog.stories.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      ;(__webpack_require__.r(__webpack_exports__),
        __webpack_require__.d(__webpack_exports__, {
          CloseDialog: () => CloseDialog,
          Default: () => Default,
          ErrorState: () => ErrorState,
          HTMLDefault: () => HTMLDefault,
          InteractiveFormatSwitch: () => InteractiveFormatSwitch,
          InteractiveOptions: () => InteractiveOptions,
          LoadingState: () => LoadingState,
          LongNote: () => LongNote,
          MarkdownOptions: () => export_dialog_stories_MarkdownOptions,
          MobileResponsive: () => MobileResponsive,
          PDFDefault: () => PDFDefault,
          PDFOptions: () => export_dialog_stories_PDFOptions,
          PreviewGeneration: () => PreviewGeneration,
          ReactDefault: () => ReactDefault,
          ShortNote: () => ShortNote,
          WithCallbacks: () => WithCallbacks,
          WithCustomTrigger: () => WithCustomTrigger,
          __namedExportsOrder: () => __namedExportsOrder,
          default: () => export_dialog_stories,
        }))
      var jsx_runtime = __webpack_require__(
          '../../node_modules/.pnpm/next@15.2.4_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-d_866e0ebb5cad13c7ae73d64ed145106f/node_modules/next/dist/compiled/react/jsx-runtime.js'
        ),
        react = __webpack_require__(
          '../../node_modules/.pnpm/next@15.2.4_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-d_866e0ebb5cad13c7ae73d64ed145106f/node_modules/next/dist/compiled/react/index.js'
        ),
        settings = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/settings.js'
        ),
        download = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/download.js'
        ),
        file_text = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/file-text.js'
        ),
        x = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/x.js'
        ),
        file = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/file.js'
        ),
        globe = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/globe.js'
        ),
        code = __webpack_require__(
          '../../node_modules/.pnpm/lucide-react@0.454.0_react@19.1.0/node_modules/lucide-react/dist/esm/icons/code.js'
        ),
        dist = __webpack_require__(
          '../../node_modules/.pnpm/@radix-ui+react-dialog@1.1.14_@types+react-dom@19.1.6_@types+react@19.1.8__@types+react_ebf14a846abc2fe74b19ca0ca406c133/node_modules/@radix-ui/react-dialog/dist/index.mjs'
        ),
        components_button = __webpack_require__(
          './design-system/components/button.tsx'
        ),
        badge = __webpack_require__('./design-system/components/badge.tsx'),
        react_switch_dist = __webpack_require__(
          '../../node_modules/.pnpm/@radix-ui+react-switch@1.2.5_@types+react-dom@19.1.6_@types+react@19.1.8__@types+react@_493359caf905e3ba119eff41a016151d/node_modules/@radix-ui/react-switch/dist/index.mjs'
        ),
        react_label_dist = __webpack_require__(
          '../../node_modules/.pnpm/@radix-ui+react-label@2.1.1_@types+react-dom@19.1.6_@types+react@19.1.8__@types+react@1_a268e9df9c8ef9f1b00a2ad699b30e62/node_modules/@radix-ui/react-label/dist/index.mjs'
        ),
        react_radio_group_dist = __webpack_require__(
          '../../node_modules/.pnpm/@radix-ui+react-radio-group@1.3.7_@types+react-dom@19.1.6_@types+react@19.1.8__@types+r_71b26ba52b90a380d291cbcc454c0e67/node_modules/@radix-ui/react-radio-group/dist/index.mjs'
        ),
        slider = __webpack_require__('./design-system/components/slider.tsx'),
        input = __webpack_require__('./design-system/components/input.tsx'),
        utils = __webpack_require__('./lib/utils.ts')
      function cov_1357pmx3n6() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/types/export.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '9a903b63e32ce303cc1bd46b90cac079b46b6724' === coverage[path].hash) ||
          (coverage[path] = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/types/export.ts',
            statementMap: {},
            fnMap: {},
            branchMap: {},
            s: {},
            f: {},
            b: {},
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/types/export.ts',
              ],
              sourcesContent: [
                "import { type Note } from './note'\n\n/**\n * Export format types supported by the system\n */\nexport type ExportFormat = 'markdown' | 'pdf' | 'html' | 'react'\n\n/**\n * Export quality settings for different formats\n */\nexport interface ExportQuality {\n  /** Image quality (0-100) */\n  imageQuality?: number\n  /** Image format for embedded images */\n  imageFormat?: 'png' | 'jpeg' | 'webp'\n  /** Image maximum width in pixels */\n  imageMaxWidth?: number\n  /** Whether to optimize for file size */\n  optimizeSize?: boolean\n}\n\n/**\n * Export options for customizing output\n */\nexport interface ExportOptions {\n  /** Target export format */\n  format: ExportFormat\n  /** Include front matter metadata */\n  includeFrontMatter?: boolean\n  /** Include creation/modification dates */\n  includeDates?: boolean\n  /** Include tags */\n  includeTags?: boolean\n  /** Custom CSS for HTML/PDF export */\n  customCSS?: string\n  /** Page format for PDF */\n  pageFormat?: 'A4' | 'Letter' | 'Legal' | 'A3'\n  /** Page orientation for PDF */\n  pageOrientation?: 'portrait' | 'landscape'\n  /** Quality settings */\n  quality?: ExportQuality\n  /** Template name for styling */\n  template?: string\n}\n\n/**\n * Markdown-specific export options\n */\nexport interface MarkdownExportOptions extends ExportOptions {\n  format: 'markdown'\n  /** Use GitHub Flavored Markdown */\n  useGFM?: boolean\n  /** Image handling strategy */\n  imageHandling?: 'embed' | 'link' | 'copy'\n  /** Base URL for linked images */\n  imageBaseUrl?: string\n  /** Custom markdown extensions */\n  extensions?: string[]\n}\n\n/**\n * PDF-specific export options\n */\nexport interface PDFExportOptions extends ExportOptions {\n  format: 'pdf'\n  /** Page margins in mm */\n  margins?: {\n    top?: number\n    right?: number\n    bottom?: number\n    left?: number\n  }\n  /** Include page numbers */\n  includePageNumbers?: boolean\n  /** Header content */\n  header?: string\n  /** Footer content */\n  footer?: string\n  /** Generate table of contents */\n  generateTOC?: boolean\n  /** Watermark text */\n  watermark?: string\n}\n\n/**\n * HTML-specific export options\n */\nexport interface HTMLExportOptions extends ExportOptions {\n  format: 'html'\n  /** Create self-contained file */\n  selfContained?: boolean\n  /** Include search functionality */\n  includeSearch?: boolean\n  /** Include navigation */\n  includeNavigation?: boolean\n  /** Mobile responsive */\n  responsive?: boolean\n  /** Dark mode support */\n  darkMode?: boolean\n}\n\n/**\n * React-specific export options\n */\nexport interface ReactExportOptions extends ExportOptions {\n  format: 'react'\n  /** Use TypeScript */\n  useTypeScript?: boolean\n  /** Styling approach */\n  styling?: 'css-modules' | 'styled-components' | 'tailwind' | 'css-in-js'\n  /** Component name */\n  componentName?: string\n  /** Props interface name */\n  propsInterface?: string\n  /** Include prop types */\n  includePropTypes?: boolean\n  /** Export as functional component */\n  functional?: boolean\n}\n\n/**\n * Export result containing the exported content and metadata\n */\nexport interface ExportResult {\n  /** Exported content */\n  content: string\n  /** Generated filename */\n  filename: string\n  /** MIME type */\n  mimeType: string\n  /** File size in bytes */\n  size: number\n  /** Export format used */\n  format: ExportFormat\n  /** Export timestamp */\n  exportedAt: string\n  /** Additional files (for multi-file exports) */\n  additionalFiles?: {\n    filename: string\n    content: string | Buffer\n    mimeType: string\n  }[]\n}\n\n/**\n * Bulk export options for multiple notes\n */\nexport interface BulkExportOptions {\n  /** Export format */\n  format: ExportFormat\n  /** Notes to export */\n  noteIds: string[]\n  /** Archive format */\n  archiveFormat?: 'zip' | 'tar'\n  /** Archive name */\n  archiveName?: string\n  /** Individual export options */\n  exportOptions?: ExportOptions\n  /** Include folder structure */\n  preserveFolderStructure?: boolean\n}\n\n/**\n * Export history entry\n */\nexport interface ExportHistoryEntry {\n  id: string\n  userId: string\n  noteId?: string\n  noteIds?: string[]\n  format: ExportFormat\n  options: ExportOptions\n  filename: string\n  size: number\n  createdAt: string\n  downloadUrl?: string\n  expiresAt?: string\n}\n\n/**\n * Export service interface\n */\nexport interface ExportService {\n  /**\n   * Export a single note\n   */\n  exportNote(note: Note, options: ExportOptions): Promise<ExportResult>\n\n  /**\n   * Export multiple notes\n   */\n  exportNotes(notes: Note[], options: BulkExportOptions): Promise<ExportResult>\n\n  /**\n   * Get supported export formats\n   */\n  getSupportedFormats(): ExportFormat[]\n\n  /**\n   * Get default options for a format\n   */\n  getDefaultOptions(format: ExportFormat): ExportOptions\n\n  /**\n   * Validate export options\n   */\n  validateOptions(options: ExportOptions): { valid: boolean; errors: string[] }\n\n  /**\n   * Get export history for a user\n   */\n  getExportHistory(\n    userId: string,\n    limit?: number\n  ): Promise<ExportHistoryEntry[]>\n\n  /**\n   * Delete export from history\n   */\n  deleteExport(exportId: string): Promise<void>\n}\n\n/**\n * Content processor interface for handling different node types\n */\nexport interface ContentProcessor {\n  /**\n   * Process Plate.js content to target format\n   */\n  processContent(content: any[], options: ExportOptions): Promise<string>\n\n  /**\n   * Process individual node\n   */\n  processNode(node: any, options: ExportOptions): Promise<string>\n\n  /**\n   * Get supported node types\n   */\n  getSupportedNodeTypes(): string[]\n}\n\n/**\n * Template system interface\n */\nexport interface TemplateEngine {\n  /**\n   * Render content with template\n   */\n  render(templateName: string, data: TemplateData): Promise<string>\n\n  /**\n   * Get available templates\n   */\n  getAvailableTemplates(format: ExportFormat): string[]\n\n  /**\n   * Register custom template\n   */\n  registerTemplate(name: string, content: string, format: ExportFormat): void\n}\n\n/**\n * Template data for rendering\n */\nexport interface TemplateData {\n  title: string\n  content: string\n  metadata: {\n    createdAt?: string\n    updatedAt?: string\n    tags?: string[]\n    wordCount?: number\n    readingTime?: string\n  }\n  options: ExportOptions\n  [key: string]: any\n}\n\n/**\n * Asset processor for handling images and files\n */\nexport interface AssetProcessor {\n  /**\n   * Process image for export\n   */\n  processImage(\n    imageUrl: string,\n    options: ExportQuality\n  ): Promise<{\n    content: Buffer\n    mimeType: string\n    filename: string\n  }>\n\n  /**\n   * Optimize image\n   */\n  optimizeImage(buffer: Buffer, options: ExportQuality): Promise<Buffer>\n\n  /**\n   * Get image dimensions\n   */\n  getImageDimensions(buffer: Buffer): Promise<{ width: number; height: number }>\n}\n",
              ],
              names: [],
              mappings: 'AAuRA;;CAEC,GACD,WAsBC',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '9a903b63e32ce303cc1bd46b90cac079b46b6724',
          })
        var actualCoverage = coverage[path]
        return (
          (cov_1357pmx3n6 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_1357pmx3n6()
      __webpack_require__(
        '../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js'
      ).Buffer
      function cov_6x0p8cyfm() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/base-export-service.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/base-export-service.ts',
            statementMap: {
              0: {
                start: { line: 8, column: 27 },
                end: { line: 8, column: 56 },
              },
              1: {
                start: { line: 9, column: 8 },
                end: { line: 11, column: 9 },
              },
              2: {
                start: { line: 10, column: 12 },
                end: { line: 10, column: 87 },
              },
              3: {
                start: { line: 13, column: 24 },
                end: { line: 13, column: 55 },
              },
              4: {
                start: { line: 15, column: 33 },
                end: { line: 15, column: 93 },
              },
              5: {
                start: { line: 17, column: 29 },
                end: { line: 17, column: 86 },
              },
              6: {
                start: { line: 19, column: 25 },
                end: { line: 19, column: 61 },
              },
              7: {
                start: { line: 21, column: 21 },
                end: { line: 21, column: 60 },
              },
              8: {
                start: { line: 22, column: 23 },
                end: { line: 29, column: 9 },
              },
              9: {
                start: { line: 31, column: 8 },
                end: { line: 31, column: 56 },
              },
              10: {
                start: { line: 32, column: 8 },
                end: { line: 32, column: 22 },
              },
              11: {
                start: { line: 37, column: 24 },
                end: { line: 37, column: 26 },
              },
              12: {
                start: { line: 38, column: 8 },
                end: { line: 45, column: 9 },
              },
              13: {
                start: { line: 39, column: 34 },
                end: { line: 42, column: 13 },
              },
              14: {
                start: { line: 43, column: 27 },
                end: { line: 43, column: 69 },
              },
              15: {
                start: { line: 44, column: 12 },
                end: { line: 44, column: 33 },
              },
              16: {
                start: { line: 47, column: 8 },
                end: { line: 49, column: 9 },
              },
              17: {
                start: { line: 48, column: 12 },
                end: { line: 48, column: 56 },
              },
              18: {
                start: { line: 51, column: 8 },
                end: { line: 53, column: 9 },
              },
              19: {
                start: { line: 52, column: 12 },
                end: { line: 52, column: 30 },
              },
              20: {
                start: { line: 55, column: 8 },
                end: { line: 55, column: 53 },
              },
              21: {
                start: { line: 60, column: 8 },
                end: { line: 65, column: 10 },
              },
              22: {
                start: { line: 70, column: 28 },
                end: { line: 81, column: 9 },
              },
              23: {
                start: { line: 84, column: 8 },
                end: { line: 84, column: 27 },
              },
              24: {
                start: { line: 89, column: 23 },
                end: { line: 89, column: 25 },
              },
              25: {
                start: { line: 91, column: 8 },
                end: { line: 93, column: 9 },
              },
              26: {
                start: { line: 92, column: 12 },
                end: { line: 92, column: 53 },
              },
              27: {
                start: { line: 94, column: 8 },
                end: { line: 96, column: 9 },
              },
              28: {
                start: { line: 95, column: 12 },
                end: { line: 95, column: 72 },
              },
              29: {
                start: { line: 98, column: 8 },
                end: { line: 102, column: 9 },
              },
              30: {
                start: { line: 99, column: 12 },
                end: { line: 101, column: 13 },
              },
              31: {
                start: { line: 100, column: 16 },
                end: { line: 100, column: 71 },
              },
              32: {
                start: { line: 104, column: 8 },
                end: { line: 104, column: 60 },
              },
              33: {
                start: { line: 105, column: 8 },
                end: { line: 108, column: 10 },
              },
              34: {
                start: { line: 115, column: 8 },
                end: { line: 115, column: 18 },
              },
              35: {
                start: { line: 121, column: 8 },
                end: { line: 121, column: 43 },
              },
              36: {
                start: { line: 126, column: 8 },
                end: { line: 140, column: 9 },
              },
              37: {
                start: { line: 127, column: 12 },
                end: { line: 127, column: 39 },
              },
              38: {
                start: { line: 130, column: 12 },
                end: { line: 139, column: 14 },
              },
              39: {
                start: { line: 146, column: 8 },
                end: { line: 148, column: 9 },
              },
              40: {
                start: { line: 147, column: 12 },
                end: { line: 147, column: 27 },
              },
              41: {
                start: { line: 151, column: 8 },
                end: { line: 151, column: 23 },
              },
              42: {
                start: { line: 157, column: 31 },
                end: { line: 157, column: 122 },
              },
              43: {
                start: { line: 158, column: 26 },
                end: { line: 158, column: 64 },
              },
              44: {
                start: { line: 159, column: 26 },
                end: { line: 159, column: 63 },
              },
              45: {
                start: { line: 160, column: 8 },
                end: { line: 160, column: 75 },
              },
              46: {
                start: { line: 165, column: 8 },
                end: { line: 176, column: 9 },
              },
              47: {
                start: { line: 167, column: 16 },
                end: { line: 167, column: 28 },
              },
              48: {
                start: { line: 169, column: 16 },
                end: { line: 169, column: 29 },
              },
              49: {
                start: { line: 171, column: 16 },
                end: { line: 171, column: 30 },
              },
              50: {
                start: { line: 173, column: 16 },
                end: { line: 173, column: 29 },
              },
              51: {
                start: { line: 175, column: 16 },
                end: { line: 175, column: 29 },
              },
              52: {
                start: { line: 181, column: 8 },
                end: { line: 192, column: 9 },
              },
              53: {
                start: { line: 183, column: 16 },
                end: { line: 183, column: 39 },
              },
              54: {
                start: { line: 185, column: 16 },
                end: { line: 185, column: 41 },
              },
              55: {
                start: { line: 187, column: 16 },
                end: { line: 187, column: 35 },
              },
              56: {
                start: { line: 189, column: 16 },
                end: { line: 189, column: 41 },
              },
              57: {
                start: { line: 191, column: 16 },
                end: { line: 191, column: 36 },
              },
              58: {
                start: { line: 205, column: 8 },
                end: { line: 205, column: 64 },
              },
              59: {
                start: { line: 211, column: 32 },
                end: { line: 211, column: 79 },
              },
              60: {
                start: { line: 211, column: 49 },
                end: { line: 211, column: 58 },
              },
              61: {
                start: { line: 212, column: 26 },
                end: { line: 212, column: 67 },
              },
              62: {
                start: { line: 212, column: 51 },
                end: { line: 212, column: 63 },
              },
              63: {
                start: { line: 213, column: 25 },
                end: { line: 213, column: 139 },
              },
              64: {
                start: { line: 214, column: 8 },
                end: { line: 221, column: 10 },
              },
              65: {
                start: { line: 224, column: 8 },
                end: { line: 224, column: 49 },
              },
              66: {
                start: { line: 233, column: 31 },
                end: { line: 233, column: 102 },
              },
              67: {
                start: { line: 233, column: 69 },
                end: { line: 233, column: 100 },
              },
              68: {
                start: { line: 234, column: 8 },
                end: { line: 234, column: 41 },
              },
              69: {
                start: { line: 240, column: 8 },
                end: { line: 242, column: 9 },
              },
              70: {
                start: { line: 241, column: 12 },
                end: { line: 241, column: 55 },
              },
              71: {
                start: { line: 244, column: 8 },
                end: { line: 265, column: 9 },
              },
              72: {
                start: { line: 246, column: 16 },
                end: { line: 246, column: 60 },
              },
              73: {
                start: { line: 248, column: 16 },
                end: { line: 248, column: 58 },
              },
              74: {
                start: { line: 250, column: 16 },
                end: { line: 250, column: 55 },
              },
              75: {
                start: { line: 252, column: 16 },
                end: { line: 252, column: 59 },
              },
              76: {
                start: { line: 254, column: 16 },
                end: { line: 254, column: 61 },
              },
              77: {
                start: { line: 256, column: 16 },
                end: { line: 256, column: 60 },
              },
              78: {
                start: { line: 258, column: 16 },
                end: { line: 258, column: 56 },
              },
              79: {
                start: { line: 260, column: 16 },
                end: { line: 260, column: 56 },
              },
              80: {
                start: { line: 262, column: 16 },
                end: { line: 262, column: 55 },
              },
              81: {
                start: { line: 264, column: 16 },
                end: { line: 264, column: 62 },
              },
              82: {
                start: { line: 270, column: 8 },
                end: { line: 280, column: 10 },
              },
              83: {
                start: { line: 285, column: 8 },
                end: { line: 287, column: 9 },
              },
              84: {
                start: { line: 286, column: 12 },
                end: { line: 286, column: 22 },
              },
              85: {
                start: { line: 288, column: 34 },
                end: { line: 288, column: 113 },
              },
              86: {
                start: { line: 288, column: 79 },
                end: { line: 288, column: 111 },
              },
              87: {
                start: { line: 289, column: 8 },
                end: { line: 289, column: 42 },
              },
              88: {
                start: { line: 294, column: 8 },
                end: { line: 296, column: 9 },
              },
              89: {
                start: { line: 295, column: 12 },
                end: { line: 295, column: 29 },
              },
              90: {
                start: { line: 297, column: 8 },
                end: { line: 299, column: 9 },
              },
              91: {
                start: { line: 298, column: 12 },
                end: { line: 298, column: 85 },
              },
              92: {
                start: { line: 298, column: 46 },
                end: { line: 298, column: 74 },
              },
              93: {
                start: { line: 300, column: 8 },
                end: { line: 300, column: 18 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 6, column: 6 },
                  end: { line: 6, column: 7 },
                },
                loc: {
                  start: { line: 6, column: 38 },
                  end: { line: 33, column: 5 },
                },
                line: 6,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 36, column: 6 },
                  end: { line: 36, column: 7 },
                },
                loc: {
                  start: { line: 36, column: 40 },
                  end: { line: 56, column: 5 },
                },
                line: 36,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 59, column: 6 },
                  end: { line: 59, column: 7 },
                },
                loc: {
                  start: { line: 59, column: 28 },
                  end: { line: 66, column: 5 },
                },
                line: 59,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 69, column: 6 },
                  end: { line: 69, column: 7 },
                },
                loc: {
                  start: { line: 69, column: 32 },
                  end: { line: 85, column: 5 },
                },
                line: 69,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 88, column: 6 },
                  end: { line: 88, column: 7 },
                },
                loc: {
                  start: { line: 88, column: 31 },
                  end: { line: 109, column: 5 },
                },
                line: 88,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 112, column: 6 },
                  end: { line: 112, column: 7 },
                },
                loc: {
                  start: { line: 112, column: 49 },
                  end: { line: 116, column: 5 },
                },
                line: 112,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 119, column: 6 },
                  end: { line: 119, column: 7 },
                },
                loc: {
                  start: { line: 119, column: 35 },
                  end: { line: 122, column: 5 },
                },
                line: 119,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 125, column: 6 },
                  end: { line: 125, column: 7 },
                },
                loc: {
                  start: { line: 125, column: 28 },
                  end: { line: 141, column: 5 },
                },
                line: 125,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 144, column: 6 },
                  end: { line: 144, column: 7 },
                },
                loc: {
                  start: { line: 144, column: 50 },
                  end: { line: 152, column: 5 },
                },
                line: 144,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 155, column: 6 },
                  end: { line: 155, column: 7 },
                },
                loc: {
                  start: { line: 155, column: 38 },
                  end: { line: 161, column: 5 },
                },
                line: 155,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 164, column: 6 },
                  end: { line: 164, column: 7 },
                },
                loc: {
                  start: { line: 164, column: 31 },
                  end: { line: 177, column: 5 },
                },
                line: 164,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 180, column: 6 },
                  end: { line: 180, column: 7 },
                },
                loc: {
                  start: { line: 180, column: 26 },
                  end: { line: 193, column: 5 },
                },
                line: 180,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 196, column: 6 },
                  end: { line: 196, column: 7 },
                },
                loc: {
                  start: { line: 196, column: 49 },
                  end: { line: 199, column: 5 },
                },
                line: 196,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 202, column: 6 },
                  end: { line: 202, column: 7 },
                },
                loc: {
                  start: { line: 202, column: 44 },
                  end: { line: 206, column: 5 },
                },
                line: 202,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 209, column: 6 },
                  end: { line: 209, column: 7 },
                },
                loc: {
                  start: { line: 209, column: 45 },
                  end: { line: 222, column: 5 },
                },
                line: 209,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 211, column: 44 },
                  end: { line: 211, column: 45 },
                },
                loc: {
                  start: { line: 211, column: 49 },
                  end: { line: 211, column: 58 },
                },
                line: 211,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 212, column: 41 },
                  end: { line: 212, column: 42 },
                },
                loc: {
                  start: { line: 212, column: 51 },
                  end: { line: 212, column: 63 },
                },
                line: 212,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 223, column: 4 },
                  end: { line: 223, column: 5 },
                },
                loc: {
                  start: { line: 223, column: 33 },
                  end: { line: 225, column: 5 },
                },
                line: 223,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 232, column: 6 },
                  end: { line: 232, column: 7 },
                },
                loc: {
                  start: { line: 232, column: 45 },
                  end: { line: 235, column: 5 },
                },
                line: 232,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 233, column: 61 },
                  end: { line: 233, column: 62 },
                },
                loc: {
                  start: { line: 233, column: 69 },
                  end: { line: 233, column: 100 },
                },
                line: 233,
              },
              20: {
                name: '(anonymous_20)',
                decl: {
                  start: { line: 238, column: 6 },
                  end: { line: 238, column: 7 },
                },
                loc: {
                  start: { line: 238, column: 39 },
                  end: { line: 266, column: 5 },
                },
                line: 238,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 269, column: 6 },
                  end: { line: 269, column: 7 },
                },
                loc: {
                  start: { line: 269, column: 30 },
                  end: { line: 281, column: 5 },
                },
                line: 269,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 284, column: 6 },
                  end: { line: 284, column: 7 },
                },
                loc: {
                  start: { line: 284, column: 43 },
                  end: { line: 290, column: 5 },
                },
                line: 284,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 288, column: 70 },
                  end: { line: 288, column: 71 },
                },
                loc: {
                  start: { line: 288, column: 79 },
                  end: { line: 288, column: 111 },
                },
                line: 288,
              },
              24: {
                name: '(anonymous_24)',
                decl: {
                  start: { line: 293, column: 6 },
                  end: { line: 293, column: 7 },
                },
                loc: {
                  start: { line: 293, column: 29 },
                  end: { line: 301, column: 5 },
                },
                line: 293,
              },
              25: {
                name: '(anonymous_25)',
                decl: {
                  start: { line: 298, column: 37 },
                  end: { line: 298, column: 38 },
                },
                loc: {
                  start: { line: 298, column: 46 },
                  end: { line: 298, column: 74 },
                },
                line: 298,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 9, column: 8 },
                  end: { line: 11, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 9, column: 8 },
                    end: { line: 11, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 9,
              },
              1: {
                loc: {
                  start: { line: 47, column: 8 },
                  end: { line: 49, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 47, column: 8 },
                    end: { line: 49, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 47,
              },
              2: {
                loc: {
                  start: { line: 51, column: 8 },
                  end: { line: 53, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 51, column: 8 },
                    end: { line: 53, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 51,
              },
              3: {
                loc: {
                  start: { line: 91, column: 8 },
                  end: { line: 93, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 91, column: 8 },
                    end: { line: 93, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 91,
              },
              4: {
                loc: {
                  start: { line: 94, column: 8 },
                  end: { line: 96, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 94, column: 8 },
                    end: { line: 96, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 94,
              },
              5: {
                loc: {
                  start: { line: 98, column: 8 },
                  end: { line: 102, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 98, column: 8 },
                    end: { line: 102, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 98,
              },
              6: {
                loc: {
                  start: { line: 99, column: 12 },
                  end: { line: 101, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 99, column: 12 },
                    end: { line: 101, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 99,
              },
              7: {
                loc: {
                  start: { line: 99, column: 16 },
                  end: { line: 99, column: 120 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 99, column: 16 },
                    end: { line: 99, column: 44 },
                  },
                  {
                    start: { line: 99, column: 49 },
                    end: { line: 99, column: 81 },
                  },
                  {
                    start: { line: 99, column: 85 },
                    end: { line: 99, column: 119 },
                  },
                ],
                line: 99,
              },
              8: {
                loc: {
                  start: { line: 112, column: 37 },
                  end: { line: 112, column: 47 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 112, column: 45 },
                    end: { line: 112, column: 47 },
                  },
                ],
                line: 112,
              },
              9: {
                loc: {
                  start: { line: 146, column: 8 },
                  end: { line: 148, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 146, column: 8 },
                    end: { line: 148, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 146,
              },
              10: {
                loc: {
                  start: { line: 160, column: 18 },
                  end: { line: 160, column: 46 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 160, column: 18 },
                    end: { line: 160, column: 32 },
                  },
                  {
                    start: { line: 160, column: 36 },
                    end: { line: 160, column: 46 },
                  },
                ],
                line: 160,
              },
              11: {
                loc: {
                  start: { line: 165, column: 8 },
                  end: { line: 176, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 166, column: 12 },
                    end: { line: 167, column: 28 },
                  },
                  {
                    start: { line: 168, column: 12 },
                    end: { line: 169, column: 29 },
                  },
                  {
                    start: { line: 170, column: 12 },
                    end: { line: 171, column: 30 },
                  },
                  {
                    start: { line: 172, column: 12 },
                    end: { line: 173, column: 29 },
                  },
                  {
                    start: { line: 174, column: 12 },
                    end: { line: 175, column: 29 },
                  },
                ],
                line: 165,
              },
              12: {
                loc: {
                  start: { line: 181, column: 8 },
                  end: { line: 192, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 182, column: 12 },
                    end: { line: 183, column: 39 },
                  },
                  {
                    start: { line: 184, column: 12 },
                    end: { line: 185, column: 41 },
                  },
                  {
                    start: { line: 186, column: 12 },
                    end: { line: 187, column: 35 },
                  },
                  {
                    start: { line: 188, column: 12 },
                    end: { line: 189, column: 41 },
                  },
                  {
                    start: { line: 190, column: 12 },
                    end: { line: 191, column: 36 },
                  },
                ],
                line: 181,
              },
              13: {
                loc: {
                  start: { line: 213, column: 25 },
                  end: { line: 213, column: 139 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 213, column: 25 },
                    end: { line: 213, column: 44 },
                  },
                  {
                    start: { line: 213, column: 48 },
                    end: { line: 213, column: 139 },
                  },
                ],
                line: 213,
              },
              14: {
                loc: {
                  start: { line: 240, column: 8 },
                  end: { line: 242, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 240, column: 8 },
                    end: { line: 242, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 240,
              },
              15: {
                loc: {
                  start: { line: 244, column: 8 },
                  end: { line: 265, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 245, column: 12 },
                    end: { line: 246, column: 60 },
                  },
                  {
                    start: { line: 247, column: 12 },
                    end: { line: 248, column: 58 },
                  },
                  {
                    start: { line: 249, column: 12 },
                    end: { line: 250, column: 55 },
                  },
                  {
                    start: { line: 251, column: 12 },
                    end: { line: 252, column: 59 },
                  },
                  {
                    start: { line: 253, column: 12 },
                    end: { line: 254, column: 61 },
                  },
                  {
                    start: { line: 255, column: 12 },
                    end: { line: 256, column: 60 },
                  },
                  {
                    start: { line: 257, column: 12 },
                    end: { line: 258, column: 56 },
                  },
                  {
                    start: { line: 259, column: 12 },
                    end: { line: 260, column: 56 },
                  },
                  {
                    start: { line: 261, column: 12 },
                    end: { line: 262, column: 55 },
                  },
                  {
                    start: { line: 263, column: 12 },
                    end: { line: 264, column: 62 },
                  },
                ],
                line: 244,
              },
              16: {
                loc: {
                  start: { line: 285, column: 8 },
                  end: { line: 287, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 285, column: 8 },
                    end: { line: 287, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 285,
              },
              17: {
                loc: {
                  start: { line: 285, column: 12 },
                  end: { line: 285, column: 59 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 285, column: 12 },
                    end: { line: 285, column: 26 },
                  },
                  {
                    start: { line: 285, column: 30 },
                    end: { line: 285, column: 59 },
                  },
                ],
                line: 285,
              },
              18: {
                loc: {
                  start: { line: 294, column: 8 },
                  end: { line: 296, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 294, column: 8 },
                    end: { line: 296, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 294,
              },
              19: {
                loc: {
                  start: { line: 297, column: 8 },
                  end: { line: 299, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 297, column: 8 },
                    end: { line: 299, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 297,
              },
              20: {
                loc: {
                  start: { line: 297, column: 12 },
                  end: { line: 297, column: 57 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 297, column: 12 },
                    end: { line: 297, column: 25 },
                  },
                  {
                    start: { line: 297, column: 29 },
                    end: { line: 297, column: 57 },
                  },
                ],
                line: 297,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0, 0],
              8: [0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0, 0, 0, 0],
              12: [0, 0, 0, 0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/base-export-service.ts',
              ],
              sourcesContent: [
                "import { type Node } from 'slate'\nimport { type Note } from '../../types/note'\nimport {\n  type BulkExportOptions,\n  type ContentProcessor,\n  type ExportFormat,\n  type ExportHistoryEntry,\n  type ExportOptions,\n  type ExportResult,\n  type ExportService,\n} from '../../types/export'\n\n/**\n * Base export service that provides common functionality for all export formats\n */\nexport abstract class BaseExportService implements ExportService {\n  protected contentProcessor: ContentProcessor\n\n  constructor(contentProcessor: ContentProcessor) {\n    this.contentProcessor = contentProcessor\n  }\n\n  /**\n   * Export a single note\n   */\n  async exportNote(note: Note, options: ExportOptions): Promise<ExportResult> {\n    // Validate options\n    const validation = this.validateOptions(options)\n    if (!validation.valid) {\n      throw new Error(`Invalid export options: ${validation.errors.join(', ')}`)\n    }\n\n    // Parse Plate.js content\n    const content = this.parseContent(note.content)\n\n    // Process content with the specific processor\n    const processedContent = await this.contentProcessor.processContent(\n      content,\n      options\n    )\n\n    // Apply template if specified\n    const finalContent = await this.applyTemplate(\n      processedContent,\n      note,\n      options\n    )\n\n    // Generate filename\n    const filename = this.generateFilename(note, options)\n\n    // Calculate size\n    const size = Buffer.byteLength(finalContent, 'utf8')\n\n    const result: ExportResult = {\n      content: finalContent,\n      filename,\n      mimeType: this.getMimeType(options.format),\n      size,\n      format: options.format,\n      exportedAt: new Date().toISOString(),\n    }\n\n    // Save to export history\n    await this.saveToHistory(note, options, result)\n\n    return result\n  }\n\n  /**\n   * Export multiple notes\n   */\n  async exportNotes(\n    notes: Note[],\n    options: BulkExportOptions\n  ): Promise<ExportResult> {\n    const results: ExportResult[] = []\n\n    for (const note of notes) {\n      const exportOptions = { ...options.exportOptions, format: options.format }\n      const result = await this.exportNote(note, exportOptions as ExportOptions)\n      results.push(result)\n    }\n\n    // Create archive if needed\n    if (options.archiveFormat) {\n      return this.createArchive(results, options)\n    }\n\n    // Return single result if only one note\n    if (results.length === 1) {\n      return results[0]\n    }\n\n    // Combine multiple results\n    return this.combineResults(results, options)\n  }\n\n  /**\n   * Get supported export formats\n   */\n  getSupportedFormats(): ExportFormat[] {\n    return ['markdown', 'pdf', 'html', 'react']\n  }\n\n  /**\n   * Get default options for a format\n   */\n  getDefaultOptions(format: ExportFormat): ExportOptions {\n    const baseOptions: ExportOptions = {\n      format,\n      includeFrontMatter: true,\n      includeDates: true,\n      includeTags: true,\n      quality: {\n        imageQuality: 85,\n        imageFormat: 'jpeg',\n        imageMaxWidth: 1200,\n        optimizeSize: true,\n      },\n    }\n\n    // Return only base options since format-specific options\n    // are handled by the specific exporters\n    return baseOptions\n  }\n\n  /**\n   * Validate export options\n   */\n  validateOptions(options: ExportOptions): {\n    valid: boolean\n    errors: string[]\n  } {\n    const errors: string[] = []\n\n    // Check required fields\n    if (!options.format) {\n      errors.push('Export format is required')\n    }\n\n    if (!this.getSupportedFormats().includes(options.format)) {\n      errors.push(`Unsupported export format: ${options.format}`)\n    }\n\n    // Validate quality options\n    if (options.quality) {\n      if (\n        options.quality.imageQuality &&\n        (options.quality.imageQuality < 0 || options.quality.imageQuality > 100)\n      ) {\n        errors.push('Image quality must be between 0 and 100')\n      }\n    }\n\n    // Format-specific validation\n    this.validateFormatSpecificOptions(options, errors)\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    }\n  }\n\n  /**\n   * Get export history for a user\n   */\n  async getExportHistory(\n    userId: string,\n    limit = 50\n  ): Promise<ExportHistoryEntry[]> {\n    // This would typically query a database\n    // For now, return empty array - implementation depends on storage solution\n    return []\n  }\n\n  /**\n   * Delete export from history\n   */\n  async deleteExport(exportId: string): Promise<void> {\n    // Implementation depends on storage solution\n    throw new Error('Not implemented')\n  }\n\n  /**\n   * Parse Plate.js content from JSON string\n   */\n  protected parseContent(content: string): Node[] {\n    try {\n      return JSON.parse(content) as Node[]\n    } catch (error) {\n      // If content is not valid JSON, treat as plain text\n      return [\n        {\n          type: 'paragraph',\n          children: [{ text: content }],\n        },\n      ] as Node[]\n    }\n  }\n\n  /**\n   * Apply template to processed content\n   */\n  protected async applyTemplate(\n    content: string,\n    note: Note,\n    options: ExportOptions\n  ): Promise<string> {\n    // If no template specified, return content as-is\n    if (!options.template) {\n      return content\n    }\n\n    // Template application would go here\n    // For now, return content as-is\n    return content\n  }\n\n  /**\n   * Generate filename for export\n   */\n  protected generateFilename(note: Note, options: ExportOptions): string {\n    // Sanitize title for filename\n    const sanitizedTitle = note.title\n      .replace(/[^a-zA-Z0-9\\s-_]/g, '')\n      .replace(/\\s+/g, '-')\n      .toLowerCase()\n      .slice(0, 50)\n\n    const timestamp = new Date().toISOString().split('T')[0]\n    const extension = this.getFileExtension(options.format)\n\n    return `${sanitizedTitle || 'untitled'}-${timestamp}.${extension}`\n  }\n\n  /**\n   * Get file extension for format\n   */\n  protected getFileExtension(format: ExportFormat): string {\n    switch (format) {\n      case 'markdown':\n        return 'md'\n      case 'pdf':\n        return 'pdf'\n      case 'html':\n        return 'html'\n      case 'react':\n        return 'tsx'\n      default:\n        return 'txt'\n    }\n  }\n\n  /**\n   * Get MIME type for format\n   */\n  protected getMimeType(format: ExportFormat): string {\n    switch (format) {\n      case 'markdown':\n        return 'text/markdown'\n      case 'pdf':\n        return 'application/pdf'\n      case 'html':\n        return 'text/html'\n      case 'react':\n        return 'text/typescript'\n      default:\n        return 'text/plain'\n    }\n  }\n\n  /**\n   * Save export to history\n   */\n  protected async saveToHistory(\n    note: Note,\n    options: ExportOptions,\n    result: ExportResult\n  ): Promise<void> {\n    // Implementation depends on storage solution\n    // This would typically save to database\n  }\n\n  /**\n   * Create archive from multiple export results\n   */\n  protected async createArchive(\n    results: ExportResult[],\n    options: BulkExportOptions\n  ): Promise<ExportResult> {\n    // This would use JSZip or similar to create archives\n    // For now, throw not implemented\n    throw new Error('Archive creation not yet implemented')\n  }\n\n  /**\n   * Combine multiple export results into one\n   */\n  protected async combineResults(\n    results: ExportResult[],\n    options: BulkExportOptions\n  ): Promise<ExportResult> {\n    // Combine content based on format\n    const combinedContent = results.map((r) => r.content).join('\\n\\n---\\n\\n')\n    const totalSize = results.reduce((sum, r) => sum + r.size, 0)\n    const filename =\n      options.archiveName ||\n      `export-${new Date().toISOString().split('T')[0]}.${this.getFileExtension(options.format)}`\n\n    return {\n      content: combinedContent,\n      filename,\n      mimeType: this.getMimeType(options.format),\n      size: totalSize,\n      format: options.format,\n      exportedAt: new Date().toISOString(),\n    }\n  }\n\n  /**\n   * Validate format-specific options\n   */\n  protected abstract validateFormatSpecificOptions(\n    options: ExportOptions,\n    errors: string[]\n  ): void\n}\n\n/**\n * Base content processor for Plate.js nodes\n */\nexport abstract class BaseContentProcessor implements ContentProcessor {\n  /**\n   * Process Plate.js content array\n   */\n  async processContent(\n    content: Node[],\n    options: ExportOptions\n  ): Promise<string> {\n    const processedNodes = await Promise.all(\n      content.map((node) => this.processNode(node, options))\n    )\n    return processedNodes.join('\\n')\n  }\n\n  /**\n   * Process individual Plate.js node\n   */\n  async processNode(node: any, options: ExportOptions): Promise<string> {\n    // Handle text nodes\n    if ('text' in node) {\n      return this.processTextNode(node, options)\n    }\n\n    // Handle element nodes\n    switch (node.type) {\n      case 'paragraph':\n        return this.processParagraph(node, options)\n      case 'heading':\n        return this.processHeading(node, options)\n      case 'list':\n        return this.processList(node, options)\n      case 'list-item':\n        return this.processListItem(node, options)\n      case 'blockquote':\n        return this.processBlockquote(node, options)\n      case 'code_block':\n        return this.processCodeBlock(node, options)\n      case 'table':\n        return this.processTable(node, options)\n      case 'image':\n        return this.processImage(node, options)\n      case 'link':\n        return this.processLink(node, options)\n      default:\n        return this.processGenericNode(node, options)\n    }\n  }\n\n  /**\n   * Get supported node types\n   */\n  getSupportedNodeTypes(): string[] {\n    return [\n      'paragraph',\n      'heading',\n      'list',\n      'list-item',\n      'blockquote',\n      'code_block',\n      'table',\n      'image',\n      'link',\n    ]\n  }\n\n  // Abstract methods for format-specific processing\n  protected abstract processTextNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processParagraph(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processHeading(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processList(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processListItem(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processBlockquote(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processCodeBlock(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processTable(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processImage(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processLink(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n  protected abstract processGenericNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string>\n\n  /**\n   * Process children nodes recursively\n   */\n  protected async processChildren(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    if (!node.children || !Array.isArray(node.children)) {\n      return ''\n    }\n\n    const processedChildren = await Promise.all(\n      node.children.map((child: any) => this.processNode(child, options))\n    )\n    return processedChildren.join('')\n  }\n\n  /**\n   * Extract plain text from node\n   */\n  protected extractPlainText(node: any): string {\n    if ('text' in node) {\n      return node.text\n    }\n\n    if (node.children && Array.isArray(node.children)) {\n      return node.children\n        .map((child: any) => this.extractPlainText(child))\n        .join('')\n    }\n\n    return ''\n  }\n}\n",
              ],
              names: [
                'BaseExportService',
                'exportNote',
                'note',
                'options',
                'validation',
                'validateOptions',
                'valid',
                'Error',
                'errors',
                'join',
                'content',
                'parseContent',
                'processedContent',
                'contentProcessor',
                'processContent',
                'finalContent',
                'applyTemplate',
                'filename',
                'generateFilename',
                'size',
                'Buffer',
                'byteLength',
                'result',
                'mimeType',
                'getMimeType',
                'format',
                'exportedAt',
                'Date',
                'toISOString',
                'saveToHistory',
                'exportNotes',
                'notes',
                'results',
                'exportOptions',
                'push',
                'archiveFormat',
                'createArchive',
                'length',
                'combineResults',
                'getSupportedFormats',
                'getDefaultOptions',
                'baseOptions',
                'includeFrontMatter',
                'includeDates',
                'includeTags',
                'quality',
                'imageQuality',
                'imageFormat',
                'imageMaxWidth',
                'optimizeSize',
                'includes',
                'validateFormatSpecificOptions',
                'getExportHistory',
                'userId',
                'limit',
                'deleteExport',
                'exportId',
                'JSON',
                'parse',
                'error',
                'type',
                'children',
                'text',
                'template',
                'sanitizedTitle',
                'title',
                'replace',
                'toLowerCase',
                'slice',
                'timestamp',
                'split',
                'extension',
                'getFileExtension',
                'combinedContent',
                'map',
                'r',
                'totalSize',
                'reduce',
                'sum',
                'archiveName',
                'constructor',
                'BaseContentProcessor',
                'processedNodes',
                'Promise',
                'all',
                'node',
                'processNode',
                'processTextNode',
                'processParagraph',
                'processHeading',
                'processList',
                'processListItem',
                'processBlockquote',
                'processCodeBlock',
                'processTable',
                'processImage',
                'processLink',
                'processGenericNode',
                'getSupportedNodeTypes',
                'processChildren',
                'Array',
                'isArray',
                'processedChildren',
                'child',
                'extractPlainText',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: 'bdccee76d854007e09e57b56ec04f05226e0afbf',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          'bdccee76d854007e09e57b56ec04f05226e0afbf' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_6x0p8cyfm = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_6x0p8cyfm()
      __webpack_require__(
        '../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js'
      ).Buffer
      function cov_q0rgaoui() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/markdown-export-service.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/markdown-export-service.ts',
            statementMap: {
              0: {
                start: { line: 8, column: 26 },
                end: { line: 8, column: 33 },
              },
              1: {
                start: { line: 10, column: 26 },
                end: { line: 10, column: 28 },
              },
              2: {
                start: { line: 11, column: 8 },
                end: { line: 13, column: 9 },
              },
              3: {
                start: { line: 12, column: 12 },
                end: { line: 12, column: 68 },
              },
              4: {
                start: { line: 15, column: 23 },
                end: { line: 15, column: 60 },
              },
              5: {
                start: { line: 17, column: 29 },
                end: { line: 17, column: 57 },
              },
              6: {
                start: { line: 18, column: 8 },
                end: { line: 22, column: 10 },
              },
              7: {
                start: { line: 28, column: 32 },
                end: { line: 31, column: 9 },
              },
              8: {
                start: { line: 32, column: 8 },
                end: { line: 35, column: 9 },
              },
              9: {
                start: { line: 33, column: 12 },
                end: { line: 33, column: 57 },
              },
              10: {
                start: { line: 34, column: 12 },
                end: { line: 34, column: 57 },
              },
              11: {
                start: { line: 36, column: 8 },
                end: { line: 38, column: 9 },
              },
              12: {
                start: { line: 37, column: 12 },
                end: { line: 37, column: 45 },
              },
              13: {
                start: { line: 40, column: 8 },
                end: { line: 42, column: 9 },
              },
              14: {
                start: { line: 41, column: 12 },
                end: { line: 41, column: 44 },
              },
              15: {
                start: { line: 43, column: 26 },
                end: { line: 48, column: 10 },
              },
              16: {
                start: { line: 44, column: 12 },
                end: { line: 46, column: 13 },
              },
              17: {
                start: { line: 45, column: 16 },
                end: { line: 45, column: 75 },
              },
              18: {
                start: { line: 45, column: 50 },
                end: { line: 45, column: 60 },
              },
              19: {
                start: { line: 47, column: 12 },
                end: { line: 47, column: 54 },
              },
              20: {
                start: { line: 49, column: 8 },
                end: { line: 49, column: 55 },
              },
              21: {
                start: { line: 54, column: 26 },
                end: { line: 54, column: 33 },
              },
              22: {
                start: { line: 55, column: 8 },
                end: { line: 57, column: 9 },
              },
              23: {
                start: { line: 56, column: 12 },
                end: { line: 56, column: 88 },
              },
              24: {
                start: { line: 60, column: 8 },
                end: { line: 60, column: 46 },
              },
              25: {
                start: { line: 69, column: 19 },
                end: { line: 69, column: 34 },
              },
              26: {
                start: { line: 71, column: 8 },
                end: { line: 73, column: 9 },
              },
              27: {
                start: { line: 72, column: 12 },
                end: { line: 72, column: 33 },
              },
              28: {
                start: { line: 74, column: 8 },
                end: { line: 76, column: 9 },
              },
              29: {
                start: { line: 75, column: 12 },
                end: { line: 75, column: 31 },
              },
              30: {
                start: { line: 77, column: 8 },
                end: { line: 80, column: 9 },
              },
              31: {
                start: { line: 78, column: 12 },
                end: { line: 79, column: 13 },
              },
              32: {
                start: { line: 81, column: 8 },
                end: { line: 83, column: 9 },
              },
              33: {
                start: { line: 82, column: 12 },
                end: { line: 82, column: 33 },
              },
              34: {
                start: { line: 84, column: 8 },
                end: { line: 86, column: 9 },
              },
              35: {
                start: { line: 85, column: 12 },
                end: { line: 85, column: 33 },
              },
              36: {
                start: { line: 87, column: 8 },
                end: { line: 89, column: 9 },
              },
              37: {
                start: { line: 88, column: 12 },
                end: { line: 88, column: 40 },
              },
              38: {
                start: { line: 90, column: 8 },
                end: { line: 92, column: 9 },
              },
              39: {
                start: { line: 91, column: 12 },
                end: { line: 91, column: 40 },
              },
              40: {
                start: { line: 93, column: 8 },
                end: { line: 93, column: 20 },
              },
              41: {
                start: { line: 98, column: 24 },
                end: { line: 98, column: 65 },
              },
              42: {
                start: { line: 99, column: 8 },
                end: { line: 99, column: 49 },
              },
              43: {
                start: { line: 104, column: 22 },
                end: { line: 104, column: 63 },
              },
              44: {
                start: { line: 105, column: 24 },
                end: { line: 105, column: 65 },
              },
              45: {
                start: { line: 106, column: 23 },
                end: { line: 106, column: 40 },
              },
              46: {
                start: { line: 107, column: 8 },
                end: { line: 107, column: 42 },
              },
              47: {
                start: { line: 112, column: 22 },
                end: { line: 112, column: 63 },
              },
              48: {
                start: { line: 113, column: 8 },
                end: { line: 113, column: 28 },
              },
              49: {
                start: { line: 118, column: 24 },
                end: { line: 118, column: 65 },
              },
              50: {
                start: { line: 119, column: 23 },
                end: { line: 119, column: 48 },
              },
              51: {
                start: { line: 120, column: 28 },
                end: { line: 120, column: 56 },
              },
              52: {
                start: { line: 122, column: 8 },
                end: { line: 125, column: 9 },
              },
              53: {
                start: { line: 123, column: 29 },
                end: { line: 123, column: 57 },
              },
              54: {
                start: { line: 124, column: 12 },
                end: { line: 124, column: 62 },
              },
              55: {
                start: { line: 126, column: 8 },
                end: { line: 126, column: 54 },
              },
              56: {
                start: { line: 131, column: 24 },
                end: { line: 131, column: 65 },
              },
              57: {
                start: { line: 132, column: 22 },
                end: { line: 132, column: 69 },
              },
              58: {
                start: { line: 132, column: 57 },
                end: { line: 132, column: 68 },
              },
              59: {
                start: { line: 133, column: 28 },
                end: { line: 133, column: 58 },
              },
              60: {
                start: { line: 133, column: 46 },
                end: { line: 133, column: 57 },
              },
              61: {
                start: { line: 134, column: 8 },
                end: { line: 134, column: 47 },
              },
              62: {
                start: { line: 139, column: 24 },
                end: { line: 139, column: 65 },
              },
              63: {
                start: { line: 140, column: 25 },
                end: { line: 140, column: 44 },
              },
              64: {
                start: { line: 141, column: 8 },
                end: { line: 141, column: 59 },
              },
              65: {
                start: { line: 146, column: 26 },
                end: { line: 146, column: 33 },
              },
              66: {
                start: { line: 147, column: 8 },
                end: { line: 149, column: 9 },
              },
              67: {
                start: { line: 148, column: 12 },
                end: { line: 148, column: 22 },
              },
              68: {
                start: { line: 150, column: 21 },
                end: { line: 150, column: 23 },
              },
              69: {
                start: { line: 151, column: 30 },
                end: { line: 151, column: 35 },
              },
              70: {
                start: { line: 152, column: 8 },
                end: { line: 169, column: 9 },
              },
              71: {
                start: { line: 153, column: 12 },
                end: { line: 168, column: 13 },
              },
              72: {
                start: { line: 154, column: 30 },
                end: { line: 160, column: 19 },
              },
              73: {
                start: { line: 155, column: 20 },
                end: { line: 158, column: 21 },
              },
              74: {
                start: { line: 156, column: 40 },
                end: { line: 156, column: 81 },
              },
              75: {
                start: { line: 157, column: 24 },
                end: { line: 157, column: 66 },
              },
              76: {
                start: { line: 159, column: 20 },
                end: { line: 159, column: 30 },
              },
              77: {
                start: { line: 161, column: 16 },
                end: { line: 161, column: 54 },
              },
              78: {
                start: { line: 163, column: 16 },
                end: { line: 167, column: 17 },
              },
              79: {
                start: { line: 164, column: 38 },
                end: { line: 164, column: 70 },
              },
              80: {
                start: { line: 164, column: 52 },
                end: { line: 164, column: 57 },
              },
              81: {
                start: { line: 165, column: 20 },
                end: { line: 165, column: 50 },
              },
              82: {
                start: { line: 166, column: 20 },
                end: { line: 166, column: 43 },
              },
              83: {
                start: { line: 170, column: 8 },
                end: { line: 170, column: 63 },
              },
              84: {
                start: { line: 175, column: 26 },
                end: { line: 175, column: 33 },
              },
              85: {
                start: { line: 176, column: 20 },
                end: { line: 176, column: 39 },
              },
              86: {
                start: { line: 177, column: 22 },
                end: { line: 177, column: 58 },
              },
              87: {
                start: { line: 178, column: 18 },
                end: { line: 178, column: 44 },
              },
              88: {
                start: { line: 180, column: 8 },
                end: { line: 190, column: 9 },
              },
              89: {
                start: { line: 182, column: 16 },
                end: { line: 184, column: 17 },
              },
              90: {
                start: { line: 183, column: 20 },
                end: { line: 183, column: 61 },
              },
              91: {
                start: { line: 185, column: 16 },
                end: { line: 185, column: 22 },
              },
              92: {
                start: { line: 187, column: 16 },
                end: { line: 187, column: 22 },
              },
              93: {
                start: { line: 189, column: 16 },
                end: { line: 189, column: 22 },
              },
              94: {
                start: { line: 191, column: 8 },
                end: { line: 191, column: 47 },
              },
              95: {
                start: { line: 196, column: 24 },
                end: { line: 196, column: 65 },
              },
              96: {
                start: { line: 197, column: 20 },
                end: { line: 197, column: 47 },
              },
              97: {
                start: { line: 198, column: 22 },
                end: { line: 198, column: 58 },
              },
              98: {
                start: { line: 199, column: 8 },
                end: { line: 199, column: 46 },
              },
              99: {
                start: { line: 205, column: 8 },
                end: { line: 205, column: 51 },
              },
              100: {
                start: { line: 210, column: 8 },
                end: { line: 212, column: 9 },
              },
              101: {
                start: { line: 211, column: 12 },
                end: { line: 211, column: 22 },
              },
              102: {
                start: { line: 213, column: 34 },
                end: { line: 213, column: 113 },
              },
              103: {
                start: { line: 213, column: 79 },
                end: { line: 213, column: 111 },
              },
              104: {
                start: { line: 214, column: 8 },
                end: { line: 214, column: 42 },
              },
              105: {
                start: { line: 223, column: 28 },
                end: { line: 223, column: 51 },
              },
              106: {
                start: { line: 224, column: 8 },
                end: { line: 224, column: 49 },
              },
              107: {
                start: { line: 229, column: 29 },
                end: { line: 229, column: 50 },
              },
              108: {
                start: { line: 230, column: 25 },
                end: { line: 230, column: 27 },
              },
              109: {
                start: { line: 232, column: 8 },
                end: { line: 241, column: 9 },
              },
              110: {
                start: { line: 233, column: 26 },
                end: { line: 233, column: 41 },
              },
              111: {
                start: { line: 234, column: 25 },
                end: { line: 234, column: 40 },
              },
              112: {
                start: { line: 235, column: 27 },
                end: { line: 235, column: 95 },
              },
              113: {
                start: { line: 236, column: 12 },
                end: { line: 240, column: 15 },
              },
              114: {
                start: { line: 242, column: 8 },
                end: { line: 244, column: 9 },
              },
              115: {
                start: { line: 243, column: 12 },
                end: { line: 243, column: 22 },
              },
              116: {
                start: { line: 245, column: 25 },
                end: { line: 248, column: 10 },
              },
              117: {
                start: { line: 246, column: 27 },
                end: { line: 246, column: 70 },
              },
              118: {
                start: { line: 247, column: 12 },
                end: { line: 247, column: 70 },
              },
              119: {
                start: { line: 249, column: 8 },
                end: { line: 249, column: 68 },
              },
              120: {
                start: { line: 255, column: 26 },
                end: { line: 261, column: 56 },
              },
              121: {
                start: { line: 262, column: 26 },
                end: { line: 262, column: 85 },
              },
              122: {
                start: { line: 262, column: 62 },
                end: { line: 262, column: 77 },
              },
              123: {
                start: { line: 263, column: 35 },
                end: { line: 263, column: 61 },
              },
              124: {
                start: { line: 265, column: 8 },
                end: { line: 265, column: 90 },
              },
              125: {
                start: { line: 270, column: 22 },
                end: { line: 270, column: 41 },
              },
              126: {
                start: { line: 271, column: 25 },
                end: { line: 271, column: 27 },
              },
              127: {
                start: { line: 272, column: 8 },
                end: { line: 281, column: 11 },
              },
              128: {
                start: { line: 273, column: 26 },
                end: { line: 273, column: 57 },
              },
              129: {
                start: { line: 274, column: 12 },
                end: { line: 280, column: 13 },
              },
              130: {
                start: { line: 275, column: 16 },
                end: { line: 279, column: 19 },
              },
              131: {
                start: { line: 282, column: 8 },
                end: { line: 282, column: 24 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 7, column: 6 },
                  end: { line: 7, column: 7 },
                },
                loc: {
                  start: { line: 7, column: 38 },
                  end: { line: 23, column: 5 },
                },
                line: 7,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 26, column: 6 },
                  end: { line: 26, column: 7 },
                },
                loc: {
                  start: { line: 26, column: 41 },
                  end: { line: 50, column: 5 },
                },
                line: 26,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 43, column: 62 },
                  end: { line: 43, column: 63 },
                },
                loc: {
                  start: { line: 43, column: 78 },
                  end: { line: 48, column: 9 },
                },
                line: 43,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 45, column: 45 },
                  end: { line: 45, column: 46 },
                },
                loc: {
                  start: { line: 45, column: 50 },
                  end: { line: 45, column: 60 },
                },
                line: 45,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 53, column: 6 },
                  end: { line: 53, column: 7 },
                },
                loc: {
                  start: { line: 53, column: 53 },
                  end: { line: 58, column: 5 },
                },
                line: 53,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 59, column: 4 },
                  end: { line: 59, column: 5 },
                },
                loc: {
                  start: { line: 59, column: 17 },
                  end: { line: 61, column: 5 },
                },
                line: 59,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 68, column: 6 },
                  end: { line: 68, column: 7 },
                },
                loc: {
                  start: { line: 68, column: 43 },
                  end: { line: 94, column: 5 },
                },
                line: 68,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 97, column: 6 },
                  end: { line: 97, column: 7 },
                },
                loc: {
                  start: { line: 97, column: 44 },
                  end: { line: 100, column: 5 },
                },
                line: 97,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 103, column: 6 },
                  end: { line: 103, column: 7 },
                },
                loc: {
                  start: { line: 103, column: 42 },
                  end: { line: 108, column: 5 },
                },
                line: 103,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 111, column: 6 },
                  end: { line: 111, column: 7 },
                },
                loc: {
                  start: { line: 111, column: 39 },
                  end: { line: 114, column: 5 },
                },
                line: 111,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 117, column: 6 },
                  end: { line: 117, column: 7 },
                },
                loc: {
                  start: { line: 117, column: 43 },
                  end: { line: 127, column: 5 },
                },
                line: 117,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 130, column: 6 },
                  end: { line: 130, column: 7 },
                },
                loc: {
                  start: { line: 130, column: 45 },
                  end: { line: 135, column: 5 },
                },
                line: 130,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 132, column: 49 },
                  end: { line: 132, column: 50 },
                },
                loc: {
                  start: { line: 132, column: 57 },
                  end: { line: 132, column: 68 },
                },
                line: 132,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 133, column: 38 },
                  end: { line: 133, column: 39 },
                },
                loc: {
                  start: { line: 133, column: 46 },
                  end: { line: 133, column: 57 },
                },
                line: 133,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 138, column: 6 },
                  end: { line: 138, column: 7 },
                },
                loc: {
                  start: { line: 138, column: 44 },
                  end: { line: 142, column: 5 },
                },
                line: 138,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 145, column: 6 },
                  end: { line: 145, column: 7 },
                },
                loc: {
                  start: { line: 145, column: 40 },
                  end: { line: 171, column: 5 },
                },
                line: 145,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 154, column: 65 },
                  end: { line: 154, column: 66 },
                },
                loc: {
                  start: { line: 154, column: 79 },
                  end: { line: 160, column: 17 },
                },
                line: 154,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 164, column: 48 },
                  end: { line: 164, column: 49 },
                },
                loc: {
                  start: { line: 164, column: 52 },
                  end: { line: 164, column: 57 },
                },
                line: 164,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 174, column: 6 },
                  end: { line: 174, column: 7 },
                },
                loc: {
                  start: { line: 174, column: 40 },
                  end: { line: 192, column: 5 },
                },
                line: 174,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 195, column: 6 },
                  end: { line: 195, column: 7 },
                },
                loc: {
                  start: { line: 195, column: 39 },
                  end: { line: 200, column: 5 },
                },
                line: 195,
              },
              20: {
                name: '(anonymous_20)',
                decl: {
                  start: { line: 203, column: 6 },
                  end: { line: 203, column: 7 },
                },
                loc: {
                  start: { line: 203, column: 46 },
                  end: { line: 206, column: 5 },
                },
                line: 203,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 209, column: 6 },
                  end: { line: 209, column: 7 },
                },
                loc: {
                  start: { line: 209, column: 43 },
                  end: { line: 215, column: 5 },
                },
                line: 209,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 213, column: 70 },
                  end: { line: 213, column: 71 },
                },
                loc: {
                  start: { line: 213, column: 79 },
                  end: { line: 213, column: 111 },
                },
                line: 213,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 222, column: 6 },
                  end: { line: 222, column: 7 },
                },
                loc: {
                  start: { line: 222, column: 34 },
                  end: { line: 225, column: 5 },
                },
                line: 222,
              },
              24: {
                name: '(anonymous_24)',
                decl: {
                  start: { line: 228, column: 6 },
                  end: { line: 228, column: 7 },
                },
                loc: {
                  start: { line: 228, column: 34 },
                  end: { line: 250, column: 5 },
                },
                line: 228,
              },
              25: {
                name: '(anonymous_25)',
                decl: {
                  start: { line: 245, column: 38 },
                  end: { line: 245, column: 39 },
                },
                loc: {
                  start: { line: 245, column: 49 },
                  end: { line: 248, column: 9 },
                },
                line: 245,
              },
              26: {
                name: '(anonymous_26)',
                decl: {
                  start: { line: 253, column: 6 },
                  end: { line: 253, column: 7 },
                },
                loc: {
                  start: { line: 253, column: 43 },
                  end: { line: 266, column: 5 },
                },
                line: 253,
              },
              27: {
                name: '(anonymous_27)',
                decl: {
                  start: { line: 262, column: 54 },
                  end: { line: 262, column: 55 },
                },
                loc: {
                  start: { line: 262, column: 62 },
                  end: { line: 262, column: 77 },
                },
                line: 262,
              },
              28: {
                name: '(anonymous_28)',
                decl: {
                  start: { line: 269, column: 6 },
                  end: { line: 269, column: 7 },
                },
                loc: {
                  start: { line: 269, column: 38 },
                  end: { line: 283, column: 5 },
                },
                line: 269,
              },
              29: {
                name: '(anonymous_29)',
                decl: {
                  start: { line: 272, column: 22 },
                  end: { line: 272, column: 23 },
                },
                loc: {
                  start: { line: 272, column: 37 },
                  end: { line: 281, column: 9 },
                },
                line: 272,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 11, column: 8 },
                  end: { line: 13, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 11, column: 8 },
                    end: { line: 13, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 11,
              },
              1: {
                loc: {
                  start: { line: 32, column: 8 },
                  end: { line: 35, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 32, column: 8 },
                    end: { line: 35, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 32,
              },
              2: {
                loc: {
                  start: { line: 36, column: 8 },
                  end: { line: 38, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 36, column: 8 },
                    end: { line: 38, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 36,
              },
              3: {
                loc: {
                  start: { line: 36, column: 12 },
                  end: { line: 36, column: 124 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 36, column: 12 },
                    end: { line: 36, column: 31 },
                  },
                  {
                    start: { line: 36, column: 36 },
                    end: { line: 36, column: 123 },
                  },
                ],
                line: 36,
              },
              4: {
                loc: {
                  start: { line: 36, column: 36 },
                  end: { line: 36, column: 123 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 36, column: 97 },
                    end: { line: 36, column: 103 },
                  },
                  {
                    start: { line: 36, column: 106 },
                    end: { line: 36, column: 123 },
                  },
                ],
                line: 36,
              },
              5: {
                loc: {
                  start: { line: 36, column: 36 },
                  end: { line: 36, column: 94 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 36, column: 36 },
                    end: { line: 36, column: 69 },
                  },
                  {
                    start: { line: 36, column: 73 },
                    end: { line: 36, column: 94 },
                  },
                ],
                line: 36,
              },
              6: {
                loc: {
                  start: { line: 40, column: 8 },
                  end: { line: 42, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 40, column: 8 },
                    end: { line: 42, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 40,
              },
              7: {
                loc: {
                  start: { line: 44, column: 12 },
                  end: { line: 46, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 44, column: 12 },
                    end: { line: 46, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 44,
              },
              8: {
                loc: {
                  start: { line: 55, column: 8 },
                  end: { line: 57, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 55, column: 8 },
                    end: { line: 57, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 55,
              },
              9: {
                loc: {
                  start: { line: 55, column: 12 },
                  end: { line: 55, column: 73 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 55, column: 12 },
                    end: { line: 55, column: 46 },
                  },
                  {
                    start: { line: 55, column: 50 },
                    end: { line: 55, column: 73 },
                  },
                ],
                line: 55,
              },
              10: {
                loc: {
                  start: { line: 69, column: 19 },
                  end: { line: 69, column: 34 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 69, column: 19 },
                    end: { line: 69, column: 28 },
                  },
                  {
                    start: { line: 69, column: 32 },
                    end: { line: 69, column: 34 },
                  },
                ],
                line: 69,
              },
              11: {
                loc: {
                  start: { line: 71, column: 8 },
                  end: { line: 73, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 71, column: 8 },
                    end: { line: 73, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 71,
              },
              12: {
                loc: {
                  start: { line: 74, column: 8 },
                  end: { line: 76, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 74, column: 8 },
                    end: { line: 76, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 74,
              },
              13: {
                loc: {
                  start: { line: 77, column: 8 },
                  end: { line: 80, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 77, column: 8 },
                    end: { line: 80, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 77,
              },
              14: {
                loc: {
                  start: { line: 81, column: 8 },
                  end: { line: 83, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 81, column: 8 },
                    end: { line: 83, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 81,
              },
              15: {
                loc: {
                  start: { line: 84, column: 8 },
                  end: { line: 86, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 84, column: 8 },
                    end: { line: 86, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 84,
              },
              16: {
                loc: {
                  start: { line: 87, column: 8 },
                  end: { line: 89, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 87, column: 8 },
                    end: { line: 89, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 87,
              },
              17: {
                loc: {
                  start: { line: 90, column: 8 },
                  end: { line: 92, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 90, column: 8 },
                    end: { line: 92, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 90,
              },
              18: {
                loc: {
                  start: { line: 99, column: 15 },
                  end: { line: 99, column: 48 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 99, column: 25 },
                    end: { line: 99, column: 41 },
                  },
                  {
                    start: { line: 99, column: 44 },
                    end: { line: 99, column: 48 },
                  },
                ],
                line: 99,
              },
              19: {
                loc: {
                  start: { line: 104, column: 40 },
                  end: { line: 104, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 104, column: 40 },
                    end: { line: 104, column: 50 },
                  },
                  {
                    start: { line: 104, column: 54 },
                    end: { line: 104, column: 55 },
                  },
                ],
                line: 104,
              },
              20: {
                loc: {
                  start: { line: 119, column: 23 },
                  end: { line: 119, column: 48 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 119, column: 38 },
                    end: { line: 119, column: 42 },
                  },
                  {
                    start: { line: 119, column: 45 },
                    end: { line: 119, column: 48 },
                  },
                ],
                line: 119,
              },
              21: {
                loc: {
                  start: { line: 120, column: 40 },
                  end: { line: 120, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 120, column: 40 },
                    end: { line: 120, column: 50 },
                  },
                  {
                    start: { line: 120, column: 54 },
                    end: { line: 120, column: 55 },
                  },
                ],
                line: 120,
              },
              22: {
                loc: {
                  start: { line: 122, column: 8 },
                  end: { line: 125, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 122, column: 8 },
                    end: { line: 125, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 122,
              },
              23: {
                loc: {
                  start: { line: 123, column: 29 },
                  end: { line: 123, column: 57 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 123, column: 44 },
                    end: { line: 123, column: 49 },
                  },
                  {
                    start: { line: 123, column: 52 },
                    end: { line: 123, column: 57 },
                  },
                ],
                line: 123,
              },
              24: {
                loc: {
                  start: { line: 140, column: 25 },
                  end: { line: 140, column: 44 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 140, column: 25 },
                    end: { line: 140, column: 38 },
                  },
                  {
                    start: { line: 140, column: 42 },
                    end: { line: 140, column: 44 },
                  },
                ],
                line: 140,
              },
              25: {
                loc: {
                  start: { line: 147, column: 8 },
                  end: { line: 149, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 147, column: 8 },
                    end: { line: 149, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 147,
              },
              26: {
                loc: {
                  start: { line: 147, column: 12 },
                  end: { line: 147, column: 59 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 147, column: 12 },
                    end: { line: 147, column: 26 },
                  },
                  {
                    start: { line: 147, column: 30 },
                    end: { line: 147, column: 59 },
                  },
                ],
                line: 147,
              },
              27: {
                loc: {
                  start: { line: 153, column: 12 },
                  end: { line: 168, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 153, column: 12 },
                    end: { line: 168, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 153,
              },
              28: {
                loc: {
                  start: { line: 153, column: 16 },
                  end: { line: 153, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 153, column: 16 },
                    end: { line: 153, column: 40 },
                  },
                  {
                    start: { line: 153, column: 44 },
                    end: { line: 153, column: 56 },
                  },
                ],
                line: 153,
              },
              29: {
                loc: {
                  start: { line: 155, column: 20 },
                  end: { line: 158, column: 21 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 155, column: 20 },
                    end: { line: 158, column: 21 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 155,
              },
              30: {
                loc: {
                  start: { line: 163, column: 16 },
                  end: { line: 167, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 163, column: 16 },
                    end: { line: 167, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 163,
              },
              31: {
                loc: {
                  start: { line: 163, column: 20 },
                  end: { line: 163, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 163, column: 20 },
                    end: { line: 163, column: 36 },
                  },
                  {
                    start: { line: 163, column: 40 },
                    end: { line: 163, column: 56 },
                  },
                ],
                line: 163,
              },
              32: {
                loc: {
                  start: { line: 170, column: 15 },
                  end: { line: 170, column: 62 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 170, column: 33 },
                    end: { line: 170, column: 57 },
                  },
                  {
                    start: { line: 170, column: 60 },
                    end: { line: 170, column: 62 },
                  },
                ],
                line: 170,
              },
              33: {
                loc: {
                  start: { line: 176, column: 20 },
                  end: { line: 176, column: 39 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 176, column: 20 },
                    end: { line: 176, column: 28 },
                  },
                  {
                    start: { line: 176, column: 32 },
                    end: { line: 176, column: 39 },
                  },
                ],
                line: 176,
              },
              34: {
                loc: {
                  start: { line: 177, column: 22 },
                  end: { line: 177, column: 58 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 177, column: 35 },
                    end: { line: 177, column: 53 },
                  },
                  {
                    start: { line: 177, column: 56 },
                    end: { line: 177, column: 58 },
                  },
                ],
                line: 177,
              },
              35: {
                loc: {
                  start: { line: 178, column: 18 },
                  end: { line: 178, column: 44 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 178, column: 18 },
                    end: { line: 178, column: 26 },
                  },
                  {
                    start: { line: 178, column: 30 },
                    end: { line: 178, column: 38 },
                  },
                  {
                    start: { line: 178, column: 42 },
                    end: { line: 178, column: 44 },
                  },
                ],
                line: 178,
              },
              36: {
                loc: {
                  start: { line: 180, column: 8 },
                  end: { line: 190, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 181, column: 12 },
                    end: { line: 185, column: 22 },
                  },
                  {
                    start: { line: 186, column: 12 },
                    end: { line: 187, column: 22 },
                  },
                  {
                    start: { line: 188, column: 12 },
                    end: { line: 189, column: 22 },
                  },
                ],
                line: 180,
              },
              37: {
                loc: {
                  start: { line: 182, column: 16 },
                  end: { line: 184, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 182, column: 16 },
                    end: { line: 184, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 182,
              },
              38: {
                loc: {
                  start: { line: 197, column: 20 },
                  end: { line: 197, column: 47 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 197, column: 20 },
                    end: { line: 197, column: 28 },
                  },
                  {
                    start: { line: 197, column: 32 },
                    end: { line: 197, column: 41 },
                  },
                  {
                    start: { line: 197, column: 45 },
                    end: { line: 197, column: 47 },
                  },
                ],
                line: 197,
              },
              39: {
                loc: {
                  start: { line: 198, column: 22 },
                  end: { line: 198, column: 58 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 198, column: 35 },
                    end: { line: 198, column: 53 },
                  },
                  {
                    start: { line: 198, column: 56 },
                    end: { line: 198, column: 58 },
                  },
                ],
                line: 198,
              },
              40: {
                loc: {
                  start: { line: 210, column: 8 },
                  end: { line: 212, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 210, column: 8 },
                    end: { line: 212, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 210,
              },
              41: {
                loc: {
                  start: { line: 210, column: 12 },
                  end: { line: 210, column: 59 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 210, column: 12 },
                    end: { line: 210, column: 26 },
                  },
                  {
                    start: { line: 210, column: 30 },
                    end: { line: 210, column: 59 },
                  },
                ],
                line: 210,
              },
              42: {
                loc: {
                  start: { line: 242, column: 8 },
                  end: { line: 244, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 242, column: 8 },
                    end: { line: 244, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 242,
              },
              43: {
                loc: {
                  start: { line: 265, column: 15 },
                  end: { line: 265, column: 89 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 265, column: 42 },
                    end: { line: 265, column: 54 },
                  },
                  {
                    start: { line: 265, column: 57 },
                    end: { line: 265, column: 89 },
                  },
                ],
                line: 265,
              },
              44: {
                loc: {
                  start: { line: 274, column: 12 },
                  end: { line: 280, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 274, column: 12 },
                    end: { line: 280, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 274,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
              94: 0,
              95: 0,
              96: 0,
              97: 0,
              98: 0,
              99: 0,
              100: 0,
              101: 0,
              102: 0,
              103: 0,
              104: 0,
              105: 0,
              106: 0,
              107: 0,
              108: 0,
              109: 0,
              110: 0,
              111: 0,
              112: 0,
              113: 0,
              114: 0,
              115: 0,
              116: 0,
              117: 0,
              118: 0,
              119: 0,
              120: 0,
              121: 0,
              122: 0,
              123: 0,
              124: 0,
              125: 0,
              126: 0,
              127: 0,
              128: 0,
              129: 0,
              130: 0,
              131: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0],
              28: [0, 0],
              29: [0, 0],
              30: [0, 0],
              31: [0, 0],
              32: [0, 0],
              33: [0, 0],
              34: [0, 0],
              35: [0, 0, 0],
              36: [0, 0, 0],
              37: [0, 0],
              38: [0, 0, 0],
              39: [0, 0],
              40: [0, 0],
              41: [0, 0],
              42: [0, 0],
              43: [0, 0],
              44: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/markdown-export-service.ts',
              ],
              sourcesContent: [
                "import { BaseContentProcessor, BaseExportService } from './base-export-service'\nimport { type Note } from '../../types/note'\nimport {\n  type ExportOptions,\n  type ExportResult,\n  type MarkdownExportOptions,\n} from '../../types/export'\n\n/**\n * Markdown export service\n */\nexport class MarkdownExportService extends BaseExportService {\n  constructor() {\n    super(new MarkdownContentProcessor())\n  }\n\n  /**\n   * Export note with markdown-specific processing\n   */\n  async exportNote(note: Note, options: ExportOptions): Promise<ExportResult> {\n    const mdOptions = options as MarkdownExportOptions\n\n    // Generate front matter if requested\n    let frontMatter = ''\n    if (mdOptions.includeFrontMatter) {\n      frontMatter = this.generateFrontMatter(note, mdOptions)\n    }\n\n    // Process the main content\n    const result = await super.exportNote(note, options)\n\n    // Combine front matter with content\n    const finalContent = frontMatter + result.content\n\n    return {\n      ...result,\n      content: finalContent,\n      size: Buffer.byteLength(finalContent, 'utf8'),\n    }\n  }\n\n  /**\n   * Generate YAML front matter\n   */\n  private generateFrontMatter(\n    note: Note,\n    options: MarkdownExportOptions\n  ): string {\n    const frontMatterData: Record<string, any> = {\n      title: note.title,\n      id: note.id,\n    }\n\n    if (options.includeDates) {\n      frontMatterData.created_at = note.created_at\n      frontMatterData.updated_at = note.updated_at\n    }\n\n    if (options.includeTags && note.tags?.length) {\n      frontMatterData.tags = note.tags\n    }\n\n    // Add custom metadata\n    if (note.is_folder) {\n      frontMatterData.type = 'folder'\n    }\n\n    const yamlLines = Object.entries(frontMatterData).map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return `${key}:\\n${value.map((v) => `  - ${v}`).join('\\n')}`\n      }\n      return `${key}: ${JSON.stringify(value)}`\n    })\n\n    return `---\\n${yamlLines.join('\\n')}\\n---\\n\\n`\n  }\n\n  /**\n   * Validate markdown-specific options\n   */\n  protected validateFormatSpecificOptions(\n    options: ExportOptions,\n    errors: string[]\n  ): void {\n    const mdOptions = options as MarkdownExportOptions\n\n    if (mdOptions.imageHandling === 'link' && !mdOptions.imageBaseUrl) {\n      errors.push(\n        'imageBaseUrl is required when imageHandling is set to \"link\"'\n      )\n    }\n  }\n}\n\n/**\n * Markdown content processor for Plate.js nodes\n */\nexport class MarkdownContentProcessor extends BaseContentProcessor {\n  /**\n   * Process text node with markdown formatting\n   */\n  protected async processTextNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    let text = node.text || ''\n\n    // Apply text formatting\n    if (node.bold) {\n      text = `**${text}**`\n    }\n    if (node.italic) {\n      text = `*${text}*`\n    }\n    if (node.underline) {\n      text = `<u>${text}</u>` // HTML fallback for underline\n    }\n    if (node.strikethrough) {\n      text = `~~${text}~~`\n    }\n    if (node.code) {\n      text = `\\`${text}\\``\n    }\n    if (node.superscript) {\n      text = `<sup>${text}</sup>`\n    }\n    if (node.subscript) {\n      text = `<sub>${text}</sub>`\n    }\n\n    return text\n  }\n\n  /**\n   * Process paragraph node\n   */\n  protected async processParagraph(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return content ? `${content}\\n\\n` : '\\n'\n  }\n\n  /**\n   * Process heading node\n   */\n  protected async processHeading(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const level = Math.min(Math.max(node.level || 1, 1), 6)\n    const content = await this.processChildren(node, options)\n    const hashes = '#'.repeat(level)\n    return `${hashes} ${content}\\n\\n`\n  }\n\n  /**\n   * Process list node\n   */\n  protected async processList(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const items = await this.processChildren(node, options)\n    return `${items}\\n`\n  }\n\n  /**\n   * Process list item node\n   */\n  protected async processListItem(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const marker = node.ordered ? '1.' : '-'\n    const indentation = '  '.repeat(node.depth || 0)\n\n    // Handle task list items if this is a task list\n    if (node.checked !== undefined) {\n      const checkbox = node.checked ? '[x]' : '[ ]'\n      return `${indentation}- ${checkbox} ${content}\\n`\n    }\n\n    return `${indentation}${marker} ${content}\\n`\n  }\n\n  /**\n   * Process blockquote node\n   */\n  protected async processBlockquote(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const lines = content.split('\\n').filter((line) => line.trim())\n    const quotedLines = lines.map((line) => `> ${line}`)\n    return `${quotedLines.join('\\n')}\\n\\n`\n  }\n\n  /**\n   * Process code block node\n   */\n  protected async processCodeBlock(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const language = node.language || ''\n    return `\\`\\`\\`${language}\\n${content}\\n\\`\\`\\`\\n\\n`\n  }\n\n  /**\n   * Process table node\n   */\n  protected async processTable(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const mdOptions = options as MarkdownExportOptions\n\n    if (!node.children || !Array.isArray(node.children)) {\n      return ''\n    }\n\n    const rows: string[] = []\n    let headerProcessed = false\n\n    for (const row of node.children) {\n      if (row.type === 'table-row' && row.children) {\n        const cells = await Promise.all(\n          row.children.map(async (cell: any) => {\n            if (cell.type === 'table-cell') {\n              const content = await this.processChildren(cell, options)\n              return content.replace(/\\n/g, ' ').trim()\n            }\n            return ''\n          })\n        )\n\n        rows.push(`| ${cells.join(' | ')} |`)\n\n        // Add header separator after first row (if using GFM)\n        if (!headerProcessed && mdOptions.useGFM) {\n          const separator = cells.map(() => '---').join(' | ')\n          rows.push(`| ${separator} |`)\n          headerProcessed = true\n        }\n      }\n    }\n\n    return rows.length > 0 ? `${rows.join('\\n')}\\n\\n` : ''\n  }\n\n  /**\n   * Process image node\n   */\n  protected async processImage(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const mdOptions = options as MarkdownExportOptions\n    const alt = node.alt || 'Image'\n    const title = node.title ? ` \"${node.title}\"` : ''\n\n    let src = node.src || node.url || ''\n\n    // Handle different image strategies\n    switch (mdOptions.imageHandling) {\n      case 'link':\n        if (mdOptions.imageBaseUrl) {\n          src = `${mdOptions.imageBaseUrl}/${src}`\n        }\n        break\n      case 'embed':\n        // Convert to data URL - this would need actual image processing\n        // For now, keep original src\n        break\n      case 'copy':\n        // Copy to export directory - would need file system operations\n        // For now, keep original src\n        break\n    }\n\n    return `![${alt}](${src}${title})\\n\\n`\n  }\n\n  /**\n   * Process link node\n   */\n  protected async processLink(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const url = node.url || node.href || ''\n    const title = node.title ? ` \"${node.title}\"` : ''\n\n    return `[${content}](${url}${title})`\n  }\n\n  /**\n   * Process generic/unknown node\n   */\n  protected async processGenericNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    // For unknown nodes, just process children\n    return this.processChildren(node, options)\n  }\n\n  /**\n   * Process children with markdown line breaks\n   */\n  protected async processChildren(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    if (!node.children || !Array.isArray(node.children)) {\n      return ''\n    }\n\n    const processedChildren = await Promise.all(\n      node.children.map((child: any) => this.processNode(child, options))\n    )\n\n    return processedChildren.join('')\n  }\n}\n\n/**\n * Utility functions for markdown processing\n */\nexport class MarkdownUtils {\n  /**\n   * Escape markdown special characters\n   */\n  static escapeMarkdown(text: string): string {\n    const escapeChars = /[\\\\`*_{}[\\]()#+\\-.!]/g\n    return text.replace(escapeChars, '\\\\$&')\n  }\n\n  /**\n   * Generate table of contents from content\n   */\n  static generateTOC(content: string): string {\n    const headingRegex = /^(#{1,6})\\s+(.+)$/gm\n    const headings: { level: number; text: string; anchor: string }[] = []\n\n    let match\n    while ((match = headingRegex.exec(content)) !== null) {\n      const level = match[1].length\n      const text = match[2].trim()\n      const anchor = text\n        .toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n\n      headings.push({ level, text, anchor })\n    }\n\n    if (headings.length === 0) {\n      return ''\n    }\n\n    const tocLines = headings.map((heading) => {\n      const indent = '  '.repeat(Math.max(0, heading.level - 1))\n      return `${indent}- [${heading.text}](#${heading.anchor})`\n    })\n\n    return `## Table of Contents\\n\\n${tocLines.join('\\n')}\\n\\n`\n  }\n\n  /**\n   * Calculate reading time for markdown content\n   */\n  static calculateReadingTime(content: string): string {\n    // Remove markdown syntax for word count\n    const plainText = content\n      .replace(/#{1,6}\\s+/g, '') // Remove headers\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Remove links, keep text\n      .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '') // Remove images\n      .replace(/`([^`]+)`/g, '$1') // Remove inline code\n      .replace(/```[\\s\\S]*?```/g, '') // Remove code blocks\n      .replace(/[*_~`]/g, '') // Remove formatting\n      .replace(/\\n/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim()\n\n    const wordCount = plainText\n      .split(' ')\n      .filter((word) => word.length > 0).length\n    const readingTimeMinutes = Math.ceil(wordCount / 200) // 200 words per minute\n\n    return readingTimeMinutes === 1\n      ? '1 min read'\n      : `${readingTimeMinutes} min read`\n  }\n\n  /**\n   * Extract headings for navigation\n   */\n  static extractHeadings(\n    content: string\n  ): Array<{ level: number; text: string; line: number }> {\n    const lines = content.split('\\n')\n    const headings: Array<{ level: number; text: string; line: number }> = []\n\n    lines.forEach((line, index) => {\n      const match = line.match(/^(#{1,6})\\s+(.+)$/)\n      if (match) {\n        headings.push({\n          level: match[1].length,\n          text: match[2].trim(),\n          line: index + 1,\n        })\n      }\n    })\n\n    return headings\n  }\n}\n",
              ],
              names: [
                'BaseContentProcessor',
                'BaseExportService',
                'MarkdownExportService',
                'exportNote',
                'note',
                'options',
                'mdOptions',
                'frontMatter',
                'includeFrontMatter',
                'generateFrontMatter',
                'result',
                'finalContent',
                'content',
                'size',
                'Buffer',
                'byteLength',
                'frontMatterData',
                'title',
                'id',
                'includeDates',
                'created_at',
                'updated_at',
                'includeTags',
                'tags',
                'length',
                'is_folder',
                'type',
                'yamlLines',
                'Object',
                'entries',
                'map',
                'key',
                'value',
                'Array',
                'isArray',
                'v',
                'join',
                'JSON',
                'stringify',
                'validateFormatSpecificOptions',
                'errors',
                'imageHandling',
                'imageBaseUrl',
                'push',
                'constructor',
                'MarkdownContentProcessor',
                'processTextNode',
                'node',
                'text',
                'bold',
                'italic',
                'underline',
                'strikethrough',
                'code',
                'superscript',
                'subscript',
                'processParagraph',
                'processChildren',
                'processHeading',
                'level',
                'Math',
                'min',
                'max',
                'hashes',
                'repeat',
                'processList',
                'items',
                'processListItem',
                'marker',
                'ordered',
                'indentation',
                'depth',
                'checked',
                'undefined',
                'checkbox',
                'processBlockquote',
                'lines',
                'split',
                'filter',
                'line',
                'trim',
                'quotedLines',
                'processCodeBlock',
                'language',
                'processTable',
                'children',
                'rows',
                'headerProcessed',
                'row',
                'cells',
                'Promise',
                'all',
                'cell',
                'replace',
                'useGFM',
                'separator',
                'processImage',
                'alt',
                'src',
                'url',
                'processLink',
                'href',
                'processGenericNode',
                'processedChildren',
                'child',
                'processNode',
                'MarkdownUtils',
                'escapeMarkdown',
                'escapeChars',
                'generateTOC',
                'headingRegex',
                'headings',
                'match',
                'exec',
                'anchor',
                'toLowerCase',
                'tocLines',
                'heading',
                'indent',
                'calculateReadingTime',
                'plainText',
                'wordCount',
                'word',
                'readingTimeMinutes',
                'ceil',
                'extractHeadings',
                'forEach',
                'index',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: 'ed663435c5b39388d66820d6eb52b9118f6353fb',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          'ed663435c5b39388d66820d6eb52b9118f6353fb' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_q0rgaoui = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_q0rgaoui()
      ;(__webpack_require__(
        '../../node_modules/.pnpm/pdf-lib@1.17.1/node_modules/pdf-lib/es/index.js'
      ),
        __webpack_require__(
          '../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js'
        ).Buffer)
      function cov_1t35mm0xq5() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/pdf-export-service.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/pdf-export-service.ts',
            statementMap: {
              0: {
                start: { line: 9, column: 27 },
                end: { line: 9, column: 34 },
              },
              1: {
                start: { line: 11, column: 28 },
                end: { line: 11, column: 112 },
              },
              2: {
                start: { line: 13, column: 25 },
                end: { line: 13, column: 78 },
              },
              3: {
                start: { line: 15, column: 24 },
                end: { line: 15, column: 64 },
              },
              4: {
                start: { line: 16, column: 25 },
                end: { line: 16, column: 61 },
              },
              5: {
                start: { line: 17, column: 23 },
                end: { line: 24, column: 9 },
              },
              6: {
                start: { line: 25, column: 8 },
                end: { line: 25, column: 56 },
              },
              7: {
                start: { line: 26, column: 8 },
                end: { line: 26, column: 22 },
              },
              8: {
                start: { line: 31, column: 23 },
                end: { line: 31, column: 49 },
              },
              9: {
                start: { line: 33, column: 8 },
                end: { line: 33, column: 36 },
              },
              10: {
                start: { line: 34, column: 8 },
                end: { line: 34, column: 36 },
              },
              11: {
                start: { line: 35, column: 8 },
                end: { line: 35, column: 58 },
              },
              12: {
                start: { line: 36, column: 8 },
                end: { line: 36, column: 62 },
              },
              13: {
                start: { line: 38, column: 28 },
                end: { line: 38, column: 75 },
              },
              14: {
                start: { line: 39, column: 25 },
                end: { line: 39, column: 76 },
              },
              15: {
                start: { line: 40, column: 25 },
                end: { line: 40, column: 70 },
              },
              16: {
                start: { line: 42, column: 27 },
                end: { line: 42, column: 69 },
              },
              17: {
                start: { line: 43, column: 24 },
                end: { line: 48, column: 9 },
              },
              18: {
                start: { line: 50, column: 27 },
                end: { line: 50, column: 49 },
              },
              19: {
                start: { line: 50, column: 33 },
                end: { line: 50, column: 49 },
              },
              20: {
                start: { line: 51, column: 26 },
                end: { line: 51, column: 42 },
              },
              21: {
                start: { line: 52, column: 27 },
                end: { line: 52, column: 44 },
              },
              22: {
                start: { line: 53, column: 27 },
                end: { line: 53, column: 57 },
              },
              23: {
                start: { line: 54, column: 28 },
                end: { line: 54, column: 59 },
              },
              24: {
                start: { line: 55, column: 26 },
                end: { line: 55, column: 55 },
              },
              25: {
                start: { line: 56, column: 29 },
                end: { line: 56, column: 61 },
              },
              26: {
                start: { line: 57, column: 29 },
                end: { line: 57, column: 65 },
              },
              27: {
                start: { line: 58, column: 30 },
                end: { line: 58, column: 67 },
              },
              28: {
                start: { line: 59, column: 19 },
                end: { line: 62, column: 10 },
              },
              29: {
                start: { line: 63, column: 23 },
                end: { line: 63, column: 45 },
              },
              30: {
                start: { line: 64, column: 25 },
                end: { line: 64, column: 26 },
              },
              31: {
                start: { line: 66, column: 28 },
                end: { line: 66, column: 115 },
              },
              32: {
                start: { line: 67, column: 8 },
                end: { line: 67, column: 37 },
              },
              33: {
                start: { line: 69, column: 8 },
                end: { line: 72, column: 9 },
              },
              34: {
                start: { line: 70, column: 35 },
                end: { line: 70, column: 131 },
              },
              35: {
                start: { line: 71, column: 12 },
                end: { line: 71, column: 44 },
              },
              36: {
                start: { line: 74, column: 8 },
                end: { line: 85, column: 11 },
              },
              37: {
                start: { line: 86, column: 8 },
                end: { line: 86, column: 23 },
              },
              38: {
                start: { line: 88, column: 30 },
                end: { line: 88, column: 62 },
              },
              39: {
                start: { line: 89, column: 8 },
                end: { line: 112, column: 9 },
              },
              40: {
                start: { line: 91, column: 36 },
                end: { line: 91, column: 94 },
              },
              41: {
                start: { line: 92, column: 12 },
                end: { line: 104, column: 13 },
              },
              42: {
                start: { line: 94, column: 16 },
                end: { line: 96, column: 17 },
              },
              43: {
                start: { line: 95, column: 20 },
                end: { line: 95, column: 95 },
              },
              44: {
                start: { line: 98, column: 16 },
                end: { line: 101, column: 19 },
              },
              45: {
                start: { line: 102, column: 16 },
                end: { line: 102, column: 50 },
              },
              46: {
                start: { line: 103, column: 16 },
                end: { line: 103, column: 29 },
              },
              47: {
                start: { line: 106, column: 32 },
                end: { line: 110, column: 14 },
              },
              48: {
                start: { line: 111, column: 12 },
                end: { line: 111, column: 41 },
              },
              49: {
                start: { line: 114, column: 8 },
                end: { line: 116, column: 9 },
              },
              50: {
                start: { line: 115, column: 12 },
                end: { line: 115, column: 87 },
              },
              51: {
                start: { line: 118, column: 8 },
                end: { line: 120, column: 9 },
              },
              52: {
                start: { line: 119, column: 12 },
                end: { line: 119, column: 70 },
              },
              53: {
                start: { line: 121, column: 8 },
                end: { line: 121, column: 29 },
              },
              54: {
                start: { line: 126, column: 8 },
                end: { line: 157, column: 9 },
              },
              55: {
                start: { line: 128, column: 16 },
                end: { line: 132, column: 17 },
              },
              56: {
                start: { line: 134, column: 16 },
                end: { line: 138, column: 17 },
              },
              57: {
                start: { line: 140, column: 16 },
                end: { line: 144, column: 17 },
              },
              58: {
                start: { line: 146, column: 16 },
                end: { line: 150, column: 17 },
              },
              59: {
                start: { line: 152, column: 16 },
                end: { line: 156, column: 17 },
              },
              60: {
                start: { line: 162, column: 22 },
                end: { line: 162, column: 68 },
              },
              61: {
                start: { line: 163, column: 27 },
                end: { line: 163, column: 41 },
              },
              62: {
                start: { line: 164, column: 8 },
                end: { line: 172, column: 11 },
              },
              63: {
                start: { line: 165, column: 12 },
                end: { line: 171, column: 15 },
              },
              64: {
                start: { line: 173, column: 8 },
                end: { line: 173, column: 41 },
              },
              65: {
                start: { line: 179, column: 25 },
                end: { line: 179, column: 27 },
              },
              66: {
                start: { line: 180, column: 8 },
                end: { line: 183, column: 9 },
              },
              67: {
                start: { line: 181, column: 12 },
                end: { line: 181, column: 88 },
              },
              68: {
                start: { line: 182, column: 12 },
                end: { line: 182, column: 88 },
              },
              69: {
                start: { line: 184, column: 8 },
                end: { line: 186, column: 9 },
              },
              70: {
                start: { line: 185, column: 12 },
                end: { line: 185, column: 59 },
              },
              71: {
                start: { line: 187, column: 27 },
                end: { line: 187, column: 41 },
              },
              72: {
                start: { line: 188, column: 8 },
                end: { line: 196, column: 11 },
              },
              73: {
                start: { line: 189, column: 12 },
                end: { line: 195, column: 15 },
              },
              74: {
                start: { line: 197, column: 8 },
                end: { line: 197, column: 44 },
              },
              75: {
                start: { line: 202, column: 21 },
                end: { line: 202, column: 41 },
              },
              76: {
                start: { line: 203, column: 25 },
                end: { line: 203, column: 27 },
              },
              77: {
                start: { line: 204, column: 26 },
                end: { line: 204, column: 64 },
              },
              78: {
                start: { line: 205, column: 8 },
                end: { line: 211, column: 11 },
              },
              79: {
                start: { line: 216, column: 22 },
                end: { line: 216, column: 39 },
              },
              80: {
                start: { line: 217, column: 8 },
                end: { line: 233, column: 11 },
              },
              81: {
                start: { line: 218, column: 38 },
                end: { line: 218, column: 52 },
              },
              82: {
                start: { line: 219, column: 29 },
                end: { line: 219, column: 31 },
              },
              83: {
                start: { line: 220, column: 30 },
                end: { line: 220, column: 77 },
              },
              84: {
                start: { line: 221, column: 12 },
                end: { line: 232, column: 15 },
              },
              85: {
                start: { line: 239, column: 22 },
                end: { line: 239, column: 41 },
              },
              86: {
                start: { line: 240, column: 23 },
                end: { line: 240, column: 25 },
              },
              87: {
                start: { line: 241, column: 27 },
                end: { line: 241, column: 31 },
              },
              88: {
                start: { line: 242, column: 8 },
                end: { line: 265, column: 9 },
              },
              89: {
                start: { line: 243, column: 12 },
                end: { line: 249, column: 13 },
              },
              90: {
                start: { line: 244, column: 16 },
                end: { line: 247, column: 17 },
              },
              91: {
                start: { line: 245, column: 20 },
                end: { line: 245, column: 46 },
              },
              92: {
                start: { line: 246, column: 20 },
                end: { line: 246, column: 40 },
              },
              93: {
                start: { line: 248, column: 16 },
                end: { line: 248, column: 25 },
              },
              94: {
                start: { line: 251, column: 30 },
                end: { line: 251, column: 56 },
              },
              95: {
                start: { line: 252, column: 12 },
                end: { line: 264, column: 13 },
              },
              96: {
                start: { line: 253, column: 16 },
                end: { line: 255, column: 17 },
              },
              97: {
                start: { line: 254, column: 20 },
                end: { line: 254, column: 46 },
              },
              98: {
                start: { line: 256, column: 16 },
                end: { line: 261, column: 18 },
              },
              99: {
                start: { line: 263, column: 16 },
                end: { line: 263, column: 48 },
              },
              100: {
                start: { line: 266, column: 8 },
                end: { line: 268, column: 9 },
              },
              101: {
                start: { line: 267, column: 12 },
                end: { line: 267, column: 38 },
              },
              102: {
                start: { line: 269, column: 8 },
                end: { line: 269, column: 22 },
              },
              103: {
                start: { line: 274, column: 8 },
                end: { line: 274, column: 54 },
              },
              104: {
                start: { line: 274, column: 37 },
                end: { line: 274, column: 54 },
              },
              105: {
                start: { line: 275, column: 8 },
                end: { line: 275, column: 52 },
              },
              106: {
                start: { line: 275, column: 32 },
                end: { line: 275, column: 52 },
              },
              107: {
                start: { line: 276, column: 8 },
                end: { line: 276, column: 46 },
              },
              108: {
                start: { line: 276, column: 32 },
                end: { line: 276, column: 46 },
              },
              109: {
                start: { line: 277, column: 8 },
                end: { line: 277, column: 50 },
              },
              110: {
                start: { line: 277, column: 36 },
                end: { line: 277, column: 50 },
              },
              111: {
                start: { line: 278, column: 8 },
                end: { line: 278, column: 58 },
              },
              112: {
                start: { line: 278, column: 36 },
                end: { line: 278, column: 58 },
              },
              113: {
                start: { line: 279, column: 8 },
                end: { line: 279, column: 27 },
              },
              114: {
                start: { line: 284, column: 27 },
                end: { line: 284, column: 35 },
              },
              115: {
                start: { line: 286, column: 22 },
                end: { line: 289, column: 13 },
              },
              116: {
                start: { line: 287, column: 33 },
                end: { line: 287, column: 69 },
              },
              117: {
                start: { line: 288, column: 12 },
                end: { line: 288, column: 47 },
              },
              118: {
                start: { line: 290, column: 8 },
                end: { line: 291, column: 10 },
              },
              119: {
                start: { line: 296, column: 23 },
                end: { line: 296, column: 24 },
              },
              120: {
                start: { line: 297, column: 27 },
                end: { line: 297, column: 35 },
              },
              121: {
                start: { line: 298, column: 8 },
                end: { line: 311, column: 9 },
              },
              122: {
                start: { line: 299, column: 46 },
                end: { line: 299, column: 83 },
              },
              123: {
                start: { line: 300, column: 33 },
                end: { line: 300, column: 78 },
              },
              124: {
                start: { line: 301, column: 12 },
                end: { line: 310, column: 15 },
              },
              125: {
                start: { line: 302, column: 16 },
                end: { line: 308, column: 19 },
              },
              126: {
                start: { line: 309, column: 16 },
                end: { line: 309, column: 39 },
              },
              127: {
                start: { line: 312, column: 8 },
                end: { line: 312, column: 28 },
              },
              128: {
                start: { line: 317, column: 8 },
                end: { line: 342, column: 9 },
              },
              129: {
                start: { line: 319, column: 16 },
                end: { line: 323, column: 18 },
              },
              130: {
                start: { line: 325, column: 16 },
                end: { line: 329, column: 18 },
              },
              131: {
                start: { line: 331, column: 16 },
                end: { line: 335, column: 18 },
              },
              132: {
                start: { line: 337, column: 16 },
                end: { line: 341, column: 18 },
              },
              133: {
                start: { line: 347, column: 22 },
                end: { line: 347, column: 37 },
              },
              134: {
                start: { line: 348, column: 22 },
                end: { line: 348, column: 24 },
              },
              135: {
                start: { line: 349, column: 26 },
                end: { line: 349, column: 28 },
              },
              136: {
                start: { line: 350, column: 8 },
                end: { line: 361, column: 9 },
              },
              137: {
                start: { line: 351, column: 29 },
                end: { line: 351, column: 74 },
              },
              138: {
                start: { line: 352, column: 30 },
                end: { line: 352, column: 72 },
              },
              139: {
                start: { line: 353, column: 12 },
                end: { line: 360, column: 13 },
              },
              140: {
                start: { line: 354, column: 16 },
                end: { line: 354, column: 39 },
              },
              141: {
                start: { line: 356, column: 16 },
                end: { line: 358, column: 17 },
              },
              142: {
                start: { line: 357, column: 20 },
                end: { line: 357, column: 44 },
              },
              143: {
                start: { line: 359, column: 16 },
                end: { line: 359, column: 35 },
              },
              144: {
                start: { line: 362, column: 8 },
                end: { line: 364, column: 9 },
              },
              145: {
                start: { line: 363, column: 12 },
                end: { line: 363, column: 36 },
              },
              146: {
                start: { line: 365, column: 8 },
                end: { line: 367, column: 10 },
              },
              147: {
                start: { line: 372, column: 27 },
                end: { line: 372, column: 34 },
              },
              148: {
                start: { line: 373, column: 8 },
                end: { line: 378, column: 9 },
              },
              149: {
                start: { line: 374, column: 49 },
                end: { line: 374, column: 67 },
              },
              150: {
                start: { line: 375, column: 12 },
                end: { line: 377, column: 13 },
              },
              151: {
                start: { line: 376, column: 16 },
                end: { line: 376, column: 58 },
              },
              152: {
                start: { line: 381, column: 8 },
                end: { line: 381, column: 41 },
              },
              153: {
                start: { line: 388, column: 19 },
                end: { line: 388, column: 34 },
              },
              154: {
                start: { line: 390, column: 8 },
                end: { line: 390, column: 47 },
              },
              155: {
                start: { line: 390, column: 23 },
                end: { line: 390, column: 47 },
              },
              156: {
                start: { line: 391, column: 8 },
                end: { line: 391, column: 49 },
              },
              157: {
                start: { line: 391, column: 25 },
                end: { line: 391, column: 49 },
              },
              158: {
                start: { line: 392, column: 8 },
                end: { line: 392, column: 53 },
              },
              159: {
                start: { line: 392, column: 23 },
                end: { line: 392, column: 53 },
              },
              160: {
                start: { line: 393, column: 8 },
                end: { line: 393, column: 20 },
              },
              161: {
                start: { line: 396, column: 24 },
                end: { line: 396, column: 65 },
              },
              162: {
                start: { line: 397, column: 8 },
                end: { line: 397, column: 49 },
              },
              163: {
                start: { line: 400, column: 22 },
                end: { line: 400, column: 63 },
              },
              164: {
                start: { line: 401, column: 24 },
                end: { line: 401, column: 65 },
              },
              165: {
                start: { line: 402, column: 8 },
                end: { line: 402, column: 53 },
              },
              166: {
                start: { line: 405, column: 8 },
                end: { line: 405, column: 51 },
              },
              167: {
                start: { line: 408, column: 24 },
                end: { line: 408, column: 65 },
              },
              168: {
                start: { line: 409, column: 8 },
                end: { line: 409, column: 32 },
              },
              169: {
                start: { line: 412, column: 24 },
                end: { line: 412, column: 65 },
              },
              170: {
                start: { line: 413, column: 8 },
                end: { line: 413, column: 34 },
              },
              171: {
                start: { line: 416, column: 24 },
                end: { line: 416, column: 65 },
              },
              172: {
                start: { line: 417, column: 8 },
                end: { line: 417, column: 48 },
              },
              173: {
                start: { line: 421, column: 24 },
                end: { line: 421, column: 65 },
              },
              174: {
                start: { line: 422, column: 8 },
                end: { line: 422, column: 51 },
              },
              175: {
                start: { line: 425, column: 8 },
                end: { line: 425, column: 53 },
              },
              176: {
                start: { line: 428, column: 24 },
                end: { line: 428, column: 65 },
              },
              177: {
                start: { line: 429, column: 20 },
                end: { line: 429, column: 47 },
              },
              178: {
                start: { line: 430, column: 8 },
                end: { line: 430, column: 37 },
              },
              179: {
                start: { line: 433, column: 8 },
                end: { line: 433, column: 51 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 8, column: 6 },
                  end: { line: 8, column: 7 },
                },
                loc: {
                  start: { line: 8, column: 38 },
                  end: { line: 27, column: 5 },
                },
                line: 8,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 30, column: 6 },
                  end: { line: 30, column: 7 },
                },
                loc: {
                  start: { line: 30, column: 48 },
                  end: { line: 122, column: 5 },
                },
                line: 30,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 50, column: 27 },
                  end: { line: 50, column: 28 },
                },
                loc: {
                  start: { line: 50, column: 33 },
                  end: { line: 50, column: 49 },
                },
                line: 50,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 125, column: 6 },
                  end: { line: 125, column: 7 },
                },
                loc: {
                  start: { line: 125, column: 32 },
                  end: { line: 158, column: 5 },
                },
                line: 125,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 161, column: 6 },
                  end: { line: 161, column: 7 },
                },
                loc: {
                  start: { line: 161, column: 66 },
                  end: { line: 174, column: 5 },
                },
                line: 161,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 164, column: 22 },
                  end: { line: 164, column: 23 },
                },
                loc: {
                  start: { line: 164, column: 37 },
                  end: { line: 172, column: 9 },
                },
                line: 164,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 177, column: 6 },
                  end: { line: 177, column: 7 },
                },
                loc: {
                  start: { line: 177, column: 77 },
                  end: { line: 198, column: 5 },
                },
                line: 177,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 188, column: 25 },
                  end: { line: 188, column: 26 },
                },
                loc: {
                  start: { line: 188, column: 40 },
                  end: { line: 196, column: 9 },
                },
                line: 188,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 201, column: 6 },
                  end: { line: 201, column: 7 },
                },
                loc: {
                  start: { line: 201, column: 69 },
                  end: { line: 212, column: 5 },
                },
                line: 201,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 215, column: 6 },
                  end: { line: 215, column: 7 },
                },
                loc: {
                  start: { line: 215, column: 48 },
                  end: { line: 234, column: 5 },
                },
                line: 215,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 217, column: 22 },
                  end: { line: 217, column: 23 },
                },
                loc: {
                  start: { line: 217, column: 30 },
                  end: { line: 233, column: 9 },
                },
                line: 217,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 237, column: 6 },
                  end: { line: 237, column: 7 },
                },
                loc: {
                  start: { line: 237, column: 34 },
                  end: { line: 270, column: 5 },
                },
                line: 237,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 273, column: 6 },
                  end: { line: 273, column: 7 },
                },
                loc: {
                  start: { line: 273, column: 28 },
                  end: { line: 280, column: 5 },
                },
                line: 273,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 283, column: 6 },
                  end: { line: 283, column: 7 },
                },
                loc: {
                  start: { line: 283, column: 46 },
                  end: { line: 292, column: 5 },
                },
                line: 283,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 286, column: 43 },
                  end: { line: 286, column: 44 },
                },
                loc: {
                  start: { line: 286, column: 58 },
                  end: { line: 289, column: 9 },
                },
                line: 286,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 295, column: 6 },
                  end: { line: 295, column: 7 },
                },
                loc: {
                  start: { line: 295, column: 67 },
                  end: { line: 313, column: 5 },
                },
                line: 295,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 301, column: 33 },
                  end: { line: 301, column: 34 },
                },
                loc: {
                  start: { line: 301, column: 48 },
                  end: { line: 310, column: 13 },
                },
                line: 301,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 316, column: 6 },
                  end: { line: 316, column: 7 },
                },
                loc: {
                  start: { line: 316, column: 38 },
                  end: { line: 343, column: 5 },
                },
                line: 316,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 346, column: 6 },
                  end: { line: 346, column: 7 },
                },
                loc: {
                  start: { line: 346, column: 47 },
                  end: { line: 368, column: 5 },
                },
                line: 346,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 371, column: 6 },
                  end: { line: 371, column: 7 },
                },
                loc: {
                  start: { line: 371, column: 53 },
                  end: { line: 379, column: 5 },
                },
                line: 371,
              },
              20: {
                name: '(anonymous_20)',
                decl: {
                  start: { line: 380, column: 4 },
                  end: { line: 380, column: 5 },
                },
                loc: {
                  start: { line: 380, column: 17 },
                  end: { line: 382, column: 5 },
                },
                line: 380,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 387, column: 4 },
                  end: { line: 387, column: 5 },
                },
                loc: {
                  start: { line: 387, column: 41 },
                  end: { line: 394, column: 5 },
                },
                line: 387,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 395, column: 4 },
                  end: { line: 395, column: 5 },
                },
                loc: {
                  start: { line: 395, column: 42 },
                  end: { line: 398, column: 5 },
                },
                line: 395,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 399, column: 4 },
                  end: { line: 399, column: 5 },
                },
                loc: {
                  start: { line: 399, column: 40 },
                  end: { line: 403, column: 5 },
                },
                line: 399,
              },
              24: {
                name: '(anonymous_24)',
                decl: {
                  start: { line: 404, column: 4 },
                  end: { line: 404, column: 5 },
                },
                loc: {
                  start: { line: 404, column: 37 },
                  end: { line: 406, column: 5 },
                },
                line: 404,
              },
              25: {
                name: '(anonymous_25)',
                decl: {
                  start: { line: 407, column: 4 },
                  end: { line: 407, column: 5 },
                },
                loc: {
                  start: { line: 407, column: 41 },
                  end: { line: 410, column: 5 },
                },
                line: 407,
              },
              26: {
                name: '(anonymous_26)',
                decl: {
                  start: { line: 411, column: 4 },
                  end: { line: 411, column: 5 },
                },
                loc: {
                  start: { line: 411, column: 43 },
                  end: { line: 414, column: 5 },
                },
                line: 411,
              },
              27: {
                name: '(anonymous_27)',
                decl: {
                  start: { line: 415, column: 4 },
                  end: { line: 415, column: 5 },
                },
                loc: {
                  start: { line: 415, column: 42 },
                  end: { line: 418, column: 5 },
                },
                line: 415,
              },
              28: {
                name: '(anonymous_28)',
                decl: {
                  start: { line: 419, column: 4 },
                  end: { line: 419, column: 5 },
                },
                loc: {
                  start: { line: 419, column: 38 },
                  end: { line: 423, column: 5 },
                },
                line: 419,
              },
              29: {
                name: '(anonymous_29)',
                decl: {
                  start: { line: 424, column: 4 },
                  end: { line: 424, column: 5 },
                },
                loc: {
                  start: { line: 424, column: 38 },
                  end: { line: 426, column: 5 },
                },
                line: 424,
              },
              30: {
                name: '(anonymous_30)',
                decl: {
                  start: { line: 427, column: 4 },
                  end: { line: 427, column: 5 },
                },
                loc: {
                  start: { line: 427, column: 37 },
                  end: { line: 431, column: 5 },
                },
                line: 427,
              },
              31: {
                name: '(anonymous_31)',
                decl: {
                  start: { line: 432, column: 4 },
                  end: { line: 432, column: 5 },
                },
                loc: {
                  start: { line: 432, column: 44 },
                  end: { line: 434, column: 5 },
                },
                line: 432,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 43, column: 24 },
                  end: { line: 48, column: 9 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 43, column: 24 },
                    end: { line: 43, column: 39 },
                  },
                  {
                    start: { line: 43, column: 43 },
                    end: { line: 48, column: 9 },
                  },
                ],
                line: 43,
              },
              1: {
                loc: {
                  start: { line: 53, column: 38 },
                  end: { line: 53, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 53, column: 38 },
                    end: { line: 53, column: 50 },
                  },
                  {
                    start: { line: 53, column: 54 },
                    end: { line: 53, column: 56 },
                  },
                ],
                line: 53,
              },
              2: {
                loc: {
                  start: { line: 54, column: 39 },
                  end: { line: 54, column: 58 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 54, column: 39 },
                    end: { line: 54, column: 52 },
                  },
                  {
                    start: { line: 54, column: 56 },
                    end: { line: 54, column: 58 },
                  },
                ],
                line: 54,
              },
              3: {
                loc: {
                  start: { line: 55, column: 37 },
                  end: { line: 55, column: 54 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 55, column: 37 },
                    end: { line: 55, column: 48 },
                  },
                  {
                    start: { line: 55, column: 52 },
                    end: { line: 55, column: 54 },
                  },
                ],
                line: 55,
              },
              4: {
                loc: {
                  start: { line: 56, column: 40 },
                  end: { line: 56, column: 60 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 56, column: 40 },
                    end: { line: 56, column: 54 },
                  },
                  {
                    start: { line: 56, column: 58 },
                    end: { line: 56, column: 60 },
                  },
                ],
                line: 56,
              },
              5: {
                loc: {
                  start: { line: 69, column: 8 },
                  end: { line: 72, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 69, column: 8 },
                    end: { line: 72, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 69,
              },
              6: {
                loc: {
                  start: { line: 69, column: 12 },
                  end: { line: 69, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 69, column: 12 },
                    end: { line: 69, column: 32 },
                  },
                  {
                    start: { line: 69, column: 36 },
                    end: { line: 69, column: 55 },
                  },
                ],
                line: 69,
              },
              7: {
                loc: {
                  start: { line: 92, column: 12 },
                  end: { line: 104, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 92, column: 12 },
                    end: { line: 104, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 92,
              },
              8: {
                loc: {
                  start: { line: 94, column: 16 },
                  end: { line: 96, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 94, column: 16 },
                    end: { line: 96, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 94,
              },
              9: {
                loc: {
                  start: { line: 114, column: 8 },
                  end: { line: 116, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 114, column: 8 },
                    end: { line: 116, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 114,
              },
              10: {
                loc: {
                  start: { line: 118, column: 8 },
                  end: { line: 120, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 118, column: 8 },
                    end: { line: 120, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 118,
              },
              11: {
                loc: {
                  start: { line: 126, column: 8 },
                  end: { line: 157, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 127, column: 12 },
                    end: { line: 132, column: 17 },
                  },
                  {
                    start: { line: 133, column: 12 },
                    end: { line: 138, column: 17 },
                  },
                  {
                    start: { line: 139, column: 12 },
                    end: { line: 144, column: 17 },
                  },
                  {
                    start: { line: 145, column: 12 },
                    end: { line: 150, column: 17 },
                  },
                  {
                    start: { line: 151, column: 12 },
                    end: { line: 156, column: 17 },
                  },
                ],
                line: 126,
              },
              12: {
                loc: {
                  start: { line: 180, column: 8 },
                  end: { line: 183, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 180, column: 8 },
                    end: { line: 183, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 180,
              },
              13: {
                loc: {
                  start: { line: 184, column: 8 },
                  end: { line: 186, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 184, column: 8 },
                    end: { line: 186, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 184,
              },
              14: {
                loc: {
                  start: { line: 184, column: 12 },
                  end: { line: 184, column: 124 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 184, column: 12 },
                    end: { line: 184, column: 31 },
                  },
                  {
                    start: { line: 184, column: 36 },
                    end: { line: 184, column: 123 },
                  },
                ],
                line: 184,
              },
              15: {
                loc: {
                  start: { line: 184, column: 36 },
                  end: { line: 184, column: 123 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 184, column: 97 },
                    end: { line: 184, column: 103 },
                  },
                  {
                    start: { line: 184, column: 106 },
                    end: { line: 184, column: 123 },
                  },
                ],
                line: 184,
              },
              16: {
                loc: {
                  start: { line: 184, column: 36 },
                  end: { line: 184, column: 94 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 184, column: 36 },
                    end: { line: 184, column: 69 },
                  },
                  {
                    start: { line: 184, column: 73 },
                    end: { line: 184, column: 94 },
                  },
                ],
                line: 184,
              },
              17: {
                loc: {
                  start: { line: 243, column: 12 },
                  end: { line: 249, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 243, column: 12 },
                    end: { line: 249, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 243,
              },
              18: {
                loc: {
                  start: { line: 244, column: 16 },
                  end: { line: 247, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 244, column: 16 },
                    end: { line: 247, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 244,
              },
              19: {
                loc: {
                  start: { line: 252, column: 12 },
                  end: { line: 264, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 252, column: 12 },
                    end: { line: 264, column: 13 },
                  },
                  {
                    start: { line: 262, column: 19 },
                    end: { line: 264, column: 13 },
                  },
                ],
                line: 252,
              },
              20: {
                loc: {
                  start: { line: 252, column: 16 },
                  end: { line: 252, column: 64 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 252, column: 16 },
                    end: { line: 252, column: 29 },
                  },
                  {
                    start: { line: 252, column: 33 },
                    end: { line: 252, column: 64 },
                  },
                ],
                line: 252,
              },
              21: {
                loc: {
                  start: { line: 253, column: 16 },
                  end: { line: 255, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 253, column: 16 },
                    end: { line: 255, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 253,
              },
              22: {
                loc: {
                  start: { line: 266, column: 8 },
                  end: { line: 268, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 266, column: 8 },
                    end: { line: 268, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 266,
              },
              23: {
                loc: {
                  start: { line: 274, column: 8 },
                  end: { line: 274, column: 54 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 274, column: 8 },
                    end: { line: 274, column: 54 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 274,
              },
              24: {
                loc: {
                  start: { line: 275, column: 8 },
                  end: { line: 275, column: 52 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 275, column: 8 },
                    end: { line: 275, column: 52 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 275,
              },
              25: {
                loc: {
                  start: { line: 276, column: 8 },
                  end: { line: 276, column: 46 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 276, column: 8 },
                    end: { line: 276, column: 46 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 276,
              },
              26: {
                loc: {
                  start: { line: 277, column: 8 },
                  end: { line: 277, column: 50 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 277, column: 8 },
                    end: { line: 277, column: 50 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 277,
              },
              27: {
                loc: {
                  start: { line: 278, column: 8 },
                  end: { line: 278, column: 58 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 278, column: 8 },
                    end: { line: 278, column: 58 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 278,
              },
              28: {
                loc: {
                  start: { line: 290, column: 37 },
                  end: { line: 290, column: 70 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 290, column: 64 },
                    end: { line: 290, column: 66 },
                  },
                  {
                    start: { line: 290, column: 69 },
                    end: { line: 290, column: 70 },
                  },
                ],
                line: 290,
              },
              29: {
                loc: {
                  start: { line: 317, column: 8 },
                  end: { line: 342, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 318, column: 12 },
                    end: { line: 323, column: 18 },
                  },
                  {
                    start: { line: 324, column: 12 },
                    end: { line: 329, column: 18 },
                  },
                  {
                    start: { line: 330, column: 12 },
                    end: { line: 335, column: 18 },
                  },
                  {
                    start: { line: 336, column: 12 },
                    end: { line: 341, column: 18 },
                  },
                ],
                line: 317,
              },
              30: {
                loc: {
                  start: { line: 351, column: 29 },
                  end: { line: 351, column: 74 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 351, column: 43 },
                    end: { line: 351, column: 67 },
                  },
                  {
                    start: { line: 351, column: 70 },
                    end: { line: 351, column: 74 },
                  },
                ],
                line: 351,
              },
              31: {
                loc: {
                  start: { line: 353, column: 12 },
                  end: { line: 360, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 353, column: 12 },
                    end: { line: 360, column: 13 },
                  },
                  {
                    start: { line: 355, column: 19 },
                    end: { line: 360, column: 13 },
                  },
                ],
                line: 353,
              },
              32: {
                loc: {
                  start: { line: 353, column: 16 },
                  end: { line: 353, column: 59 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 353, column: 16 },
                    end: { line: 353, column: 37 },
                  },
                  {
                    start: { line: 353, column: 41 },
                    end: { line: 353, column: 59 },
                  },
                ],
                line: 353,
              },
              33: {
                loc: {
                  start: { line: 356, column: 16 },
                  end: { line: 358, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 356, column: 16 },
                    end: { line: 358, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 356,
              },
              34: {
                loc: {
                  start: { line: 362, column: 8 },
                  end: { line: 364, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 362, column: 8 },
                    end: { line: 364, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 362,
              },
              35: {
                loc: {
                  start: { line: 365, column: 15 },
                  end: { line: 367, column: 9 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 365, column: 34 },
                    end: { line: 365, column: 39 },
                  },
                  {
                    start: { line: 365, column: 42 },
                    end: { line: 367, column: 9 },
                  },
                ],
                line: 365,
              },
              36: {
                loc: {
                  start: { line: 373, column: 8 },
                  end: { line: 378, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 373, column: 8 },
                    end: { line: 378, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 373,
              },
              37: {
                loc: {
                  start: { line: 375, column: 12 },
                  end: { line: 377, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 375, column: 12 },
                    end: { line: 377, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 375,
              },
              38: {
                loc: {
                  start: { line: 375, column: 16 },
                  end: { line: 375, column: 96 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 375, column: 16 },
                    end: { line: 375, column: 19 },
                  },
                  {
                    start: { line: 375, column: 23 },
                    end: { line: 375, column: 30 },
                  },
                  {
                    start: { line: 375, column: 34 },
                    end: { line: 375, column: 39 },
                  },
                  {
                    start: { line: 375, column: 43 },
                    end: { line: 375, column: 52 },
                  },
                  {
                    start: { line: 375, column: 56 },
                    end: { line: 375, column: 62 },
                  },
                  {
                    start: { line: 375, column: 66 },
                    end: { line: 375, column: 76 },
                  },
                  {
                    start: { line: 375, column: 80 },
                    end: { line: 375, column: 84 },
                  },
                  {
                    start: { line: 375, column: 88 },
                    end: { line: 375, column: 96 },
                  },
                ],
                line: 375,
              },
              39: {
                loc: {
                  start: { line: 388, column: 19 },
                  end: { line: 388, column: 34 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 388, column: 19 },
                    end: { line: 388, column: 28 },
                  },
                  {
                    start: { line: 388, column: 32 },
                    end: { line: 388, column: 34 },
                  },
                ],
                line: 388,
              },
              40: {
                loc: {
                  start: { line: 390, column: 8 },
                  end: { line: 390, column: 47 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 390, column: 8 },
                    end: { line: 390, column: 47 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 390,
              },
              41: {
                loc: {
                  start: { line: 391, column: 8 },
                  end: { line: 391, column: 49 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 391, column: 8 },
                    end: { line: 391, column: 49 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 391,
              },
              42: {
                loc: {
                  start: { line: 392, column: 8 },
                  end: { line: 392, column: 53 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 392, column: 8 },
                    end: { line: 392, column: 53 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 392,
              },
              43: {
                loc: {
                  start: { line: 397, column: 15 },
                  end: { line: 397, column: 48 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 397, column: 25 },
                    end: { line: 397, column: 41 },
                  },
                  {
                    start: { line: 397, column: 44 },
                    end: { line: 397, column: 48 },
                  },
                ],
                line: 397,
              },
              44: {
                loc: {
                  start: { line: 400, column: 40 },
                  end: { line: 400, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 400, column: 40 },
                    end: { line: 400, column: 50 },
                  },
                  {
                    start: { line: 400, column: 54 },
                    end: { line: 400, column: 55 },
                  },
                ],
                line: 400,
              },
              45: {
                loc: {
                  start: { line: 425, column: 26 },
                  end: { line: 425, column: 45 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 425, column: 26 },
                    end: { line: 425, column: 34 },
                  },
                  {
                    start: { line: 425, column: 38 },
                    end: { line: 425, column: 45 },
                  },
                ],
                line: 425,
              },
              46: {
                loc: {
                  start: { line: 429, column: 20 },
                  end: { line: 429, column: 47 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 429, column: 20 },
                    end: { line: 429, column: 28 },
                  },
                  {
                    start: { line: 429, column: 32 },
                    end: { line: 429, column: 41 },
                  },
                  {
                    start: { line: 429, column: 45 },
                    end: { line: 429, column: 47 },
                  },
                ],
                line: 429,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
              94: 0,
              95: 0,
              96: 0,
              97: 0,
              98: 0,
              99: 0,
              100: 0,
              101: 0,
              102: 0,
              103: 0,
              104: 0,
              105: 0,
              106: 0,
              107: 0,
              108: 0,
              109: 0,
              110: 0,
              111: 0,
              112: 0,
              113: 0,
              114: 0,
              115: 0,
              116: 0,
              117: 0,
              118: 0,
              119: 0,
              120: 0,
              121: 0,
              122: 0,
              123: 0,
              124: 0,
              125: 0,
              126: 0,
              127: 0,
              128: 0,
              129: 0,
              130: 0,
              131: 0,
              132: 0,
              133: 0,
              134: 0,
              135: 0,
              136: 0,
              137: 0,
              138: 0,
              139: 0,
              140: 0,
              141: 0,
              142: 0,
              143: 0,
              144: 0,
              145: 0,
              146: 0,
              147: 0,
              148: 0,
              149: 0,
              150: 0,
              151: 0,
              152: 0,
              153: 0,
              154: 0,
              155: 0,
              156: 0,
              157: 0,
              158: 0,
              159: 0,
              160: 0,
              161: 0,
              162: 0,
              163: 0,
              164: 0,
              165: 0,
              166: 0,
              167: 0,
              168: 0,
              169: 0,
              170: 0,
              171: 0,
              172: 0,
              173: 0,
              174: 0,
              175: 0,
              176: 0,
              177: 0,
              178: 0,
              179: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0, 0, 0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0],
              28: [0, 0],
              29: [0, 0, 0, 0],
              30: [0, 0],
              31: [0, 0],
              32: [0, 0],
              33: [0, 0],
              34: [0, 0],
              35: [0, 0],
              36: [0, 0],
              37: [0, 0],
              38: [0, 0, 0, 0, 0, 0, 0, 0],
              39: [0, 0],
              40: [0, 0],
              41: [0, 0],
              42: [0, 0],
              43: [0, 0],
              44: [0, 0],
              45: [0, 0],
              46: [0, 0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/pdf-export-service.ts',
              ],
              sourcesContent: [
                "import { PDFDocument, rgb, StandardFonts } from 'pdf-lib'\nimport { BaseContentProcessor, BaseExportService } from './base-export-service'\nimport { type Note } from '../../types/note'\nimport {\n  type ExportOptions,\n  type ExportResult,\n  type PDFExportOptions,\n} from '../../types/export'\n\n/**\n * PDF export service using pdf-lib\n */\nexport class PDFExportService extends BaseExportService {\n  constructor() {\n    super(new PDFContentProcessor())\n  }\n\n  /**\n   * Export note to PDF format\n   */\n  async exportNote(note: Note, options: ExportOptions): Promise<ExportResult> {\n    const pdfOptions = options as PDFExportOptions\n\n    // Process content to HTML-like structure first\n    const htmlContent = await this.contentProcessor.processContent(\n      this.parseContent(note.content),\n      options\n    )\n\n    // Generate PDF document\n    const pdfBytes = await this.generatePDF(note, htmlContent, pdfOptions)\n\n    // Convert to base64 for storage/transmission\n    const content = Buffer.from(pdfBytes).toString('base64')\n    const filename = this.generateFilename(note, options)\n\n    const result: ExportResult = {\n      content,\n      filename,\n      mimeType: 'application/pdf',\n      size: pdfBytes.length,\n      format: 'pdf',\n      exportedAt: new Date().toISOString(),\n    }\n\n    await this.saveToHistory(note, options, result)\n    return result\n  }\n\n  /**\n   * Generate PDF document using pdf-lib\n   */\n  private async generatePDF(\n    note: Note,\n    content: string,\n    options: PDFExportOptions\n  ): Promise<Uint8Array> {\n    const pdfDoc = await PDFDocument.create()\n\n    // Set document metadata\n    pdfDoc.setTitle(note.title)\n    pdfDoc.setAuthor('Notable')\n    pdfDoc.setCreationDate(new Date(note.created_at))\n    pdfDoc.setModificationDate(new Date(note.updated_at))\n\n    // Load fonts\n    const regularFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold)\n    const codeFont = await pdfDoc.embedFont(StandardFonts.Courier)\n\n    // Page settings\n    const pageFormat = this.getPageDimensions(options.pageFormat)\n    const margins = options.margins || {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20,\n    }\n\n    // Convert mm to points (1mm = 2.834645669 points)\n    const mmToPoints = (mm: number) => mm * 2.834645669\n    const pageWidth = pageFormat.width\n    const pageHeight = pageFormat.height\n    const leftMargin = mmToPoints(margins.left || 20)\n    const rightMargin = mmToPoints(margins.right || 20)\n    const topMargin = mmToPoints(margins.top || 20)\n    const bottomMargin = mmToPoints(margins.bottom || 20)\n\n    const contentWidth = pageWidth - leftMargin - rightMargin\n    const contentHeight = pageHeight - topMargin - bottomMargin\n\n    let page = pdfDoc.addPage([pageWidth, pageHeight])\n    let currentY = pageHeight - topMargin\n    let pageNumber = 1\n\n    // Add title\n    const titleHeight = await this.addTitle(\n      page,\n      note.title,\n      leftMargin,\n      currentY,\n      contentWidth,\n      boldFont,\n      18\n    )\n    currentY -= titleHeight + 20\n\n    // Add metadata if requested\n    if (options.includeDates || options.includeTags) {\n      const metadataHeight = await this.addMetadata(\n        page,\n        note,\n        leftMargin,\n        currentY,\n        contentWidth,\n        regularFont,\n        10,\n        options\n      )\n      currentY -= metadataHeight + 20\n    }\n\n    // Add horizontal line\n    page.drawLine({\n      start: { x: leftMargin, y: currentY },\n      end: { x: pageWidth - rightMargin, y: currentY },\n      thickness: 1,\n      color: rgb(0.8, 0.8, 0.8),\n    })\n    currentY -= 20\n\n    // Process content\n    const contentBlocks = this.parseContentBlocks(content)\n\n    for (const block of contentBlocks) {\n      // Check if we need a new page\n      const estimatedHeight = this.estimateBlockHeight(\n        block,\n        contentWidth,\n        regularFont\n      )\n      if (currentY - estimatedHeight < bottomMargin) {\n        // Add page number if requested\n        if (options.includePageNumbers) {\n          this.addPageNumber(\n            page,\n            pageNumber,\n            pageWidth,\n            bottomMargin,\n            regularFont\n          )\n        }\n\n        // Create new page\n        page = pdfDoc.addPage([pageWidth, pageHeight])\n        currentY = pageHeight - topMargin\n        pageNumber++\n      }\n\n      // Render block\n      const blockHeight = await this.renderContentBlock(\n        page,\n        block,\n        leftMargin,\n        currentY,\n        contentWidth,\n        { regular: regularFont, bold: boldFont, code: codeFont }\n      )\n      currentY -= blockHeight + 10\n    }\n\n    // Add page number to last page\n    if (options.includePageNumbers) {\n      this.addPageNumber(page, pageNumber, pageWidth, bottomMargin, regularFont)\n    }\n\n    // Add watermark if specified\n    if (options.watermark) {\n      this.addWatermark(pdfDoc, options.watermark, regularFont)\n    }\n\n    return pdfDoc.save()\n  }\n\n  /**\n   * Get page dimensions for different formats\n   */\n  private getPageDimensions(format?: string): {\n    width: number\n    height: number\n  } {\n    switch (format) {\n      case 'A4':\n        return { width: 595, height: 842 } // A4 in points\n      case 'Letter':\n        return { width: 612, height: 792 } // US Letter in points\n      case 'Legal':\n        return { width: 612, height: 1008 } // US Legal in points\n      case 'A3':\n        return { width: 842, height: 1191 } // A3 in points\n      default:\n        return { width: 595, height: 842 } // Default to A4\n    }\n  }\n\n  /**\n   * Add title to page\n   */\n  private async addTitle(\n    page: any,\n    title: string,\n    x: number,\n    y: number,\n    maxWidth: number,\n    font: any,\n    fontSize: number\n  ): Promise<number> {\n    const lines = this.wrapText(title, maxWidth, font, fontSize)\n    const lineHeight = fontSize * 1.2\n\n    lines.forEach((line, index) => {\n      page.drawText(line, {\n        x,\n        y: y - index * lineHeight,\n        size: fontSize,\n        font,\n        color: rgb(0, 0, 0),\n      })\n    })\n\n    return lines.length * lineHeight\n  }\n\n  /**\n   * Add metadata section\n   */\n  private async addMetadata(\n    page: any,\n    note: Note,\n    x: number,\n    y: number,\n    maxWidth: number,\n    font: any,\n    fontSize: number,\n    options: PDFExportOptions\n  ): Promise<number> {\n    const metadata: string[] = []\n\n    if (options.includeDates) {\n      metadata.push(\n        `Created: ${new Date(note.created_at).toLocaleDateString()}`\n      )\n      metadata.push(\n        `Updated: ${new Date(note.updated_at).toLocaleDateString()}`\n      )\n    }\n\n    if (options.includeTags && note.tags?.length) {\n      metadata.push(`Tags: ${note.tags.join(', ')}`)\n    }\n\n    const lineHeight = fontSize * 1.2\n    metadata.forEach((line, index) => {\n      page.drawText(line, {\n        x,\n        y: y - index * lineHeight,\n        size: fontSize,\n        font,\n        color: rgb(0.4, 0.4, 0.4),\n      })\n    })\n\n    return metadata.length * lineHeight\n  }\n\n  /**\n   * Add page number\n   */\n  private addPageNumber(\n    page: any,\n    pageNumber: number,\n    pageWidth: number,\n    bottomMargin: number,\n    font: any\n  ): void {\n    const text = `Page ${pageNumber}`\n    const fontSize = 10\n    const textWidth = font.widthOfTextAtSize(text, fontSize)\n\n    page.drawText(text, {\n      x: pageWidth - textWidth - 20,\n      y: bottomMargin / 2,\n      size: fontSize,\n      font,\n      color: rgb(0.5, 0.5, 0.5),\n    })\n  }\n\n  /**\n   * Add watermark to all pages\n   */\n  private addWatermark(pdfDoc: any, watermarkText: string, font: any): void {\n    const pages = pdfDoc.getPages()\n\n    pages.forEach((page: any) => {\n      const { width, height } = page.getSize()\n      const fontSize = 48\n      const textWidth = font.widthOfTextAtSize(watermarkText, fontSize)\n\n      page.drawText(watermarkText, {\n        x: (width - textWidth) / 2,\n        y: height / 2,\n        size: fontSize,\n        font,\n        color: rgb(0.9, 0.9, 0.9),\n        opacity: 0.3,\n        rotate: { type: 'degrees', degrees: -45 },\n      })\n    })\n  }\n\n  /**\n   * Parse content into blocks for PDF rendering\n   */\n  private parseContentBlocks(content: string): ContentBlock[] {\n    // This is a simplified parser - in reality, you'd want more sophisticated parsing\n    const lines = content.split('\\n')\n    const blocks: ContentBlock[] = []\n\n    let currentBlock: ContentBlock | null = null\n\n    for (const line of lines) {\n      if (line.trim() === '') {\n        if (currentBlock) {\n          blocks.push(currentBlock)\n          currentBlock = null\n        }\n        continue\n      }\n\n      // Detect block type\n      const blockType = this.detectBlockType(line)\n\n      if (!currentBlock || currentBlock.type !== blockType) {\n        if (currentBlock) {\n          blocks.push(currentBlock)\n        }\n        currentBlock = { type: blockType, content: [line] }\n      } else {\n        currentBlock.content.push(line)\n      }\n    }\n\n    if (currentBlock) {\n      blocks.push(currentBlock)\n    }\n\n    return blocks\n  }\n\n  /**\n   * Detect block type from line\n   */\n  private detectBlockType(line: string): string {\n    if (line.match(/^#{1,6}\\s/)) return 'heading'\n    if (line.match(/^>\\s/)) return 'blockquote'\n    if (line.match(/^```/)) return 'code'\n    if (line.match(/^[-*+]\\s/)) return 'list'\n    if (line.match(/^\\d+\\.\\s/)) return 'ordered-list'\n    return 'paragraph'\n  }\n\n  /**\n   * Estimate block height for pagination\n   */\n  private estimateBlockHeight(\n    block: ContentBlock,\n    width: number,\n    font: any\n  ): number {\n    const lineHeight = 12 * 1.4 // Assuming 12pt font with 1.4 line height\n    const lines = block.content.reduce((total, line) => {\n      const wrappedLines = this.wrapText(line, width, font, 12)\n      return total + wrappedLines.length\n    }, 0)\n\n    return lines * lineHeight + (block.type === 'heading' ? 10 : 5) // Extra spacing for headings\n  }\n\n  /**\n   * Render content block to PDF page\n   */\n  private async renderContentBlock(\n    page: any,\n    block: ContentBlock,\n    x: number,\n    y: number,\n    maxWidth: number,\n    fonts: { regular: any; bold: any; code: any }\n  ): Promise<number> {\n    let currentY = y\n    const lineHeight = 12 * 1.4\n\n    for (const line of block.content) {\n      const { font, fontSize, color } = this.getBlockStyle(block.type, fonts)\n      const wrappedLines = this.wrapText(line, maxWidth, font, fontSize)\n\n      wrappedLines.forEach((wrappedLine) => {\n        page.drawText(wrappedLine, {\n          x,\n          y: currentY,\n          size: fontSize,\n          font,\n          color,\n        })\n        currentY -= lineHeight\n      })\n    }\n\n    return y - currentY\n  }\n\n  /**\n   * Get styling for different block types\n   */\n  private getBlockStyle(\n    blockType: string,\n    fonts: any\n  ): {\n    font: any\n    fontSize: number\n    color: any\n  } {\n    switch (blockType) {\n      case 'heading':\n        return { font: fonts.bold, fontSize: 16, color: rgb(0, 0, 0) }\n      case 'code':\n        return { font: fonts.code, fontSize: 10, color: rgb(0.2, 0.2, 0.2) }\n      case 'blockquote':\n        return { font: fonts.regular, fontSize: 11, color: rgb(0.4, 0.4, 0.4) }\n      default:\n        return { font: fonts.regular, fontSize: 12, color: rgb(0, 0, 0) }\n    }\n  }\n\n  /**\n   * Wrap text to fit within specified width\n   */\n  private wrapText(\n    text: string,\n    maxWidth: number,\n    font: any,\n    fontSize: number\n  ): string[] {\n    const words = text.split(' ')\n    const lines: string[] = []\n    let currentLine = ''\n\n    for (const word of words) {\n      const testLine = currentLine ? `${currentLine} ${word}` : word\n      const lineWidth = font.widthOfTextAtSize(testLine, fontSize)\n\n      if (lineWidth <= maxWidth || currentLine === '') {\n        currentLine = testLine\n      } else {\n        if (currentLine) {\n          lines.push(currentLine)\n        }\n        currentLine = word\n      }\n    }\n\n    if (currentLine) {\n      lines.push(currentLine)\n    }\n\n    return lines.length > 0 ? lines : ['']\n  }\n\n  /**\n   * Validate PDF-specific options\n   */\n  protected validateFormatSpecificOptions(\n    options: ExportOptions,\n    errors: string[]\n  ): void {\n    const pdfOptions = options as PDFExportOptions\n\n    if (pdfOptions.margins) {\n      const { top, right, bottom, left } = pdfOptions.margins\n      if (\n        (top && top < 0) ||\n        (right && right < 0) ||\n        (bottom && bottom < 0) ||\n        (left && left < 0)\n      ) {\n        errors.push('Margins cannot be negative')\n      }\n    }\n  }\n}\n\n/**\n * PDF content processor that outputs HTML-like markup for PDF rendering\n */\nexport class PDFContentProcessor extends BaseContentProcessor {\n  protected async processTextNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    let text = node.text || ''\n\n    // Apply text formatting with HTML-like tags for PDF processor\n    if (node.bold) text = `<b>${text}</b>`\n    if (node.italic) text = `<i>${text}</i>`\n    if (node.code) text = `<code>${text}</code>`\n\n    return text\n  }\n\n  protected async processParagraph(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return content ? `${content}\\n\\n` : '\\n'\n  }\n\n  protected async processHeading(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const level = Math.min(Math.max(node.level || 1, 1), 6)\n    const content = await this.processChildren(node, options)\n    return `${'#'.repeat(level)} ${content}\\n\\n`\n  }\n\n  protected async processList(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    return this.processChildren(node, options)\n  }\n\n  protected async processListItem(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `• ${content}\\n`\n  }\n\n  protected async processBlockquote(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `> ${content}\\n\\n`\n  }\n\n  protected async processCodeBlock(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `\\`\\`\\`\\n${content}\\n\\`\\`\\`\\n\\n`\n  }\n\n  protected async processTable(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    // Simplified table processing for PDF\n    const content = await this.processChildren(node, options)\n    return `[TABLE]\\n${content}\\n[/TABLE]\\n\\n`\n  }\n\n  protected async processImage(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    return `[IMAGE: ${node.alt || 'Image'}]\\n\\n`\n  }\n\n  protected async processLink(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const url = node.url || node.href || ''\n    return `${content} (${url})`\n  }\n\n  protected async processGenericNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    return this.processChildren(node, options)\n  }\n}\n\n/**\n * Content block interface for PDF rendering\n */\ninterface ContentBlock {\n  type: string\n  content: string[]\n}\n",
              ],
              names: [
                'PDFDocument',
                'rgb',
                'StandardFonts',
                'BaseContentProcessor',
                'BaseExportService',
                'PDFExportService',
                'exportNote',
                'note',
                'options',
                'pdfOptions',
                'htmlContent',
                'contentProcessor',
                'processContent',
                'parseContent',
                'content',
                'pdfBytes',
                'generatePDF',
                'Buffer',
                'from',
                'toString',
                'filename',
                'generateFilename',
                'result',
                'mimeType',
                'size',
                'length',
                'format',
                'exportedAt',
                'Date',
                'toISOString',
                'saveToHistory',
                'pdfDoc',
                'create',
                'setTitle',
                'title',
                'setAuthor',
                'setCreationDate',
                'created_at',
                'setModificationDate',
                'updated_at',
                'regularFont',
                'embedFont',
                'Helvetica',
                'boldFont',
                'HelveticaBold',
                'codeFont',
                'Courier',
                'pageFormat',
                'getPageDimensions',
                'margins',
                'top',
                'right',
                'bottom',
                'left',
                'mmToPoints',
                'mm',
                'pageWidth',
                'width',
                'pageHeight',
                'height',
                'leftMargin',
                'rightMargin',
                'topMargin',
                'bottomMargin',
                'contentWidth',
                'contentHeight',
                'page',
                'addPage',
                'currentY',
                'pageNumber',
                'titleHeight',
                'addTitle',
                'includeDates',
                'includeTags',
                'metadataHeight',
                'addMetadata',
                'drawLine',
                'start',
                'x',
                'y',
                'end',
                'thickness',
                'color',
                'contentBlocks',
                'parseContentBlocks',
                'block',
                'estimatedHeight',
                'estimateBlockHeight',
                'includePageNumbers',
                'addPageNumber',
                'blockHeight',
                'renderContentBlock',
                'regular',
                'bold',
                'code',
                'watermark',
                'addWatermark',
                'save',
                'maxWidth',
                'font',
                'fontSize',
                'lines',
                'wrapText',
                'lineHeight',
                'forEach',
                'line',
                'index',
                'drawText',
                'metadata',
                'push',
                'toLocaleDateString',
                'tags',
                'join',
                'text',
                'textWidth',
                'widthOfTextAtSize',
                'watermarkText',
                'pages',
                'getPages',
                'getSize',
                'opacity',
                'rotate',
                'type',
                'degrees',
                'split',
                'blocks',
                'currentBlock',
                'trim',
                'blockType',
                'detectBlockType',
                'match',
                'reduce',
                'total',
                'wrappedLines',
                'fonts',
                'getBlockStyle',
                'wrappedLine',
                'words',
                'currentLine',
                'word',
                'testLine',
                'lineWidth',
                'validateFormatSpecificOptions',
                'errors',
                'constructor',
                'PDFContentProcessor',
                'processTextNode',
                'node',
                'italic',
                'processParagraph',
                'processChildren',
                'processHeading',
                'level',
                'Math',
                'min',
                'max',
                'repeat',
                'processList',
                'processListItem',
                'processBlockquote',
                'processCodeBlock',
                'processTable',
                'processImage',
                'alt',
                'processLink',
                'url',
                'href',
                'processGenericNode',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '6e254bddab972df99a22445522b47b396aab58df',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '6e254bddab972df99a22445522b47b396aab58df' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_1t35mm0xq5 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_1t35mm0xq5()
      __webpack_require__(
        '../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js'
      ).Buffer
      function cov_23lzboizxw() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/html-export-service.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/html-export-service.ts',
            statementMap: {
              0: {
                start: { line: 8, column: 28 },
                end: { line: 8, column: 35 },
              },
              1: {
                start: { line: 10, column: 24 },
                end: { line: 10, column: 55 },
              },
              2: {
                start: { line: 11, column: 28 },
                end: { line: 11, column: 88 },
              },
              3: {
                start: { line: 13, column: 25 },
                end: { line: 13, column: 88 },
              },
              4: {
                start: { line: 14, column: 25 },
                end: { line: 14, column: 61 },
              },
              5: {
                start: { line: 15, column: 23 },
                end: { line: 22, column: 9 },
              },
              6: {
                start: { line: 23, column: 8 },
                end: { line: 23, column: 56 },
              },
              7: {
                start: { line: 24, column: 8 },
                end: { line: 24, column: 22 },
              },
              8: {
                start: { line: 29, column: 25 },
                end: { line: 29, column: 61 },
              },
              9: {
                start: { line: 30, column: 23 },
                end: { line: 30, column: 57 },
              },
              10: {
                start: { line: 31, column: 24 },
                end: { line: 31, column: 80 },
              },
              11: {
                start: { line: 32, column: 27 },
                end: { line: 32, column: 92 },
              },
              12: {
                start: { line: 33, column: 8 },
                end: { line: 57, column: 9 },
              },
              13: {
                start: { line: 63, column: 23 },
                end: { line: 66, column: 56 },
              },
              14: {
                start: { line: 67, column: 8 },
                end: { line: 69, column: 9 },
              },
              15: {
                start: { line: 68, column: 12 },
                end: { line: 68, column: 89 },
              },
              16: {
                start: { line: 70, column: 8 },
                end: { line: 70, column: 24 },
              },
              17: {
                start: { line: 75, column: 27 },
                end: { line: 75, column: 47 },
              },
              18: {
                start: { line: 76, column: 28 },
                end: { line: 76, column: 99 },
              },
              19: {
                start: { line: 77, column: 33 },
                end: { line: 77, column: 85 },
              },
              20: {
                start: { line: 78, column: 29 },
                end: { line: 78, column: 80 },
              },
              21: {
                start: { line: 79, column: 33 },
                end: { line: 79, column: 92 },
              },
              22: {
                start: { line: 80, column: 29 },
                end: { line: 80, column: 52 },
              },
              23: {
                start: { line: 81, column: 24 },
                end: { line: 81, column: 114 },
              },
              24: {
                start: { line: 82, column: 8 },
                end: { line: 84, column: 9 },
              },
              25: {
                start: { line: 83, column: 12 },
                end: { line: 83, column: 45 },
              },
              26: {
                start: { line: 85, column: 8 },
                end: { line: 85, column: 119 },
              },
              27: {
                start: { line: 90, column: 8 },
                end: { line: 255, column: 2 },
              },
              28: {
                start: { line: 260, column: 8 },
                end: { line: 278, column: 2 },
              },
              29: {
                start: { line: 283, column: 8 },
                end: { line: 320, column: 2 },
              },
              30: {
                start: { line: 325, column: 8 },
                end: { line: 365, column: 2 },
              },
              31: {
                start: { line: 370, column: 8 },
                end: { line: 424, column: 2 },
              },
              32: {
                start: { line: 429, column: 8 },
                end: { line: 478, column: 2 },
              },
              33: {
                start: { line: 484, column: 22 },
                end: { line: 484, column: 24 },
              },
              34: {
                start: { line: 485, column: 8 },
                end: { line: 488, column: 9 },
              },
              35: {
                start: { line: 486, column: 12 },
                end: { line: 486, column: 98 },
              },
              36: {
                start: { line: 487, column: 12 },
                end: { line: 487, column: 98 },
              },
              37: {
                start: { line: 489, column: 25 },
                end: { line: 489, column: 232 },
              },
              38: {
                start: { line: 489, column: 159 },
                end: { line: 489, column: 209 },
              },
              39: {
                start: { line: 490, column: 29 },
                end: { line: 490, column: 105 },
              },
              40: {
                start: { line: 491, column: 8 },
                end: { line: 491, column: 44 },
              },
              41: {
                start: { line: 496, column: 29 },
                end: { line: 496, column: 69 },
              },
              42: {
                start: { line: 497, column: 25 },
                end: { line: 497, column: 27 },
              },
              43: {
                start: { line: 499, column: 8 },
                end: { line: 508, column: 9 },
              },
              44: {
                start: { line: 500, column: 26 },
                end: { line: 500, column: 44 },
              },
              45: {
                start: { line: 501, column: 25 },
                end: { line: 501, column: 40 },
              },
              46: {
                start: { line: 502, column: 23 },
                end: { line: 502, column: 91 },
              },
              47: {
                start: { line: 503, column: 12 },
                end: { line: 507, column: 15 },
              },
              48: {
                start: { line: 509, column: 8 },
                end: { line: 511, column: 9 },
              },
              49: {
                start: { line: 510, column: 12 },
                end: { line: 510, column: 22 },
              },
              50: {
                start: { line: 512, column: 25 },
                end: { line: 512, column: 162 },
              },
              51: {
                start: { line: 512, column: 49 },
                end: { line: 512, column: 152 },
              },
              52: {
                start: { line: 513, column: 8 },
                end: { line: 517, column: 12 },
              },
              53: {
                start: { line: 522, column: 8 },
                end: { line: 599, column: 15 },
              },
              54: {
                start: { line: 604, column: 20 },
                end: { line: 604, column: 49 },
              },
              55: {
                start: { line: 605, column: 8 },
                end: { line: 605, column: 31 },
              },
              56: {
                start: { line: 606, column: 8 },
                end: { line: 606, column: 29 },
              },
              57: {
                start: { line: 614, column: 8 },
                end: { line: 614, column: 42 },
              },
              58: {
                start: { line: 621, column: 19 },
                end: { line: 621, column: 51 },
              },
              59: {
                start: { line: 623, column: 8 },
                end: { line: 623, column: 57 },
              },
              60: {
                start: { line: 623, column: 23 },
                end: { line: 623, column: 57 },
              },
              61: {
                start: { line: 624, column: 8 },
                end: { line: 624, column: 51 },
              },
              62: {
                start: { line: 624, column: 25 },
                end: { line: 624, column: 51 },
              },
              63: {
                start: { line: 625, column: 8 },
                end: { line: 625, column: 52 },
              },
              64: {
                start: { line: 625, column: 28 },
                end: { line: 625, column: 52 },
              },
              65: {
                start: { line: 626, column: 8 },
                end: { line: 626, column: 60 },
              },
              66: {
                start: { line: 626, column: 32 },
                end: { line: 626, column: 60 },
              },
              67: {
                start: { line: 627, column: 8 },
                end: { line: 627, column: 53 },
              },
              68: {
                start: { line: 627, column: 23 },
                end: { line: 627, column: 53 },
              },
              69: {
                start: { line: 628, column: 8 },
                end: { line: 628, column: 58 },
              },
              70: {
                start: { line: 628, column: 30 },
                end: { line: 628, column: 58 },
              },
              71: {
                start: { line: 629, column: 8 },
                end: { line: 629, column: 56 },
              },
              72: {
                start: { line: 629, column: 28 },
                end: { line: 629, column: 56 },
              },
              73: {
                start: { line: 630, column: 8 },
                end: { line: 630, column: 20 },
              },
              74: {
                start: { line: 633, column: 24 },
                end: { line: 633, column: 65 },
              },
              75: {
                start: { line: 634, column: 8 },
                end: { line: 634, column: 50 },
              },
              76: {
                start: { line: 637, column: 22 },
                end: { line: 637, column: 63 },
              },
              77: {
                start: { line: 638, column: 24 },
                end: { line: 638, column: 65 },
              },
              78: {
                start: { line: 639, column: 19 },
                end: { line: 639, column: 90 },
              },
              79: {
                start: { line: 640, column: 8 },
                end: { line: 640, column: 62 },
              },
              80: {
                start: { line: 643, column: 24 },
                end: { line: 643, column: 65 },
              },
              81: {
                start: { line: 644, column: 20 },
                end: { line: 644, column: 46 },
              },
              82: {
                start: { line: 645, column: 8 },
                end: { line: 645, column: 45 },
              },
              83: {
                start: { line: 648, column: 24 },
                end: { line: 648, column: 65 },
              },
              84: {
                start: { line: 649, column: 8 },
                end: { line: 649, column: 37 },
              },
              85: {
                start: { line: 652, column: 24 },
                end: { line: 652, column: 65 },
              },
              86: {
                start: { line: 653, column: 8 },
                end: { line: 653, column: 53 },
              },
              87: {
                start: { line: 656, column: 24 },
                end: { line: 656, column: 65 },
              },
              88: {
                start: { line: 657, column: 25 },
                end: { line: 657, column: 44 },
              },
              89: {
                start: { line: 658, column: 30 },
                end: { line: 658, column: 77 },
              },
              90: {
                start: { line: 659, column: 8 },
                end: { line: 659, column: 85 },
              },
              91: {
                start: { line: 662, column: 24 },
                end: { line: 662, column: 65 },
              },
              92: {
                start: { line: 663, column: 8 },
                end: { line: 663, column: 43 },
              },
              93: {
                start: { line: 666, column: 20 },
                end: { line: 666, column: 46 },
              },
              94: {
                start: { line: 667, column: 20 },
                end: { line: 667, column: 51 },
              },
              95: {
                start: { line: 668, column: 22 },
                end: { line: 668, column: 81 },
              },
              96: {
                start: { line: 669, column: 8 },
                end: { line: 669, column: 57 },
              },
              97: {
                start: { line: 672, column: 24 },
                end: { line: 672, column: 65 },
              },
              98: {
                start: { line: 673, column: 21 },
                end: { line: 673, column: 48 },
              },
              99: {
                start: { line: 674, column: 22 },
                end: { line: 674, column: 81 },
              },
              100: {
                start: { line: 675, column: 8 },
                end: { line: 675, column: 58 },
              },
              101: {
                start: { line: 678, column: 8 },
                end: { line: 678, column: 51 },
              },
              102: {
                start: { line: 681, column: 8 },
                end: { line: 681, column: 134 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 7, column: 6 },
                  end: { line: 7, column: 7 },
                },
                loc: {
                  start: { line: 7, column: 38 },
                  end: { line: 25, column: 5 },
                },
                line: 7,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 28, column: 6 },
                  end: { line: 28, column: 7 },
                },
                loc: {
                  start: { line: 28, column: 57 },
                  end: { line: 58, column: 5 },
                },
                line: 28,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 61, column: 6 },
                  end: { line: 61, column: 7 },
                },
                loc: {
                  start: { line: 61, column: 38 },
                  end: { line: 71, column: 5 },
                },
                line: 61,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 74, column: 6 },
                  end: { line: 74, column: 7 },
                },
                loc: {
                  start: { line: 74, column: 36 },
                  end: { line: 86, column: 5 },
                },
                line: 74,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 89, column: 6 },
                  end: { line: 89, column: 7 },
                },
                loc: {
                  start: { line: 89, column: 22 },
                  end: { line: 256, column: 5 },
                },
                line: 89,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 259, column: 6 },
                  end: { line: 259, column: 7 },
                },
                loc: {
                  start: { line: 259, column: 27 },
                  end: { line: 279, column: 5 },
                },
                line: 259,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 282, column: 6 },
                  end: { line: 282, column: 7 },
                },
                loc: {
                  start: { line: 282, column: 26 },
                  end: { line: 321, column: 5 },
                },
                line: 282,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 324, column: 6 },
                  end: { line: 324, column: 7 },
                },
                loc: {
                  start: { line: 324, column: 28 },
                  end: { line: 366, column: 5 },
                },
                line: 324,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 369, column: 6 },
                  end: { line: 369, column: 7 },
                },
                loc: {
                  start: { line: 369, column: 24 },
                  end: { line: 425, column: 5 },
                },
                line: 369,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 428, column: 6 },
                  end: { line: 428, column: 7 },
                },
                loc: {
                  start: { line: 428, column: 28 },
                  end: { line: 479, column: 5 },
                },
                line: 428,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 482, column: 6 },
                  end: { line: 482, column: 7 },
                },
                loc: {
                  start: { line: 482, column: 45 },
                  end: { line: 492, column: 5 },
                },
                line: 482,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 489, column: 152 },
                  end: { line: 489, column: 153 },
                },
                loc: {
                  start: { line: 489, column: 159 },
                  end: { line: 489, column: 209 },
                },
                line: 489,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 495, column: 6 },
                  end: { line: 495, column: 7 },
                },
                loc: {
                  start: { line: 495, column: 34 },
                  end: { line: 518, column: 5 },
                },
                line: 495,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 512, column: 38 },
                  end: { line: 512, column: 39 },
                },
                loc: {
                  start: { line: 512, column: 49 },
                  end: { line: 512, column: 152 },
                },
                line: 512,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 521, column: 6 },
                  end: { line: 521, column: 7 },
                },
                loc: {
                  start: { line: 521, column: 29 },
                  end: { line: 600, column: 5 },
                },
                line: 521,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 603, column: 6 },
                  end: { line: 603, column: 7 },
                },
                loc: {
                  start: { line: 603, column: 23 },
                  end: { line: 607, column: 5 },
                },
                line: 603,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 610, column: 6 },
                  end: { line: 610, column: 7 },
                },
                loc: {
                  start: { line: 610, column: 53 },
                  end: { line: 612, column: 5 },
                },
                line: 610,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 613, column: 4 },
                  end: { line: 613, column: 5 },
                },
                loc: {
                  start: { line: 613, column: 17 },
                  end: { line: 615, column: 5 },
                },
                line: 613,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 620, column: 4 },
                  end: { line: 620, column: 5 },
                },
                loc: {
                  start: { line: 620, column: 41 },
                  end: { line: 631, column: 5 },
                },
                line: 620,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 632, column: 4 },
                  end: { line: 632, column: 5 },
                },
                loc: {
                  start: { line: 632, column: 42 },
                  end: { line: 635, column: 5 },
                },
                line: 632,
              },
              20: {
                name: '(anonymous_20)',
                decl: {
                  start: { line: 636, column: 4 },
                  end: { line: 636, column: 5 },
                },
                loc: {
                  start: { line: 636, column: 40 },
                  end: { line: 641, column: 5 },
                },
                line: 636,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 642, column: 4 },
                  end: { line: 642, column: 5 },
                },
                loc: {
                  start: { line: 642, column: 37 },
                  end: { line: 646, column: 5 },
                },
                line: 642,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 647, column: 4 },
                  end: { line: 647, column: 5 },
                },
                loc: {
                  start: { line: 647, column: 41 },
                  end: { line: 650, column: 5 },
                },
                line: 647,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 651, column: 4 },
                  end: { line: 651, column: 5 },
                },
                loc: {
                  start: { line: 651, column: 43 },
                  end: { line: 654, column: 5 },
                },
                line: 651,
              },
              24: {
                name: '(anonymous_24)',
                decl: {
                  start: { line: 655, column: 4 },
                  end: { line: 655, column: 5 },
                },
                loc: {
                  start: { line: 655, column: 42 },
                  end: { line: 660, column: 5 },
                },
                line: 655,
              },
              25: {
                name: '(anonymous_25)',
                decl: {
                  start: { line: 661, column: 4 },
                  end: { line: 661, column: 5 },
                },
                loc: {
                  start: { line: 661, column: 38 },
                  end: { line: 664, column: 5 },
                },
                line: 661,
              },
              26: {
                name: '(anonymous_26)',
                decl: {
                  start: { line: 665, column: 4 },
                  end: { line: 665, column: 5 },
                },
                loc: {
                  start: { line: 665, column: 38 },
                  end: { line: 670, column: 5 },
                },
                line: 665,
              },
              27: {
                name: '(anonymous_27)',
                decl: {
                  start: { line: 671, column: 4 },
                  end: { line: 671, column: 5 },
                },
                loc: {
                  start: { line: 671, column: 37 },
                  end: { line: 676, column: 5 },
                },
                line: 671,
              },
              28: {
                name: '(anonymous_28)',
                decl: {
                  start: { line: 677, column: 4 },
                  end: { line: 677, column: 5 },
                },
                loc: {
                  start: { line: 677, column: 44 },
                  end: { line: 679, column: 5 },
                },
                line: 677,
              },
              29: {
                name: '(anonymous_29)',
                decl: {
                  start: { line: 680, column: 4 },
                  end: { line: 680, column: 5 },
                },
                loc: {
                  start: { line: 680, column: 21 },
                  end: { line: 682, column: 5 },
                },
                line: 680,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 31, column: 24 },
                  end: { line: 31, column: 80 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 31, column: 48 },
                    end: { line: 31, column: 75 },
                  },
                  {
                    start: { line: 31, column: 78 },
                    end: { line: 31, column: 80 },
                  },
                ],
                line: 31,
              },
              1: {
                loc: {
                  start: { line: 32, column: 27 },
                  end: { line: 32, column: 92 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 32, column: 55 },
                    end: { line: 32, column: 87 },
                  },
                  {
                    start: { line: 32, column: 90 },
                    end: { line: 32, column: 92 },
                  },
                ],
                line: 32,
              },
              2: {
                loc: {
                  start: { line: 67, column: 8 },
                  end: { line: 69, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 67, column: 8 },
                    end: { line: 69, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 67,
              },
              3: {
                loc: {
                  start: { line: 67, column: 12 },
                  end: { line: 67, column: 99 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 67, column: 73 },
                    end: { line: 67, column: 79 },
                  },
                  {
                    start: { line: 67, column: 82 },
                    end: { line: 67, column: 99 },
                  },
                ],
                line: 67,
              },
              4: {
                loc: {
                  start: { line: 67, column: 12 },
                  end: { line: 67, column: 70 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 67, column: 12 },
                    end: { line: 67, column: 45 },
                  },
                  {
                    start: { line: 67, column: 49 },
                    end: { line: 67, column: 70 },
                  },
                ],
                line: 67,
              },
              5: {
                loc: {
                  start: { line: 76, column: 28 },
                  end: { line: 76, column: 99 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 76, column: 47 },
                    end: { line: 76, column: 71 },
                  },
                  {
                    start: { line: 76, column: 74 },
                    end: { line: 76, column: 99 },
                  },
                ],
                line: 76,
              },
              6: {
                loc: {
                  start: { line: 77, column: 33 },
                  end: { line: 77, column: 85 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 77, column: 54 },
                    end: { line: 77, column: 80 },
                  },
                  {
                    start: { line: 77, column: 83 },
                    end: { line: 77, column: 85 },
                  },
                ],
                line: 77,
              },
              7: {
                loc: {
                  start: { line: 78, column: 29 },
                  end: { line: 78, column: 80 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 78, column: 53 },
                    end: { line: 78, column: 75 },
                  },
                  {
                    start: { line: 78, column: 78 },
                    end: { line: 78, column: 80 },
                  },
                ],
                line: 78,
              },
              8: {
                loc: {
                  start: { line: 79, column: 33 },
                  end: { line: 79, column: 92 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 79, column: 61 },
                    end: { line: 79, column: 87 },
                  },
                  {
                    start: { line: 79, column: 90 },
                    end: { line: 79, column: 92 },
                  },
                ],
                line: 79,
              },
              9: {
                loc: {
                  start: { line: 80, column: 29 },
                  end: { line: 80, column: 52 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 80, column: 29 },
                    end: { line: 80, column: 46 },
                  },
                  {
                    start: { line: 80, column: 50 },
                    end: { line: 80, column: 52 },
                  },
                ],
                line: 80,
              },
              10: {
                loc: {
                  start: { line: 82, column: 8 },
                  end: { line: 84, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 82, column: 8 },
                    end: { line: 84, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 82,
              },
              11: {
                loc: {
                  start: { line: 85, column: 15 },
                  end: { line: 85, column: 118 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 85, column: 39 },
                    end: { line: 85, column: 72 },
                  },
                  {
                    start: { line: 85, column: 75 },
                    end: { line: 85, column: 118 },
                  },
                ],
                line: 85,
              },
              12: {
                loc: {
                  start: { line: 485, column: 8 },
                  end: { line: 488, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 485, column: 8 },
                    end: { line: 488, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 485,
              },
              13: {
                loc: {
                  start: { line: 489, column: 25 },
                  end: { line: 489, column: 232 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 489, column: 117 },
                    end: { line: 489, column: 227 },
                  },
                  {
                    start: { line: 489, column: 230 },
                    end: { line: 489, column: 232 },
                  },
                ],
                line: 489,
              },
              14: {
                loc: {
                  start: { line: 489, column: 26 },
                  end: { line: 489, column: 113 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 489, column: 87 },
                    end: { line: 489, column: 93 },
                  },
                  {
                    start: { line: 489, column: 96 },
                    end: { line: 489, column: 113 },
                  },
                ],
                line: 489,
              },
              15: {
                loc: {
                  start: { line: 489, column: 26 },
                  end: { line: 489, column: 84 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 489, column: 26 },
                    end: { line: 489, column: 59 },
                  },
                  {
                    start: { line: 489, column: 63 },
                    end: { line: 489, column: 84 },
                  },
                ],
                line: 489,
              },
              16: {
                loc: {
                  start: { line: 490, column: 29 },
                  end: { line: 490, column: 105 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 490, column: 48 },
                    end: { line: 490, column: 100 },
                  },
                  {
                    start: { line: 490, column: 103 },
                    end: { line: 490, column: 105 },
                  },
                ],
                line: 490,
              },
              17: {
                loc: {
                  start: { line: 509, column: 8 },
                  end: { line: 511, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 509, column: 8 },
                    end: { line: 511, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 509,
              },
              18: {
                loc: {
                  start: { line: 621, column: 35 },
                  end: { line: 621, column: 50 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 621, column: 35 },
                    end: { line: 621, column: 44 },
                  },
                  {
                    start: { line: 621, column: 48 },
                    end: { line: 621, column: 50 },
                  },
                ],
                line: 621,
              },
              19: {
                loc: {
                  start: { line: 623, column: 8 },
                  end: { line: 623, column: 57 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 623, column: 8 },
                    end: { line: 623, column: 57 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 623,
              },
              20: {
                loc: {
                  start: { line: 624, column: 8 },
                  end: { line: 624, column: 51 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 624, column: 8 },
                    end: { line: 624, column: 51 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 624,
              },
              21: {
                loc: {
                  start: { line: 625, column: 8 },
                  end: { line: 625, column: 52 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 625, column: 8 },
                    end: { line: 625, column: 52 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 625,
              },
              22: {
                loc: {
                  start: { line: 626, column: 8 },
                  end: { line: 626, column: 60 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 626, column: 8 },
                    end: { line: 626, column: 60 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 626,
              },
              23: {
                loc: {
                  start: { line: 627, column: 8 },
                  end: { line: 627, column: 53 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 627, column: 8 },
                    end: { line: 627, column: 53 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 627,
              },
              24: {
                loc: {
                  start: { line: 628, column: 8 },
                  end: { line: 628, column: 58 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 628, column: 8 },
                    end: { line: 628, column: 58 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 628,
              },
              25: {
                loc: {
                  start: { line: 629, column: 8 },
                  end: { line: 629, column: 56 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 629, column: 8 },
                    end: { line: 629, column: 56 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 629,
              },
              26: {
                loc: {
                  start: { line: 634, column: 15 },
                  end: { line: 634, column: 49 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 634, column: 25 },
                    end: { line: 634, column: 44 },
                  },
                  {
                    start: { line: 634, column: 47 },
                    end: { line: 634, column: 49 },
                  },
                ],
                line: 634,
              },
              27: {
                loc: {
                  start: { line: 637, column: 40 },
                  end: { line: 637, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 637, column: 40 },
                    end: { line: 637, column: 50 },
                  },
                  {
                    start: { line: 637, column: 54 },
                    end: { line: 637, column: 55 },
                  },
                ],
                line: 637,
              },
              28: {
                loc: {
                  start: { line: 644, column: 20 },
                  end: { line: 644, column: 46 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 644, column: 35 },
                    end: { line: 644, column: 39 },
                  },
                  {
                    start: { line: 644, column: 42 },
                    end: { line: 644, column: 46 },
                  },
                ],
                line: 644,
              },
              29: {
                loc: {
                  start: { line: 657, column: 25 },
                  end: { line: 657, column: 44 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 657, column: 25 },
                    end: { line: 657, column: 38 },
                  },
                  {
                    start: { line: 657, column: 42 },
                    end: { line: 657, column: 44 },
                  },
                ],
                line: 657,
              },
              30: {
                loc: {
                  start: { line: 658, column: 30 },
                  end: { line: 658, column: 77 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 658, column: 41 },
                    end: { line: 658, column: 72 },
                  },
                  {
                    start: { line: 658, column: 75 },
                    end: { line: 658, column: 77 },
                  },
                ],
                line: 658,
              },
              31: {
                loc: {
                  start: { line: 666, column: 20 },
                  end: { line: 666, column: 46 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 666, column: 20 },
                    end: { line: 666, column: 28 },
                  },
                  {
                    start: { line: 666, column: 32 },
                    end: { line: 666, column: 40 },
                  },
                  {
                    start: { line: 666, column: 44 },
                    end: { line: 666, column: 46 },
                  },
                ],
                line: 666,
              },
              32: {
                loc: {
                  start: { line: 667, column: 36 },
                  end: { line: 667, column: 50 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 667, column: 36 },
                    end: { line: 667, column: 44 },
                  },
                  {
                    start: { line: 667, column: 48 },
                    end: { line: 667, column: 50 },
                  },
                ],
                line: 667,
              },
              33: {
                loc: {
                  start: { line: 668, column: 22 },
                  end: { line: 668, column: 81 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 668, column: 35 },
                    end: { line: 668, column: 76 },
                  },
                  {
                    start: { line: 668, column: 79 },
                    end: { line: 668, column: 81 },
                  },
                ],
                line: 668,
              },
              34: {
                loc: {
                  start: { line: 673, column: 21 },
                  end: { line: 673, column: 48 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 673, column: 21 },
                    end: { line: 673, column: 29 },
                  },
                  {
                    start: { line: 673, column: 33 },
                    end: { line: 673, column: 42 },
                  },
                  {
                    start: { line: 673, column: 46 },
                    end: { line: 673, column: 48 },
                  },
                ],
                line: 673,
              },
              35: {
                loc: {
                  start: { line: 674, column: 22 },
                  end: { line: 674, column: 81 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 674, column: 35 },
                    end: { line: 674, column: 76 },
                  },
                  {
                    start: { line: 674, column: 79 },
                    end: { line: 674, column: 81 },
                  },
                ],
                line: 674,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
              94: 0,
              95: 0,
              96: 0,
              97: 0,
              98: 0,
              99: 0,
              100: 0,
              101: 0,
              102: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0],
              28: [0, 0],
              29: [0, 0],
              30: [0, 0],
              31: [0, 0, 0],
              32: [0, 0],
              33: [0, 0],
              34: [0, 0, 0],
              35: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/html-export-service.ts',
              ],
              sourcesContent: [
                "import { BaseContentProcessor, BaseExportService } from './base-export-service'\nimport { type Note } from '../../types/note'\nimport {\n  type ExportOptions,\n  type ExportResult,\n  type HTMLExportOptions,\n} from '../../types/export'\n\n/**\n * HTML export service for creating standalone web documents\n */\nexport class HTMLExportService extends BaseExportService {\n  constructor() {\n    super(new HTMLContentProcessor())\n  }\n\n  /**\n   * Export note to HTML format\n   */\n  async exportNote(note: Note, options: ExportOptions): Promise<ExportResult> {\n    const htmlOptions = options as HTMLExportOptions\n\n    // Process content to HTML\n    const content = this.parseContent(note.content)\n    const htmlContent = await this.contentProcessor.processContent(\n      content,\n      options\n    )\n\n    // Generate complete HTML document\n    const fullHtml = await this.generateHTMLDocument(\n      note,\n      htmlContent,\n      htmlOptions\n    )\n\n    const filename = this.generateFilename(note, options)\n    const result: ExportResult = {\n      content: fullHtml,\n      filename,\n      mimeType: 'text/html',\n      size: Buffer.byteLength(fullHtml, 'utf8'),\n      format: 'html',\n      exportedAt: new Date().toISOString(),\n    }\n\n    await this.saveToHistory(note, options, result)\n    return result\n  }\n\n  /**\n   * Generate complete HTML document\n   */\n  private async generateHTMLDocument(\n    note: Note,\n    content: string,\n    options: HTMLExportOptions\n  ): Promise<string> {\n    const metadata = this.generateMetadata(note, options)\n    const styles = await this.generateStyles(options)\n    const scripts = options.includeSearch ? this.generateSearchScript() : ''\n    const navigation = options.includeNavigation\n      ? this.generateNavigation(content)\n      : ''\n\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${this.escapeHtml(note.title)}</title>\n    ${metadata}\n    ${styles}\n</head>\n<body>\n    <div class=\"container\">\n        ${navigation}\n        <main class=\"content\">\n            <header class=\"note-header\">\n                <h1>${this.escapeHtml(note.title)}</h1>\n                ${this.generateMetadataSection(note, options)}\n            </header>\n            <article class=\"note-content\">\n                ${content}\n            </article>\n        </main>\n    </div>\n    ${scripts}\n</body>\n</html>`\n  }\n\n  /**\n   * Generate HTML metadata tags\n   */\n  private generateMetadata(note: Note, options: HTMLExportOptions): string {\n    let metadata = `\n    <meta name=\"generator\" content=\"Notable\">\n    <meta name=\"created\" content=\"${note.created_at}\">\n    <meta name=\"modified\" content=\"${note.updated_at}\">`\n\n    if (note.tags?.length) {\n      metadata += `\\n    <meta name=\"keywords\" content=\"${note.tags.join(', ')}\">`\n    }\n\n    return metadata\n  }\n\n  /**\n   * Generate CSS styles\n   */\n  private async generateStyles(options: HTMLExportOptions): Promise<string> {\n    const baseStyles = this.getBaseStyles()\n    const themeStyles = options.darkMode\n      ? this.getDarkModeStyles()\n      : this.getLightModeStyles()\n    const responsiveStyles = options.responsive\n      ? this.getResponsiveStyles()\n      : ''\n    const searchStyles = options.includeSearch ? this.getSearchStyles() : ''\n    const navigationStyles = options.includeNavigation\n      ? this.getNavigationStyles()\n      : ''\n    const customStyles = options.customCSS || ''\n\n    let allStyles = `${baseStyles}\\n${themeStyles}\\n${responsiveStyles}\\n${searchStyles}\\n${navigationStyles}`\n\n    if (customStyles) {\n      allStyles += `\\n${customStyles}`\n    }\n\n    return options.selfContained\n      ? `<style>\\n${allStyles}\\n</style>`\n      : `<link rel=\"stylesheet\" href=\"styles.css\">`\n  }\n\n  /**\n   * Generate base CSS styles\n   */\n  private getBaseStyles(): string {\n    return `\n/* Base Styles */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n  line-height: 1.6;\n  margin: 0;\n  padding: 0;\n  background: var(--bg-color);\n  color: var(--text-color);\n  transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.content {\n  background: var(--content-bg);\n  border-radius: 8px;\n  padding: 2rem;\n  box-shadow: 0 2px 10px var(--shadow-color);\n}\n\n.note-header {\n  border-bottom: 2px solid var(--border-color);\n  padding-bottom: 1rem;\n  margin-bottom: 2rem;\n}\n\n.note-header h1 {\n  margin: 0 0 1rem 0;\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: var(--heading-color);\n}\n\n.note-metadata {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  font-size: 0.875rem;\n  color: var(--meta-color);\n}\n\n.note-content {\n  font-size: 1.1rem;\n}\n\n/* Typography */\n.note-content h1, .note-content h2, .note-content h3, \n.note-content h4, .note-content h5, .note-content h6 {\n  color: var(--heading-color);\n  margin: 2rem 0 1rem 0;\n  font-weight: 600;\n}\n\n.note-content h1 { font-size: 2rem; }\n.note-content h2 { font-size: 1.75rem; }\n.note-content h3 { font-size: 1.5rem; }\n.note-content h4 { font-size: 1.25rem; }\n.note-content h5 { font-size: 1.1rem; }\n.note-content h6 { font-size: 1rem; }\n\n.note-content p {\n  margin: 1rem 0;\n}\n\n.note-content a {\n  color: var(--link-color);\n  text-decoration: none;\n}\n\n.note-content a:hover {\n  text-decoration: underline;\n}\n\n/* Lists */\n.note-content ul, .note-content ol {\n  margin: 1rem 0;\n  padding-left: 2rem;\n}\n\n.note-content li {\n  margin: 0.5rem 0;\n}\n\n/* Code */\n.note-content code {\n  background: var(--code-bg);\n  padding: 0.2rem 0.4rem;\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n  font-size: 0.9em;\n}\n\n.note-content pre {\n  background: var(--code-bg);\n  padding: 1rem;\n  border-radius: 6px;\n  overflow-x: auto;\n  margin: 1rem 0;\n}\n\n.note-content pre code {\n  background: none;\n  padding: 0;\n}\n\n/* Blockquotes */\n.note-content blockquote {\n  border-left: 4px solid var(--accent-color);\n  margin: 1rem 0;\n  padding: 0.5rem 0 0.5rem 1rem;\n  background: var(--quote-bg);\n  font-style: italic;\n}\n\n/* Tables */\n.note-content table {\n  width: 100%;\n  border-collapse: collapse;\n  margin: 1rem 0;\n}\n\n.note-content th, .note-content td {\n  border: 1px solid var(--border-color);\n  padding: 0.75rem;\n  text-align: left;\n}\n\n.note-content th {\n  background: var(--table-header-bg);\n  font-weight: 600;\n}\n\n/* Images */\n.note-content img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 6px;\n  margin: 1rem 0;\n}\n\n/* Tags */\n.tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.tag {\n  background: var(--tag-bg);\n  color: var(--tag-color);\n  padding: 0.25rem 0.75rem;\n  border-radius: 1rem;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n`\n  }\n\n  /**\n   * Generate light mode styles\n   */\n  private getLightModeStyles(): string {\n    return `\n/* Light Mode */\n:root {\n  --bg-color: #f8fafc;\n  --content-bg: #ffffff;\n  --text-color: #1f2937;\n  --heading-color: #111827;\n  --meta-color: #6b7280;\n  --link-color: #3b82f6;\n  --border-color: #e5e7eb;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n  --accent-color: #3b82f6;\n  --code-bg: #f3f4f6;\n  --quote-bg: #f9fafb;\n  --table-header-bg: #f3f4f6;\n  --tag-bg: #dbeafe;\n  --tag-color: #1e40af;\n}\n`\n  }\n\n  /**\n   * Generate dark mode styles\n   */\n  private getDarkModeStyles(): string {\n    return `\n/* Dark Mode */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg-color: #0f172a;\n    --content-bg: #1e293b;\n    --text-color: #e2e8f0;\n    --heading-color: #f1f5f9;\n    --meta-color: #94a3b8;\n    --link-color: #60a5fa;\n    --border-color: #374151;\n    --shadow-color: rgba(0, 0, 0, 0.3);\n    --accent-color: #60a5fa;\n    --code-bg: #374151;\n    --quote-bg: #2d3748;\n    --table-header-bg: #374151;\n    --tag-bg: #1e3a8a;\n    --tag-color: #bfdbfe;\n  }\n}\n\n.dark-mode {\n  --bg-color: #0f172a;\n  --content-bg: #1e293b;\n  --text-color: #e2e8f0;\n  --heading-color: #f1f5f9;\n  --meta-color: #94a3b8;\n  --link-color: #60a5fa;\n  --border-color: #374151;\n  --shadow-color: rgba(0, 0, 0, 0.3);\n  --accent-color: #60a5fa;\n  --code-bg: #374151;\n  --quote-bg: #2d3748;\n  --table-header-bg: #374151;\n  --tag-bg: #1e3a8a;\n  --tag-color: #bfdbfe;\n}\n`\n  }\n\n  /**\n   * Generate responsive styles\n   */\n  private getResponsiveStyles(): string {\n    return `\n/* Responsive Styles */\n@media (max-width: 768px) {\n  .container {\n    padding: 1rem;\n  }\n\n  .content {\n    padding: 1rem;\n  }\n\n  .note-header h1 {\n    font-size: 2rem;\n  }\n\n  .note-content {\n    font-size: 1rem;\n  }\n\n  .note-metadata {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .navigation {\n    position: relative !important;\n    width: 100% !important;\n    margin-bottom: 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .note-header h1 {\n    font-size: 1.75rem;\n  }\n\n  .note-content h1 { font-size: 1.75rem; }\n  .note-content h2 { font-size: 1.5rem; }\n  .note-content h3 { font-size: 1.25rem; }\n}\n`\n  }\n\n  /**\n   * Generate search functionality styles\n   */\n  private getSearchStyles(): string {\n    return `\n/* Search Styles */\n.search-container {\n  margin-bottom: 2rem;\n  position: relative;\n}\n\n.search-input {\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 2px solid var(--border-color);\n  border-radius: 6px;\n  font-size: 1rem;\n  background: var(--content-bg);\n  color: var(--text-color);\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.search-results {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  background: var(--content-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  max-height: 200px;\n  overflow-y: auto;\n  z-index: 10;\n  display: none;\n}\n\n.search-result {\n  padding: 0.75rem 1rem;\n  cursor: pointer;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.search-result:hover {\n  background: var(--quote-bg);\n}\n\n.search-result:last-child {\n  border-bottom: none;\n}\n\n.highlight {\n  background: yellow;\n  color: black;\n}\n`\n  }\n\n  /**\n   * Generate navigation styles\n   */\n  private getNavigationStyles(): string {\n    return `\n/* Navigation Styles */\n.navigation {\n  position: sticky;\n  top: 2rem;\n  float: right;\n  width: 250px;\n  margin-left: 2rem;\n  background: var(--content-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  padding: 1rem;\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.navigation h3 {\n  margin: 0 0 1rem 0;\n  font-size: 1rem;\n  color: var(--heading-color);\n}\n\n.navigation ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.navigation li {\n  margin: 0.25rem 0;\n}\n\n.navigation a {\n  color: var(--meta-color);\n  text-decoration: none;\n  font-size: 0.875rem;\n  line-height: 1.4;\n}\n\n.navigation a:hover {\n  color: var(--link-color);\n}\n\n.navigation .level-1 { padding-left: 0; }\n.navigation .level-2 { padding-left: 1rem; }\n.navigation .level-3 { padding-left: 2rem; }\n.navigation .level-4 { padding-left: 3rem; }\n.navigation .level-5 { padding-left: 4rem; }\n.navigation .level-6 { padding-left: 5rem; }\n`\n  }\n\n  /**\n   * Generate metadata section HTML\n   */\n  private generateMetadataSection(\n    note: Note,\n    options: HTMLExportOptions\n  ): string {\n    const parts: string[] = []\n\n    if (options.includeDates) {\n      parts.push(\n        `<span>Created: ${new Date(note.created_at).toLocaleDateString()}</span>`\n      )\n      parts.push(\n        `<span>Updated: ${new Date(note.updated_at).toLocaleDateString()}</span>`\n      )\n    }\n\n    const tagsHtml = note.tags?.length\n      ? `<div class=\"tags\">${note.tags.map((tag) => `<span class=\"tag\">${this.escapeHtml(tag)}</span>`).join('')}</div>`\n      : ''\n\n    const metadataHtml =\n      parts.length > 0\n        ? `<div class=\"note-metadata\">${parts.join('')}</div>`\n        : ''\n\n    return `${metadataHtml}${tagsHtml}`\n  }\n\n  /**\n   * Generate navigation from content headings\n   */\n  private generateNavigation(content: string): string {\n    const headingRegex = /<h([1-6])(?:[^>]*)>([^<]+)<\\/h[1-6]>/gi\n    const headings: Array<{ level: number; text: string; id: string }> = []\n\n    let match\n    while ((match = headingRegex.exec(content)) !== null) {\n      const level = parseInt(match[1])\n      const text = match[2].trim()\n      const id = text\n        .toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n      headings.push({ level, text, id })\n    }\n\n    if (headings.length === 0) {\n      return ''\n    }\n\n    const navItems = headings\n      .map(\n        (heading) =>\n          `<li class=\"level-${heading.level}\"><a href=\"#${heading.id}\">${this.escapeHtml(heading.text)}</a></li>`\n      )\n      .join('')\n\n    return `\n    <nav class=\"navigation\">\n      <h3>Table of Contents</h3>\n      <ul>${navItems}</ul>\n    </nav>`\n  }\n\n  /**\n   * Generate search script\n   */\n  private generateSearchScript(): string {\n    return `\n    <script>\n      // Simple search functionality\n      function initSearch() {\n        const searchInput = document.createElement('input');\n        searchInput.type = 'text';\n        searchInput.className = 'search-input';\n        searchInput.placeholder = 'Search in document...';\n        \n        const searchContainer = document.createElement('div');\n        searchContainer.className = 'search-container';\n        searchContainer.appendChild(searchInput);\n        \n        const content = document.querySelector('.content');\n        content.insertBefore(searchContainer, content.firstChild);\n        \n        searchInput.addEventListener('input', function(e) {\n          const query = e.target.value.toLowerCase();\n          const textNodes = getTextNodes(document.querySelector('.note-content'));\n          \n          // Clear previous highlights\n          clearHighlights();\n          \n          if (query.length > 2) {\n            highlightText(textNodes, query);\n          }\n        });\n      }\n      \n      function getTextNodes(element) {\n        const textNodes = [];\n        const walker = document.createTreeWalker(\n          element,\n          NodeFilter.SHOW_TEXT,\n          null,\n          false\n        );\n        \n        let node;\n        while (node = walker.nextNode()) {\n          textNodes.push(node);\n        }\n        \n        return textNodes;\n      }\n      \n      function highlightText(textNodes, query) {\n        textNodes.forEach(node => {\n          const text = node.textContent.toLowerCase();\n          if (text.includes(query)) {\n            const parent = node.parentNode;\n            const html = node.textContent.replace(\n              new RegExp(query, 'gi'), \n              '<span class=\"highlight\">$&</span>'\n            );\n            const wrapper = document.createElement('span');\n            wrapper.innerHTML = html;\n            parent.replaceChild(wrapper, node);\n          }\n        });\n      }\n      \n      function clearHighlights() {\n        const highlights = document.querySelectorAll('.highlight');\n        highlights.forEach(highlight => {\n          const parent = highlight.parentNode;\n          parent.replaceChild(document.createTextNode(highlight.textContent), highlight);\n          parent.normalize();\n        });\n      }\n      \n      // Initialize when DOM is ready\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initSearch);\n      } else {\n        initSearch();\n      }\n    <\/script>`\n  }\n\n  /**\n   * Escape HTML characters\n   */\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n\n  /**\n   * Validate HTML-specific options\n   */\n  protected validateFormatSpecificOptions(\n    options: ExportOptions,\n    errors: string[]\n  ): void {\n    // HTML options are generally flexible, no strict validation needed\n  }\n}\n\n/**\n * HTML content processor for Plate.js nodes\n */\nexport class HTMLContentProcessor extends BaseContentProcessor {\n  protected async processTextNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    let text = this.escapeHtml(node.text || '')\n\n    // Apply text formatting with HTML tags\n    if (node.bold) text = `<strong>${text}</strong>`\n    if (node.italic) text = `<em>${text}</em>`\n    if (node.underline) text = `<u>${text}</u>`\n    if (node.strikethrough) text = `<del>${text}</del>`\n    if (node.code) text = `<code>${text}</code>`\n    if (node.superscript) text = `<sup>${text}</sup>`\n    if (node.subscript) text = `<sub>${text}</sub>`\n\n    return text\n  }\n\n  protected async processParagraph(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return content ? `<p>${content}</p>` : ''\n  }\n\n  protected async processHeading(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const level = Math.min(Math.max(node.level || 1, 1), 6)\n    const content = await this.processChildren(node, options)\n    const id = content\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n    return `<h${level} id=\"${id}\">${content}</h${level}>`\n  }\n\n  protected async processList(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const tag = node.ordered ? 'ol' : 'ul'\n    return `<${tag}>${content}</${tag}>`\n  }\n\n  protected async processListItem(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `<li>${content}</li>`\n  }\n\n  protected async processBlockquote(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `<blockquote>${content}</blockquote>`\n  }\n\n  protected async processCodeBlock(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const language = node.language || ''\n    const languageClass = language ? ` class=\"language-${language}\"` : ''\n    return `<pre><code${languageClass}>${this.escapeHtml(content)}</code></pre>`\n  }\n\n  protected async processTable(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `<table>${content}</table>`\n  }\n\n  protected async processImage(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const src = node.src || node.url || ''\n    const alt = this.escapeHtml(node.alt || '')\n    const title = node.title ? ` title=\"${this.escapeHtml(node.title)}\"` : ''\n    return `<img src=\"${src}\" alt=\"${alt}\"${title}>`\n  }\n\n  protected async processLink(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const href = node.url || node.href || ''\n    const title = node.title ? ` title=\"${this.escapeHtml(node.title)}\"` : ''\n    return `<a href=\"${href}\"${title}>${content}</a>`\n  }\n\n  protected async processGenericNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    return this.processChildren(node, options)\n  }\n\n  private escapeHtml(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;')\n  }\n}\n",
              ],
              names: [
                'BaseContentProcessor',
                'BaseExportService',
                'HTMLExportService',
                'exportNote',
                'note',
                'options',
                'htmlOptions',
                'content',
                'parseContent',
                'htmlContent',
                'contentProcessor',
                'processContent',
                'fullHtml',
                'generateHTMLDocument',
                'filename',
                'generateFilename',
                'result',
                'mimeType',
                'size',
                'Buffer',
                'byteLength',
                'format',
                'exportedAt',
                'Date',
                'toISOString',
                'saveToHistory',
                'metadata',
                'generateMetadata',
                'styles',
                'generateStyles',
                'scripts',
                'includeSearch',
                'generateSearchScript',
                'navigation',
                'includeNavigation',
                'generateNavigation',
                'escapeHtml',
                'title',
                'generateMetadataSection',
                'created_at',
                'updated_at',
                'tags',
                'length',
                'join',
                'baseStyles',
                'getBaseStyles',
                'themeStyles',
                'darkMode',
                'getDarkModeStyles',
                'getLightModeStyles',
                'responsiveStyles',
                'responsive',
                'getResponsiveStyles',
                'searchStyles',
                'getSearchStyles',
                'navigationStyles',
                'getNavigationStyles',
                'customStyles',
                'customCSS',
                'allStyles',
                'selfContained',
                'parts',
                'includeDates',
                'push',
                'toLocaleDateString',
                'tagsHtml',
                'map',
                'tag',
                'metadataHtml',
                'headingRegex',
                'headings',
                'match',
                'exec',
                'level',
                'parseInt',
                'text',
                'trim',
                'id',
                'toLowerCase',
                'replace',
                'navItems',
                'heading',
                'div',
                'document',
                'createElement',
                'textContent',
                'innerHTML',
                'validateFormatSpecificOptions',
                'errors',
                'constructor',
                'HTMLContentProcessor',
                'processTextNode',
                'node',
                'bold',
                'italic',
                'underline',
                'strikethrough',
                'code',
                'superscript',
                'subscript',
                'processParagraph',
                'processChildren',
                'processHeading',
                'Math',
                'min',
                'max',
                'processList',
                'ordered',
                'processListItem',
                'processBlockquote',
                'processCodeBlock',
                'language',
                'languageClass',
                'processTable',
                'processImage',
                'src',
                'url',
                'alt',
                'processLink',
                'href',
                'processGenericNode',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '3e79b4aae9e08dbe5d19ed9bdc98b68e6d724b09',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '3e79b4aae9e08dbe5d19ed9bdc98b68e6d724b09' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_23lzboizxw = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_23lzboizxw()
      __webpack_require__(
        '../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js'
      ).Buffer
      function cov_rxdgvvp5v() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/react-export-service.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/react-export-service.ts',
            statementMap: {
              0: {
                start: { line: 8, column: 29 },
                end: { line: 8, column: 36 },
              },
              1: {
                start: { line: 10, column: 24 },
                end: { line: 10, column: 55 },
              },
              2: {
                start: { line: 11, column: 27 },
                end: { line: 11, column: 87 },
              },
              3: {
                start: { line: 13, column: 30 },
                end: { line: 13, column: 95 },
              },
              4: {
                start: { line: 14, column: 25 },
                end: { line: 14, column: 61 },
              },
              5: {
                start: { line: 15, column: 23 },
                end: { line: 22, column: 9 },
              },
              6: {
                start: { line: 24, column: 8 },
                end: { line: 32, column: 9 },
              },
              7: {
                start: { line: 25, column: 12 },
                end: { line: 31, column: 14 },
              },
              8: {
                start: { line: 33, column: 8 },
                end: { line: 33, column: 56 },
              },
              9: {
                start: { line: 34, column: 8 },
                end: { line: 34, column: 22 },
              },
              10: {
                start: { line: 39, column: 24 },
                end: { line: 39, column: 53 },
              },
              11: {
                start: { line: 40, column: 31 },
                end: { line: 40, column: 73 },
              },
              12: {
                start: { line: 41, column: 30 },
                end: { line: 41, column: 93 },
              },
              13: {
                start: { line: 42, column: 24 },
                end: { line: 42, column: 53 },
              },
              14: {
                start: { line: 43, column: 25 },
                end: { line: 43, column: 64 },
              },
              15: {
                start: { line: 44, column: 29 },
                end: { line: 44, column: 50 },
              },
              16: {
                start: { line: 45, column: 26 },
                end: { line: 45, column: 54 },
              },
              17: {
                start: { line: 46, column: 24 },
                end: { line: 46, column: 26 },
              },
              18: {
                start: { line: 47, column: 8 },
                end: { line: 51, column: 9 },
              },
              19: {
                start: { line: 48, column: 12 },
                end: { line: 48, column: 128 },
              },
              20: {
                start: { line: 50, column: 12 },
                end: { line: 50, column: 123 },
              },
              21: {
                start: { line: 52, column: 30 },
                end: { line: 52, column: 95 },
              },
              22: {
                start: { line: 53, column: 8 },
                end: { line: 53, column: 81 },
              },
              23: {
                start: { line: 58, column: 24 },
                end: { line: 60, column: 9 },
              },
              24: {
                start: { line: 61, column: 8 },
                end: { line: 63, column: 9 },
              },
              25: {
                start: { line: 62, column: 12 },
                end: { line: 62, column: 38 },
              },
              26: {
                start: { line: 64, column: 28 },
                end: { line: 64, column: 71 },
              },
              27: {
                start: { line: 65, column: 34 },
                end: { line: 65, column: 36 },
              },
              28: {
                start: { line: 66, column: 8 },
                end: { line: 70, column: 9 },
              },
              29: {
                start: { line: 67, column: 12 },
                end: { line: 67, column: 77 },
              },
              30: {
                start: { line: 68, column: 15 },
                end: { line: 70, column: 9 },
              },
              31: {
                start: { line: 69, column: 12 },
                end: { line: 69, column: 86 },
              },
              32: {
                start: { line: 71, column: 8 },
                end: { line: 73, column: 9 },
              },
              33: {
                start: { line: 72, column: 12 },
                end: { line: 72, column: 73 },
              },
              34: {
                start: { line: 74, column: 8 },
                end: { line: 77, column: 21 },
              },
              35: {
                start: { line: 83, column: 8 },
                end: { line: 85, column: 9 },
              },
              36: {
                start: { line: 84, column: 12 },
                end: { line: 84, column: 22 },
              },
              37: {
                start: { line: 86, column: 30 },
                end: { line: 86, column: 106 },
              },
              38: {
                start: { line: 87, column: 22 },
                end: { line: 90, column: 9 },
              },
              39: {
                start: { line: 91, column: 8 },
                end: { line: 93, column: 9 },
              },
              40: {
                start: { line: 92, column: 12 },
                end: { line: 92, column: 46 },
              },
              41: {
                start: { line: 94, column: 8 },
                end: { line: 96, column: 9 },
              },
              42: {
                start: { line: 95, column: 12 },
                end: { line: 95, column: 45 },
              },
              43: {
                start: { line: 97, column: 8 },
                end: { line: 99, column: 3 },
              },
              44: {
                start: { line: 104, column: 26 },
                end: { line: 104, column: 111 },
              },
              45: {
                start: { line: 105, column: 34 },
                end: { line: 105, column: 68 },
              },
              46: {
                start: { line: 106, column: 8 },
                end: { line: 119, column: 33 },
              },
              47: {
                start: { line: 124, column: 26 },
                end: { line: 124, column: 111 },
              },
              48: {
                start: { line: 125, column: 8 },
                end: { line: 142, column: 33 },
              },
              49: {
                start: { line: 148, column: 22 },
                end: { line: 148, column: 24 },
              },
              50: {
                start: { line: 149, column: 8 },
                end: { line: 149, column: 101 },
              },
              51: {
                start: { line: 150, column: 8 },
                end: { line: 157, column: 9 },
              },
              52: {
                start: { line: 151, column: 12 },
                end: { line: 156, column: 11 },
              },
              53: {
                start: { line: 158, column: 8 },
                end: { line: 165, column: 9 },
              },
              54: {
                start: { line: 159, column: 28 },
                end: { line: 159, column: 159 },
              },
              55: {
                start: { line: 159, column: 49 },
                end: { line: 159, column: 137 },
              },
              56: {
                start: { line: 160, column: 12 },
                end: { line: 164, column: 11 },
              },
              57: {
                start: { line: 166, column: 8 },
                end: { line: 166, column: 145 },
              },
              58: {
                start: { line: 171, column: 8 },
                end: { line: 212, column: 9 },
              },
              59: {
                start: { line: 173, column: 16 },
                end: { line: 181, column: 18 },
              },
              60: {
                start: { line: 183, column: 16 },
                end: { line: 191, column: 18 },
              },
              61: {
                start: { line: 193, column: 16 },
                end: { line: 201, column: 18 },
              },
              62: {
                start: { line: 203, column: 16 },
                end: { line: 211, column: 18 },
              },
              63: {
                start: { line: 217, column: 24 },
                end: { line: 217, column: 53 },
              },
              64: {
                start: { line: 218, column: 8 },
                end: { line: 218, column: 38 },
              },
              65: {
                start: { line: 223, column: 22 },
                end: { line: 226, column: 9 },
              },
              66: {
                start: { line: 227, column: 8 },
                end: { line: 229, column: 9 },
              },
              67: {
                start: { line: 228, column: 12 },
                end: { line: 228, column: 43 },
              },
              68: {
                start: { line: 230, column: 8 },
                end: { line: 232, column: 9 },
              },
              69: {
                start: { line: 231, column: 12 },
                end: { line: 231, column: 42 },
              },
              70: {
                start: { line: 233, column: 26 },
                end: { line: 233, column: 108 },
              },
              71: {
                start: { line: 234, column: 8 },
                end: { line: 234, column: 53 },
              },
              72: {
                start: { line: 239, column: 8 },
                end: { line: 241, column: 9 },
              },
              73: {
                start: { line: 240, column: 12 },
                end: { line: 240, column: 22 },
              },
              74: {
                start: { line: 242, column: 26 },
                end: { line: 245, column: 9 },
              },
              75: {
                start: { line: 246, column: 8 },
                end: { line: 248, column: 9 },
              },
              76: {
                start: { line: 247, column: 12 },
                end: { line: 247, column: 56 },
              },
              77: {
                start: { line: 249, column: 8 },
                end: { line: 251, column: 9 },
              },
              78: {
                start: { line: 250, column: 12 },
                end: { line: 250, column: 55 },
              },
              79: {
                start: { line: 252, column: 8 },
                end: { line: 254, column: 3 },
              },
              80: {
                start: { line: 259, column: 8 },
                end: { line: 404, column: 3 },
              },
              81: {
                start: { line: 409, column: 22 },
                end: { line: 409, column: 24 },
              },
              82: {
                start: { line: 410, column: 8 },
                end: { line: 412, column: 9 },
              },
              83: {
                start: { line: 411, column: 12 },
                end: { line: 411, column: 113 },
              },
              84: {
                start: { line: 413, column: 8 },
                end: { line: 415, column: 9 },
              },
              85: {
                start: { line: 414, column: 12 },
                end: { line: 414, column: 85 },
              },
              86: {
                start: { line: 416, column: 8 },
                end: { line: 416, column: 82 },
              },
              87: {
                start: { line: 417, column: 8 },
                end: { line: 417, column: 78 },
              },
              88: {
                start: { line: 418, column: 8 },
                end: { line: 441, column: 2 },
              },
              89: {
                start: { line: 447, column: 22 },
                end: { line: 447, column: 71 },
              },
              90: {
                start: { line: 449, column: 27 },
                end: { line: 449, column: 131 },
              },
              91: {
                start: { line: 449, column: 48 },
                end: { line: 449, column: 63 },
              },
              92: {
                start: { line: 449, column: 77 },
                end: { line: 449, column: 121 },
              },
              93: {
                start: { line: 451, column: 8 },
                end: { line: 453, column: 9 },
              },
              94: {
                start: { line: 452, column: 12 },
                end: { line: 452, column: 35 },
              },
              95: {
                start: { line: 454, column: 8 },
                end: { line: 454, column: 26 },
              },
              96: {
                start: { line: 459, column: 8 },
                end: { line: 459, column: 182 },
              },
              97: {
                start: { line: 464, column: 29 },
                end: { line: 464, column: 36 },
              },
              98: {
                start: { line: 465, column: 8 },
                end: { line: 470, column: 9 },
              },
              99: {
                start: { line: 466, column: 32 },
                end: { line: 466, column: 86 },
              },
              100: {
                start: { line: 467, column: 12 },
                end: { line: 469, column: 13 },
              },
              101: {
                start: { line: 468, column: 16 },
                end: { line: 468, column: 96 },
              },
              102: {
                start: { line: 473, column: 8 },
                end: { line: 473, column: 43 },
              },
              103: {
                start: { line: 480, column: 19 },
                end: { line: 480, column: 50 },
              },
              104: {
                start: { line: 482, column: 8 },
                end: { line: 482, column: 57 },
              },
              105: {
                start: { line: 482, column: 23 },
                end: { line: 482, column: 57 },
              },
              106: {
                start: { line: 483, column: 8 },
                end: { line: 483, column: 51 },
              },
              107: {
                start: { line: 483, column: 25 },
                end: { line: 483, column: 51 },
              },
              108: {
                start: { line: 484, column: 8 },
                end: { line: 484, column: 52 },
              },
              109: {
                start: { line: 484, column: 28 },
                end: { line: 484, column: 52 },
              },
              110: {
                start: { line: 485, column: 8 },
                end: { line: 485, column: 60 },
              },
              111: {
                start: { line: 485, column: 32 },
                end: { line: 485, column: 60 },
              },
              112: {
                start: { line: 486, column: 8 },
                end: { line: 486, column: 53 },
              },
              113: {
                start: { line: 486, column: 23 },
                end: { line: 486, column: 53 },
              },
              114: {
                start: { line: 487, column: 8 },
                end: { line: 487, column: 58 },
              },
              115: {
                start: { line: 487, column: 30 },
                end: { line: 487, column: 58 },
              },
              116: {
                start: { line: 488, column: 8 },
                end: { line: 488, column: 56 },
              },
              117: {
                start: { line: 488, column: 28 },
                end: { line: 488, column: 56 },
              },
              118: {
                start: { line: 489, column: 8 },
                end: { line: 489, column: 20 },
              },
              119: {
                start: { line: 492, column: 24 },
                end: { line: 492, column: 65 },
              },
              120: {
                start: { line: 493, column: 8 },
                end: { line: 493, column: 58 },
              },
              121: {
                start: { line: 496, column: 22 },
                end: { line: 496, column: 63 },
              },
              122: {
                start: { line: 497, column: 24 },
                end: { line: 497, column: 65 },
              },
              123: {
                start: { line: 498, column: 8 },
                end: { line: 498, column: 59 },
              },
              124: {
                start: { line: 501, column: 24 },
                end: { line: 501, column: 65 },
              },
              125: {
                start: { line: 502, column: 20 },
                end: { line: 502, column: 46 },
              },
              126: {
                start: { line: 503, column: 8 },
                end: { line: 503, column: 65 },
              },
              127: {
                start: { line: 506, column: 24 },
                end: { line: 506, column: 65 },
              },
              128: {
                start: { line: 507, column: 8 },
                end: { line: 507, column: 47 },
              },
              129: {
                start: { line: 510, column: 24 },
                end: { line: 510, column: 65 },
              },
              130: {
                start: { line: 511, column: 8 },
                end: { line: 511, column: 61 },
              },
              131: {
                start: { line: 514, column: 24 },
                end: { line: 514, column: 65 },
              },
              132: {
                start: { line: 515, column: 8 },
                end: { line: 515, column: 76 },
              },
              133: {
                start: { line: 518, column: 24 },
                end: { line: 518, column: 65 },
              },
              134: {
                start: { line: 519, column: 8 },
                end: { line: 519, column: 63 },
              },
              135: {
                start: { line: 522, column: 20 },
                end: { line: 522, column: 46 },
              },
              136: {
                start: { line: 523, column: 20 },
                end: { line: 523, column: 50 },
              },
              137: {
                start: { line: 524, column: 8 },
                end: { line: 524, column: 59 },
              },
              138: {
                start: { line: 527, column: 24 },
                end: { line: 527, column: 65 },
              },
              139: {
                start: { line: 528, column: 21 },
                end: { line: 528, column: 48 },
              },
              140: {
                start: { line: 529, column: 8 },
                end: { line: 529, column: 50 },
              },
              141: {
                start: { line: 532, column: 8 },
                end: { line: 532, column: 51 },
              },
              142: {
                start: { line: 535, column: 8 },
                end: { line: 535, column: 182 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 7, column: 6 },
                  end: { line: 7, column: 7 },
                },
                loc: {
                  start: { line: 7, column: 38 },
                  end: { line: 35, column: 5 },
                },
                line: 7,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 38, column: 6 },
                  end: { line: 38, column: 7 },
                },
                loc: {
                  start: { line: 38, column: 62 },
                  end: { line: 54, column: 5 },
                },
                line: 38,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 57, column: 6 },
                  end: { line: 57, column: 7 },
                },
                loc: {
                  start: { line: 57, column: 31 },
                  end: { line: 78, column: 5 },
                },
                line: 57,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 81, column: 6 },
                  end: { line: 81, column: 7 },
                },
                loc: {
                  start: { line: 81, column: 44 },
                  end: { line: 100, column: 5 },
                },
                line: 81,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 103, column: 6 },
                  end: { line: 103, column: 7 },
                },
                loc: {
                  start: { line: 103, column: 102 },
                  end: { line: 120, column: 5 },
                },
                line: 103,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 123, column: 6 },
                  end: { line: 123, column: 7 },
                },
                loc: {
                  start: { line: 123, column: 97 },
                  end: { line: 143, column: 5 },
                },
                line: 123,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 146, column: 6 },
                  end: { line: 146, column: 7 },
                },
                loc: {
                  start: { line: 146, column: 41 },
                  end: { line: 167, column: 5 },
                },
                line: 146,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 159, column: 42 },
                  end: { line: 159, column: 43 },
                },
                loc: {
                  start: { line: 159, column: 49 },
                  end: { line: 159, column: 137 },
                },
                line: 159,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 170, column: 6 },
                  end: { line: 170, column: 7 },
                },
                loc: {
                  start: { line: 170, column: 31 },
                  end: { line: 213, column: 5 },
                },
                line: 170,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 216, column: 6 },
                  end: { line: 216, column: 7 },
                },
                loc: {
                  start: { line: 216, column: 39 },
                  end: { line: 219, column: 5 },
                },
                line: 216,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 222, column: 6 },
                  end: { line: 222, column: 7 },
                },
                loc: {
                  start: { line: 222, column: 36 },
                  end: { line: 235, column: 5 },
                },
                line: 222,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 238, column: 6 },
                  end: { line: 238, column: 7 },
                },
                loc: {
                  start: { line: 238, column: 48 },
                  end: { line: 255, column: 5 },
                },
                line: 238,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 258, column: 6 },
                  end: { line: 258, column: 7 },
                },
                loc: {
                  start: { line: 258, column: 33 },
                  end: { line: 405, column: 5 },
                },
                line: 258,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 408, column: 6 },
                  end: { line: 408, column: 7 },
                },
                loc: {
                  start: { line: 408, column: 67 },
                  end: { line: 442, column: 5 },
                },
                line: 408,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 445, column: 6 },
                  end: { line: 445, column: 7 },
                },
                loc: {
                  start: { line: 445, column: 35 },
                  end: { line: 455, column: 5 },
                },
                line: 445,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 449, column: 40 },
                  end: { line: 449, column: 41 },
                },
                loc: {
                  start: { line: 449, column: 48 },
                  end: { line: 449, column: 63 },
                },
                line: 449,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 449, column: 69 },
                  end: { line: 449, column: 70 },
                },
                loc: {
                  start: { line: 449, column: 77 },
                  end: { line: 449, column: 121 },
                },
                line: 449,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 458, column: 6 },
                  end: { line: 458, column: 7 },
                },
                loc: {
                  start: { line: 458, column: 22 },
                  end: { line: 460, column: 5 },
                },
                line: 458,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 463, column: 6 },
                  end: { line: 463, column: 7 },
                },
                loc: {
                  start: { line: 463, column: 53 },
                  end: { line: 471, column: 5 },
                },
                line: 463,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 472, column: 4 },
                  end: { line: 472, column: 5 },
                },
                loc: {
                  start: { line: 472, column: 17 },
                  end: { line: 474, column: 5 },
                },
                line: 472,
              },
              20: {
                name: '(anonymous_20)',
                decl: {
                  start: { line: 479, column: 4 },
                  end: { line: 479, column: 5 },
                },
                loc: {
                  start: { line: 479, column: 41 },
                  end: { line: 490, column: 5 },
                },
                line: 479,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 491, column: 4 },
                  end: { line: 491, column: 5 },
                },
                loc: {
                  start: { line: 491, column: 42 },
                  end: { line: 494, column: 5 },
                },
                line: 491,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 495, column: 4 },
                  end: { line: 495, column: 5 },
                },
                loc: {
                  start: { line: 495, column: 40 },
                  end: { line: 499, column: 5 },
                },
                line: 495,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 500, column: 4 },
                  end: { line: 500, column: 5 },
                },
                loc: {
                  start: { line: 500, column: 37 },
                  end: { line: 504, column: 5 },
                },
                line: 500,
              },
              24: {
                name: '(anonymous_24)',
                decl: {
                  start: { line: 505, column: 4 },
                  end: { line: 505, column: 5 },
                },
                loc: {
                  start: { line: 505, column: 41 },
                  end: { line: 508, column: 5 },
                },
                line: 505,
              },
              25: {
                name: '(anonymous_25)',
                decl: {
                  start: { line: 509, column: 4 },
                  end: { line: 509, column: 5 },
                },
                loc: {
                  start: { line: 509, column: 43 },
                  end: { line: 512, column: 5 },
                },
                line: 509,
              },
              26: {
                name: '(anonymous_26)',
                decl: {
                  start: { line: 513, column: 4 },
                  end: { line: 513, column: 5 },
                },
                loc: {
                  start: { line: 513, column: 42 },
                  end: { line: 516, column: 5 },
                },
                line: 513,
              },
              27: {
                name: '(anonymous_27)',
                decl: {
                  start: { line: 517, column: 4 },
                  end: { line: 517, column: 5 },
                },
                loc: {
                  start: { line: 517, column: 38 },
                  end: { line: 520, column: 5 },
                },
                line: 517,
              },
              28: {
                name: '(anonymous_28)',
                decl: {
                  start: { line: 521, column: 4 },
                  end: { line: 521, column: 5 },
                },
                loc: {
                  start: { line: 521, column: 38 },
                  end: { line: 525, column: 5 },
                },
                line: 521,
              },
              29: {
                name: '(anonymous_29)',
                decl: {
                  start: { line: 526, column: 4 },
                  end: { line: 526, column: 5 },
                },
                loc: {
                  start: { line: 526, column: 37 },
                  end: { line: 530, column: 5 },
                },
                line: 526,
              },
              30: {
                name: '(anonymous_30)',
                decl: {
                  start: { line: 531, column: 4 },
                  end: { line: 531, column: 5 },
                },
                loc: {
                  start: { line: 531, column: 44 },
                  end: { line: 533, column: 5 },
                },
                line: 531,
              },
              31: {
                name: '(anonymous_31)',
                decl: {
                  start: { line: 534, column: 4 },
                  end: { line: 534, column: 5 },
                },
                loc: {
                  start: { line: 534, column: 20 },
                  end: { line: 536, column: 5 },
                },
                line: 534,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 24, column: 8 },
                  end: { line: 32, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 24, column: 8 },
                    end: { line: 32, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 24,
              },
              1: {
                loc: {
                  start: { line: 41, column: 30 },
                  end: { line: 41, column: 93 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 41, column: 30 },
                    end: { line: 41, column: 51 },
                  },
                  {
                    start: { line: 41, column: 55 },
                    end: { line: 41, column: 93 },
                  },
                ],
                line: 41,
              },
              2: {
                loc: {
                  start: { line: 45, column: 26 },
                  end: { line: 45, column: 54 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 45, column: 41 },
                    end: { line: 45, column: 46 },
                  },
                  {
                    start: { line: 45, column: 49 },
                    end: { line: 45, column: 54 },
                  },
                ],
                line: 45,
              },
              3: {
                loc: {
                  start: { line: 47, column: 8 },
                  end: { line: 51, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 47, column: 8 },
                    end: { line: 51, column: 9 },
                  },
                  {
                    start: { line: 49, column: 15 },
                    end: { line: 51, column: 9 },
                  },
                ],
                line: 47,
              },
              4: {
                loc: {
                  start: { line: 61, column: 8 },
                  end: { line: 63, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 61, column: 8 },
                    end: { line: 63, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 61,
              },
              5: {
                loc: {
                  start: { line: 66, column: 8 },
                  end: { line: 70, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 66, column: 8 },
                    end: { line: 70, column: 9 },
                  },
                  {
                    start: { line: 68, column: 15 },
                    end: { line: 70, column: 9 },
                  },
                ],
                line: 66,
              },
              6: {
                loc: {
                  start: { line: 68, column: 15 },
                  end: { line: 70, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 68, column: 15 },
                    end: { line: 70, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 68,
              },
              7: {
                loc: {
                  start: { line: 71, column: 8 },
                  end: { line: 73, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 71, column: 8 },
                    end: { line: 73, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 71,
              },
              8: {
                loc: {
                  start: { line: 83, column: 8 },
                  end: { line: 85, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 83, column: 8 },
                    end: { line: 85, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 83,
              },
              9: {
                loc: {
                  start: { line: 86, column: 30 },
                  end: { line: 86, column: 106 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 86, column: 30 },
                    end: { line: 86, column: 52 },
                  },
                  {
                    start: { line: 86, column: 56 },
                    end: { line: 86, column: 106 },
                  },
                ],
                line: 86,
              },
              10: {
                loc: {
                  start: { line: 86, column: 59 },
                  end: { line: 86, column: 99 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 86, column: 59 },
                    end: { line: 86, column: 80 },
                  },
                  {
                    start: { line: 86, column: 84 },
                    end: { line: 86, column: 99 },
                  },
                ],
                line: 86,
              },
              11: {
                loc: {
                  start: { line: 91, column: 8 },
                  end: { line: 93, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 91, column: 8 },
                    end: { line: 93, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 91,
              },
              12: {
                loc: {
                  start: { line: 94, column: 8 },
                  end: { line: 96, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 94, column: 8 },
                    end: { line: 96, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 94,
              },
              13: {
                loc: {
                  start: { line: 94, column: 12 },
                  end: { line: 94, column: 124 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 94, column: 12 },
                    end: { line: 94, column: 31 },
                  },
                  {
                    start: { line: 94, column: 36 },
                    end: { line: 94, column: 123 },
                  },
                ],
                line: 94,
              },
              14: {
                loc: {
                  start: { line: 94, column: 36 },
                  end: { line: 94, column: 123 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 94, column: 97 },
                    end: { line: 94, column: 103 },
                  },
                  {
                    start: { line: 94, column: 106 },
                    end: { line: 94, column: 123 },
                  },
                ],
                line: 94,
              },
              15: {
                loc: {
                  start: { line: 94, column: 36 },
                  end: { line: 94, column: 94 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 94, column: 36 },
                    end: { line: 94, column: 69 },
                  },
                  {
                    start: { line: 94, column: 73 },
                    end: { line: 94, column: 94 },
                  },
                ],
                line: 94,
              },
              16: {
                loc: {
                  start: { line: 104, column: 26 },
                  end: { line: 104, column: 111 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 104, column: 50 },
                    end: { line: 104, column: 106 },
                  },
                  {
                    start: { line: 104, column: 109 },
                    end: { line: 104, column: 111 },
                  },
                ],
                line: 104,
              },
              17: {
                loc: {
                  start: { line: 104, column: 55 },
                  end: { line: 104, column: 104 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 104, column: 55 },
                    end: { line: 104, column: 77 },
                  },
                  {
                    start: { line: 104, column: 81 },
                    end: { line: 104, column: 104 },
                  },
                ],
                line: 104,
              },
              18: {
                loc: {
                  start: { line: 106, column: 40 },
                  end: { line: 106, column: 103 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 106, column: 64 },
                    end: { line: 106, column: 98 },
                  },
                  {
                    start: { line: 106, column: 101 },
                    end: { line: 106, column: 103 },
                  },
                ],
                line: 106,
              },
              19: {
                loc: {
                  start: { line: 106, column: 77 },
                  end: { line: 106, column: 96 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 106, column: 77 },
                    end: { line: 106, column: 86 },
                  },
                  {
                    start: { line: 106, column: 90 },
                    end: { line: 106, column: 96 },
                  },
                ],
                line: 106,
              },
              20: {
                loc: {
                  start: { line: 124, column: 26 },
                  end: { line: 124, column: 111 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 124, column: 50 },
                    end: { line: 124, column: 106 },
                  },
                  {
                    start: { line: 124, column: 109 },
                    end: { line: 124, column: 111 },
                  },
                ],
                line: 124,
              },
              21: {
                loc: {
                  start: { line: 124, column: 54 },
                  end: { line: 124, column: 103 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 124, column: 54 },
                    end: { line: 124, column: 76 },
                  },
                  {
                    start: { line: 124, column: 80 },
                    end: { line: 124, column: 103 },
                  },
                ],
                line: 124,
              },
              22: {
                loc: {
                  start: { line: 150, column: 8 },
                  end: { line: 157, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 150, column: 8 },
                    end: { line: 157, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 150,
              },
              23: {
                loc: {
                  start: { line: 158, column: 8 },
                  end: { line: 165, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 158, column: 8 },
                    end: { line: 165, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 158,
              },
              24: {
                loc: {
                  start: { line: 158, column: 12 },
                  end: { line: 158, column: 124 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 158, column: 12 },
                    end: { line: 158, column: 31 },
                  },
                  {
                    start: { line: 158, column: 36 },
                    end: { line: 158, column: 123 },
                  },
                ],
                line: 158,
              },
              25: {
                loc: {
                  start: { line: 158, column: 36 },
                  end: { line: 158, column: 123 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 158, column: 97 },
                    end: { line: 158, column: 103 },
                  },
                  {
                    start: { line: 158, column: 106 },
                    end: { line: 158, column: 123 },
                  },
                ],
                line: 158,
              },
              26: {
                loc: {
                  start: { line: 158, column: 36 },
                  end: { line: 158, column: 94 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 158, column: 36 },
                    end: { line: 158, column: 69 },
                  },
                  {
                    start: { line: 158, column: 73 },
                    end: { line: 158, column: 94 },
                  },
                ],
                line: 158,
              },
              27: {
                loc: {
                  start: { line: 166, column: 15 },
                  end: { line: 166, column: 144 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 166, column: 34 },
                    end: { line: 166, column: 139 },
                  },
                  {
                    start: { line: 166, column: 142 },
                    end: { line: 166, column: 144 },
                  },
                ],
                line: 166,
              },
              28: {
                loc: {
                  start: { line: 171, column: 8 },
                  end: { line: 212, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 172, column: 12 },
                    end: { line: 181, column: 18 },
                  },
                  {
                    start: { line: 182, column: 12 },
                    end: { line: 191, column: 18 },
                  },
                  {
                    start: { line: 192, column: 12 },
                    end: { line: 201, column: 18 },
                  },
                  {
                    start: { line: 202, column: 12 },
                    end: { line: 211, column: 18 },
                  },
                ],
                line: 171,
              },
              29: {
                loc: {
                  start: { line: 218, column: 15 },
                  end: { line: 218, column: 37 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 218, column: 15 },
                    end: { line: 218, column: 31 },
                  },
                  {
                    start: { line: 218, column: 35 },
                    end: { line: 218, column: 37 },
                  },
                ],
                line: 218,
              },
              30: {
                loc: {
                  start: { line: 227, column: 8 },
                  end: { line: 229, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 227, column: 8 },
                    end: { line: 229, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 227,
              },
              31: {
                loc: {
                  start: { line: 230, column: 8 },
                  end: { line: 232, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 230, column: 8 },
                    end: { line: 232, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 230,
              },
              32: {
                loc: {
                  start: { line: 233, column: 26 },
                  end: { line: 233, column: 108 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 233, column: 50 },
                    end: { line: 233, column: 103 },
                  },
                  {
                    start: { line: 233, column: 106 },
                    end: { line: 233, column: 108 },
                  },
                ],
                line: 233,
              },
              33: {
                loc: {
                  start: { line: 233, column: 55 },
                  end: { line: 233, column: 101 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 233, column: 55 },
                    end: { line: 233, column: 77 },
                  },
                  {
                    start: { line: 233, column: 81 },
                    end: { line: 233, column: 101 },
                  },
                ],
                line: 233,
              },
              34: {
                loc: {
                  start: { line: 239, column: 8 },
                  end: { line: 241, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 239, column: 8 },
                    end: { line: 241, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 239,
              },
              35: {
                loc: {
                  start: { line: 246, column: 8 },
                  end: { line: 248, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 246, column: 8 },
                    end: { line: 248, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 246,
              },
              36: {
                loc: {
                  start: { line: 249, column: 8 },
                  end: { line: 251, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 249, column: 8 },
                    end: { line: 251, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 249,
              },
              37: {
                loc: {
                  start: { line: 410, column: 8 },
                  end: { line: 412, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 410, column: 8 },
                    end: { line: 412, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 410,
              },
              38: {
                loc: {
                  start: { line: 413, column: 8 },
                  end: { line: 415, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 413, column: 8 },
                    end: { line: 415, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 413,
              },
              39: {
                loc: {
                  start: { line: 451, column: 8 },
                  end: { line: 453, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 451, column: 8 },
                    end: { line: 453, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 451,
              },
              40: {
                loc: {
                  start: { line: 451, column: 12 },
                  end: { line: 451, column: 53 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 451, column: 12 },
                    end: { line: 451, column: 23 },
                  },
                  {
                    start: { line: 451, column: 27 },
                    end: { line: 451, column: 53 },
                  },
                ],
                line: 451,
              },
              41: {
                loc: {
                  start: { line: 465, column: 8 },
                  end: { line: 470, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 465, column: 8 },
                    end: { line: 470, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 465,
              },
              42: {
                loc: {
                  start: { line: 467, column: 12 },
                  end: { line: 469, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 467, column: 12 },
                    end: { line: 469, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 467,
              },
              43: {
                loc: {
                  start: { line: 480, column: 34 },
                  end: { line: 480, column: 49 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 480, column: 34 },
                    end: { line: 480, column: 43 },
                  },
                  {
                    start: { line: 480, column: 47 },
                    end: { line: 480, column: 49 },
                  },
                ],
                line: 480,
              },
              44: {
                loc: {
                  start: { line: 482, column: 8 },
                  end: { line: 482, column: 57 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 482, column: 8 },
                    end: { line: 482, column: 57 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 482,
              },
              45: {
                loc: {
                  start: { line: 483, column: 8 },
                  end: { line: 483, column: 51 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 483, column: 8 },
                    end: { line: 483, column: 51 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 483,
              },
              46: {
                loc: {
                  start: { line: 484, column: 8 },
                  end: { line: 484, column: 52 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 484, column: 8 },
                    end: { line: 484, column: 52 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 484,
              },
              47: {
                loc: {
                  start: { line: 485, column: 8 },
                  end: { line: 485, column: 60 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 485, column: 8 },
                    end: { line: 485, column: 60 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 485,
              },
              48: {
                loc: {
                  start: { line: 486, column: 8 },
                  end: { line: 486, column: 53 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 486, column: 8 },
                    end: { line: 486, column: 53 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 486,
              },
              49: {
                loc: {
                  start: { line: 487, column: 8 },
                  end: { line: 487, column: 58 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 487, column: 8 },
                    end: { line: 487, column: 58 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 487,
              },
              50: {
                loc: {
                  start: { line: 488, column: 8 },
                  end: { line: 488, column: 56 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 488, column: 8 },
                    end: { line: 488, column: 56 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 488,
              },
              51: {
                loc: {
                  start: { line: 493, column: 15 },
                  end: { line: 493, column: 57 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 493, column: 25 },
                    end: { line: 493, column: 52 },
                  },
                  {
                    start: { line: 493, column: 55 },
                    end: { line: 493, column: 57 },
                  },
                ],
                line: 493,
              },
              52: {
                loc: {
                  start: { line: 496, column: 40 },
                  end: { line: 496, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 496, column: 40 },
                    end: { line: 496, column: 50 },
                  },
                  {
                    start: { line: 496, column: 54 },
                    end: { line: 496, column: 55 },
                  },
                ],
                line: 496,
              },
              53: {
                loc: {
                  start: { line: 502, column: 20 },
                  end: { line: 502, column: 46 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 502, column: 35 },
                    end: { line: 502, column: 39 },
                  },
                  {
                    start: { line: 502, column: 42 },
                    end: { line: 502, column: 46 },
                  },
                ],
                line: 502,
              },
              54: {
                loc: {
                  start: { line: 522, column: 20 },
                  end: { line: 522, column: 46 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 522, column: 20 },
                    end: { line: 522, column: 28 },
                  },
                  {
                    start: { line: 522, column: 32 },
                    end: { line: 522, column: 40 },
                  },
                  {
                    start: { line: 522, column: 44 },
                    end: { line: 522, column: 46 },
                  },
                ],
                line: 522,
              },
              55: {
                loc: {
                  start: { line: 523, column: 35 },
                  end: { line: 523, column: 49 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 523, column: 35 },
                    end: { line: 523, column: 43 },
                  },
                  {
                    start: { line: 523, column: 47 },
                    end: { line: 523, column: 49 },
                  },
                ],
                line: 523,
              },
              56: {
                loc: {
                  start: { line: 528, column: 21 },
                  end: { line: 528, column: 48 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 528, column: 21 },
                    end: { line: 528, column: 29 },
                  },
                  {
                    start: { line: 528, column: 33 },
                    end: { line: 528, column: 42 },
                  },
                  {
                    start: { line: 528, column: 46 },
                    end: { line: 528, column: 48 },
                  },
                ],
                line: 528,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
              94: 0,
              95: 0,
              96: 0,
              97: 0,
              98: 0,
              99: 0,
              100: 0,
              101: 0,
              102: 0,
              103: 0,
              104: 0,
              105: 0,
              106: 0,
              107: 0,
              108: 0,
              109: 0,
              110: 0,
              111: 0,
              112: 0,
              113: 0,
              114: 0,
              115: 0,
              116: 0,
              117: 0,
              118: 0,
              119: 0,
              120: 0,
              121: 0,
              122: 0,
              123: 0,
              124: 0,
              125: 0,
              126: 0,
              127: 0,
              128: 0,
              129: 0,
              130: 0,
              131: 0,
              132: 0,
              133: 0,
              134: 0,
              135: 0,
              136: 0,
              137: 0,
              138: 0,
              139: 0,
              140: 0,
              141: 0,
              142: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0],
              28: [0, 0, 0, 0],
              29: [0, 0],
              30: [0, 0],
              31: [0, 0],
              32: [0, 0],
              33: [0, 0],
              34: [0, 0],
              35: [0, 0],
              36: [0, 0],
              37: [0, 0],
              38: [0, 0],
              39: [0, 0],
              40: [0, 0],
              41: [0, 0],
              42: [0, 0],
              43: [0, 0],
              44: [0, 0],
              45: [0, 0],
              46: [0, 0],
              47: [0, 0],
              48: [0, 0],
              49: [0, 0],
              50: [0, 0],
              51: [0, 0],
              52: [0, 0],
              53: [0, 0],
              54: [0, 0, 0],
              55: [0, 0],
              56: [0, 0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/react-export-service.ts',
              ],
              sourcesContent: [
                "import { BaseContentProcessor, BaseExportService } from './base-export-service'\nimport { type Note } from '../../types/note'\nimport {\n  type ExportOptions,\n  type ExportResult,\n  type ReactExportOptions,\n} from '../../types/export'\n\n/**\n * React export service for generating JSX components\n */\nexport class ReactExportService extends BaseExportService {\n  constructor() {\n    super(new ReactContentProcessor())\n  }\n\n  /**\n   * Export note to React component format\n   */\n  async exportNote(note: Note, options: ExportOptions): Promise<ExportResult> {\n    const reactOptions = options as ReactExportOptions\n\n    // Process content to JSX\n    const content = this.parseContent(note.content)\n    const jsxContent = await this.contentProcessor.processContent(\n      content,\n      options\n    )\n\n    // Generate complete React component\n    const componentCode = await this.generateReactComponent(\n      note,\n      jsxContent,\n      reactOptions\n    )\n\n    const filename = this.generateFilename(note, options)\n    const result: ExportResult = {\n      content: componentCode,\n      filename,\n      mimeType: 'text/typescript',\n      size: Buffer.byteLength(componentCode, 'utf8'),\n      format: 'react',\n      exportedAt: new Date().toISOString(),\n    }\n\n    // Generate additional files if needed\n    if (reactOptions.styling === 'css-modules') {\n      result.additionalFiles = [\n        {\n          filename: filename.replace(/\\.tsx?$/, '.module.css'),\n          content: this.generateCSSModule(reactOptions),\n          mimeType: 'text/css',\n        },\n      ]\n    }\n\n    await this.saveToHistory(note, options, result)\n    return result\n  }\n\n  /**\n   * Generate complete React component code\n   */\n  private async generateReactComponent(\n    note: Note,\n    jsxContent: string,\n    options: ReactExportOptions\n  ): Promise<string> {\n    const imports = this.generateImports(options)\n    const propsInterface = this.generatePropsInterface(note, options)\n    const componentName =\n      options.componentName || this.sanitizeComponentName(note.title)\n    const styling = this.getStylingProps(options)\n    const metadata = this.generateMetadataJSX(note, options)\n\n    const isTypeScript = options.useTypeScript\n    const extension = isTypeScript ? 'tsx' : 'jsx'\n\n    let component = ''\n\n    if (options.functional) {\n      component = this.generateFunctionalComponent(\n        componentName,\n        propsInterface,\n        metadata,\n        jsxContent,\n        styling,\n        options\n      )\n    } else {\n      component = this.generateClassComponent(\n        componentName,\n        propsInterface,\n        metadata,\n        jsxContent,\n        styling,\n        options\n      )\n    }\n\n    const documentation = this.generateComponentDocumentation(\n      componentName,\n      note,\n      options\n    )\n\n    return `${documentation}${imports}\\n\\n${propsInterface}\\n\\n${component}`\n  }\n\n  /**\n   * Generate import statements\n   */\n  private generateImports(options: ReactExportOptions): string {\n    const imports = ['React']\n\n    if (!options.functional) {\n      imports.push('Component')\n    }\n\n    const reactImport = `import ${imports.join(', ')} from 'react'`\n\n    const additionalImports: string[] = []\n\n    if (options.styling === 'styled-components') {\n      additionalImports.push(\"import styled from 'styled-components'\")\n    } else if (options.styling === 'css-modules') {\n      additionalImports.push(\"import styles from './NoteComponent.module.css'\")\n    }\n\n    if (options.includePropTypes) {\n      additionalImports.push(\"import PropTypes from 'prop-types'\")\n    }\n\n    return [reactImport, ...additionalImports].join('\\n')\n  }\n\n  /**\n   * Generate TypeScript props interface\n   */\n  private generatePropsInterface(\n    note: Note,\n    options: ReactExportOptions\n  ): string {\n    if (!options.useTypeScript) {\n      return ''\n    }\n\n    const interfaceName =\n      options.propsInterface ||\n      `${options.componentName || 'NoteComponent'}Props`\n\n    const props = ['className?: string', 'style?: React.CSSProperties']\n\n    if (options.includeDates) {\n      props.push('showDates?: boolean')\n    }\n\n    if (options.includeTags && note.tags?.length) {\n      props.push('showTags?: boolean')\n    }\n\n    return `interface ${interfaceName} {\n  ${props.join('\\n  ')}\n}`\n  }\n\n  /**\n   * Generate functional component\n   */\n  private generateFunctionalComponent(\n    componentName: string,\n    propsInterface: string,\n    metadata: string,\n    content: string,\n    styling: any,\n    options: ReactExportOptions\n  ): string {\n    const propsType = options.useTypeScript\n      ? `: ${options.propsInterface || `${componentName}Props`}`\n      : ''\n\n    const destructuredProps = this.getDestructuredProps(options)\n\n    return `const ${componentName}${options.useTypeScript ? `: React.FC${propsType || '<{}>'}` : ''} = (${destructuredProps}) => {\n  return (\n    <div${styling.container}>\n      ${metadata}\n      <div${styling.content}>\n        ${content}\n      </div>\n    </div>\n  )\n}\n\n${this.generatePropTypes(componentName, options)}\n\nexport default ${componentName}`\n  }\n\n  /**\n   * Generate class component\n   */\n  private generateClassComponent(\n    componentName: string,\n    propsInterface: string,\n    metadata: string,\n    content: string,\n    styling: any,\n    options: ReactExportOptions\n  ): string {\n    const propsType = options.useTypeScript\n      ? `<${options.propsInterface || `${componentName}Props`}>`\n      : ''\n\n    return `class ${componentName} extends Component${propsType} {\n  render() {\n    const { className, style } = this.props\n    \n    return (\n      <div${styling.container}>\n        ${metadata}\n        <div${styling.content}>\n          ${content}\n        </div>\n      </div>\n    )\n  }\n}\n\n${this.generatePropTypes(componentName, options)}\n\nexport default ${componentName}`\n  }\n\n  /**\n   * Generate metadata JSX\n   */\n  private generateMetadataJSX(note: Note, options: ReactExportOptions): string {\n    const parts: string[] = []\n\n    parts.push(\n      `<h1${this.getStylingProp(options, 'title')}>${this.escapeJSX(note.title)}</h1>`\n    )\n\n    if (options.includeDates) {\n      parts.push(`{showDates && (\n        <div${this.getStylingProp(options, 'metadata')}>\n          <span>Created: {new Date('${note.created_at}').toLocaleDateString()}</span>\n          <span>Updated: {new Date('${note.updated_at}').toLocaleDateString()}</span>\n        </div>\n      )}`)\n    }\n\n    if (options.includeTags && note.tags?.length) {\n      const tagsJSX = note.tags\n        .map(\n          (tag) =>\n            `<span key=\"${tag}\"${this.getStylingProp(options, 'tag')}>${this.escapeJSX(tag)}</span>`\n        )\n        .join('\\n          ')\n\n      parts.push(`{showTags && (\n        <div${this.getStylingProp(options, 'tags')}>\n          ${tagsJSX}\n        </div>\n      )}`)\n    }\n\n    return parts.length > 0\n      ? `<header${this.getStylingProp(options, 'header')}>\\n        ${parts.join('\\n        ')}\\n      </header>`\n      : ''\n  }\n\n  /**\n   * Get styling props based on styling approach\n   */\n  private getStylingProps(options: ReactExportOptions): any {\n    switch (options.styling) {\n      case 'css-modules':\n        return {\n          container:\n            ' className={`${styles.container} ${className || \"\"}`} style={style}',\n          content: ` className={styles.content}`,\n          header: ` className={styles.header}`,\n          title: ` className={styles.title}`,\n          metadata: ` className={styles.metadata}`,\n          tags: ` className={styles.tags}`,\n          tag: ` className={styles.tag}`,\n        }\n      case 'styled-components':\n        return {\n          container: '',\n          content: '',\n          header: '',\n          title: '',\n          metadata: '',\n          tags: '',\n          tag: '',\n        }\n      case 'tailwind':\n        return {\n          container:\n            ' className={`max-w-4xl mx-auto p-6 ${className || \"\"}`} style={style}',\n          content: ` className=\"prose prose-lg max-w-none\"`,\n          header: ` className=\"border-b pb-4 mb-6\"`,\n          title: ` className=\"text-3xl font-bold text-gray-900 mb-4\"`,\n          metadata: ` className=\"flex gap-4 text-sm text-gray-600\"`,\n          tags: ` className=\"flex flex-wrap gap-2 mt-4\"`,\n          tag: ` className=\"px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm\"`,\n        }\n      default:\n        return {\n          container: ' className={className} style={style}',\n          content: '',\n          header: '',\n          title: '',\n          metadata: '',\n          tags: '',\n          tag: '',\n        }\n    }\n  }\n\n  /**\n   * Get styling prop for specific element\n   */\n  private getStylingProp(options: ReactExportOptions, element: string): string {\n    const styling = this.getStylingProps(options)\n    return styling[element] || ''\n  }\n\n  /**\n   * Generate destructured props for functional component\n   */\n  private getDestructuredProps(options: ReactExportOptions): string {\n    const props = ['className', 'style']\n\n    if (options.includeDates) {\n      props.push('showDates = true')\n    }\n\n    if (options.includeTags) {\n      props.push('showTags = true')\n    }\n\n    const propsType = options.useTypeScript\n      ? `: ${options.propsInterface || 'NoteComponentProps'}`\n      : ''\n\n    return `{ ${props.join(', ')} }${propsType}`\n  }\n\n  /**\n   * Generate PropTypes if requested\n   */\n  private generatePropTypes(\n    componentName: string,\n    options: ReactExportOptions\n  ): string {\n    if (!options.includePropTypes) {\n      return ''\n    }\n\n    const propTypes = ['className: PropTypes.string', 'style: PropTypes.object']\n\n    if (options.includeDates) {\n      propTypes.push('showDates: PropTypes.bool')\n    }\n\n    if (options.includeTags) {\n      propTypes.push('showTags: PropTypes.bool')\n    }\n\n    return `\\n${componentName}.propTypes = {\n  ${propTypes.join(',\\n  ')}\n}`\n  }\n\n  /**\n   * Generate CSS module\n   */\n  private generateCSSModule(options: ReactExportOptions): string {\n    return `.container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  line-height: 1.6;\n}\n\n.header {\n  border-bottom: 2px solid #e2e8f0;\n  padding-bottom: 1rem;\n  margin-bottom: 2rem;\n}\n\n.title {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: #1a202c;\n  margin: 0 0 1rem 0;\n}\n\n.metadata {\n  display: flex;\n  gap: 1rem;\n  font-size: 0.875rem;\n  color: #718096;\n  margin-bottom: 1rem;\n}\n\n.tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-top: 1rem;\n}\n\n.tag {\n  background: #ebf8ff;\n  color: #2b6cb0;\n  padding: 0.25rem 0.75rem;\n  border-radius: 1rem;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.content {\n  font-size: 1.1rem;\n}\n\n.content h1,\n.content h2,\n.content h3,\n.content h4,\n.content h5,\n.content h6 {\n  color: #2d3748;\n  margin: 2rem 0 1rem 0;\n  font-weight: 600;\n}\n\n.content p {\n  margin: 1rem 0;\n}\n\n.content a {\n  color: #3182ce;\n  text-decoration: none;\n}\n\n.content a:hover {\n  text-decoration: underline;\n}\n\n.content ul,\n.content ol {\n  margin: 1rem 0;\n  padding-left: 2rem;\n}\n\n.content li {\n  margin: 0.5rem 0;\n}\n\n.content code {\n  background: #f7fafc;\n  padding: 0.2rem 0.4rem;\n  border-radius: 4px;\n  font-family: 'Courier New', monospace;\n  font-size: 0.9em;\n}\n\n.content pre {\n  background: #f7fafc;\n  padding: 1rem;\n  border-radius: 6px;\n  overflow-x: auto;\n  margin: 1rem 0;\n}\n\n.content blockquote {\n  border-left: 4px solid #3182ce;\n  margin: 1rem 0;\n  padding: 0.5rem 0 0.5rem 1rem;\n  background: #f8f9fa;\n  font-style: italic;\n}\n\n.content table {\n  width: 100%;\n  border-collapse: collapse;\n  margin: 1rem 0;\n}\n\n.content th,\n.content td {\n  border: 1px solid #e2e8f0;\n  padding: 0.75rem;\n  text-align: left;\n}\n\n.content th {\n  background: #f7fafc;\n  font-weight: 600;\n}\n\n.content img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 6px;\n  margin: 1rem 0;\n}\n\n@media (max-width: 768px) {\n  .container {\n    padding: 1rem;\n  }\n\n  .title {\n    font-size: 2rem;\n  }\n\n  .metadata {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n}`\n  }\n\n  /**\n   * Generate component documentation\n   */\n  private generateComponentDocumentation(\n    componentName: string,\n    note: Note,\n    options: ReactExportOptions\n  ): string {\n    const props = []\n\n    if (options.includeDates) {\n      props.push(\n        ' * @param {boolean} [showDates=true] - Whether to show creation and modification dates'\n      )\n    }\n\n    if (options.includeTags) {\n      props.push(' * @param {boolean} [showTags=true] - Whether to show tags')\n    }\n\n    props.push(' * @param {string} [className] - Additional CSS class names')\n    props.push(' * @param {React.CSSProperties} [style] - Inline styles')\n\n    return `/**\n * ${componentName} - React component generated from Notable export\n * \n * Original note: \"${note.title}\"\n * Exported on: ${new Date().toLocaleDateString()}\n * \n${props.join('\\n')}\n * \n * @example\n * \\`\\`\\`jsx\n * import ${componentName} from './${componentName}'\n * \n * function App() {\n *   return (\n *     <${componentName} \n *       className=\"my-note\"\n *       showDates={true}\n *       showTags={true}\n *     />\n *   )\n * }\n * \\`\\`\\`\n */\n`\n  }\n\n  /**\n   * Sanitize component name\n   */\n  private sanitizeComponentName(title: string): string {\n    // Remove special characters and split into words\n    const words = title.replace(/[^a-zA-Z0-9\\s]/g, '').split(/\\s+/)\n\n    // Convert to PascalCase, filtering out empty strings\n    const pascalCase = words\n      .filter((word) => word.length > 0)\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join('')\n\n    // Ensure valid component name (must start with letter)\n    if (!pascalCase || !/^[A-Z]/.test(pascalCase)) {\n      return 'NoteComponent'\n    }\n\n    return pascalCase\n  }\n\n  /**\n   * Escape JSX content\n   */\n  private escapeJSX(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;')\n      .replace(/{/g, '&#123;')\n      .replace(/}/g, '&#125;')\n  }\n\n  /**\n   * Validate React-specific options\n   */\n  protected validateFormatSpecificOptions(\n    options: ExportOptions,\n    errors: string[]\n  ): void {\n    const reactOptions = options as ReactExportOptions\n\n    if (reactOptions.componentName) {\n      const isValidName = /^[A-Z][a-zA-Z0-9]*$/.test(reactOptions.componentName)\n      if (!isValidName) {\n        errors.push(\n          'Component name must be a valid React component name (PascalCase)'\n        )\n      }\n    }\n  }\n}\n\n/**\n * React content processor for generating JSX\n */\nexport class ReactContentProcessor extends BaseContentProcessor {\n  protected async processTextNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    let text = this.escapeJSX(node.text || '')\n\n    // Apply text formatting with JSX\n    if (node.bold) text = `<strong>${text}</strong>`\n    if (node.italic) text = `<em>${text}</em>`\n    if (node.underline) text = `<u>${text}</u>`\n    if (node.strikethrough) text = `<del>${text}</del>`\n    if (node.code) text = `<code>${text}</code>`\n    if (node.superscript) text = `<sup>${text}</sup>`\n    if (node.subscript) text = `<sub>${text}</sub>`\n\n    return text\n  }\n\n  protected async processParagraph(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return content ? `        <p>${content}</p>` : ''\n  }\n\n  protected async processHeading(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const level = Math.min(Math.max(node.level || 1, 1), 6)\n    const content = await this.processChildren(node, options)\n    return `        <h${level}>${content}</h${level}>`\n  }\n\n  protected async processList(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const tag = node.ordered ? 'ol' : 'ul'\n    return `        <${tag}>\\n${content}\\n        </${tag}>`\n  }\n\n  protected async processListItem(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `          <li>${content}</li>`\n  }\n\n  protected async processBlockquote(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `        <blockquote>${content}</blockquote>`\n  }\n\n  protected async processCodeBlock(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `        <pre><code>${this.escapeJSX(content)}</code></pre>`\n  }\n\n  protected async processTable(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    return `        <table>\\n${content}\\n        </table>`\n  }\n\n  protected async processImage(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const src = node.src || node.url || ''\n    const alt = this.escapeJSX(node.alt || '')\n    return `        <img src=\"${src}\" alt=\"${alt}\" />`\n  }\n\n  protected async processLink(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    const content = await this.processChildren(node, options)\n    const href = node.url || node.href || ''\n    return `<a href=\"${href}\">${content}</a>`\n  }\n\n  protected async processGenericNode(\n    node: any,\n    options: ExportOptions\n  ): Promise<string> {\n    return this.processChildren(node, options)\n  }\n\n  private escapeJSX(text: string): string {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;')\n      .replace(/{/g, '&#123;')\n      .replace(/}/g, '&#125;')\n  }\n}\n",
              ],
              names: [
                'BaseContentProcessor',
                'BaseExportService',
                'ReactExportService',
                'exportNote',
                'note',
                'options',
                'reactOptions',
                'content',
                'parseContent',
                'jsxContent',
                'contentProcessor',
                'processContent',
                'componentCode',
                'generateReactComponent',
                'filename',
                'generateFilename',
                'result',
                'mimeType',
                'size',
                'Buffer',
                'byteLength',
                'format',
                'exportedAt',
                'Date',
                'toISOString',
                'styling',
                'additionalFiles',
                'replace',
                'generateCSSModule',
                'saveToHistory',
                'imports',
                'generateImports',
                'propsInterface',
                'generatePropsInterface',
                'componentName',
                'sanitizeComponentName',
                'title',
                'getStylingProps',
                'metadata',
                'generateMetadataJSX',
                'isTypeScript',
                'useTypeScript',
                'extension',
                'component',
                'functional',
                'generateFunctionalComponent',
                'generateClassComponent',
                'documentation',
                'generateComponentDocumentation',
                'push',
                'reactImport',
                'join',
                'additionalImports',
                'includePropTypes',
                'interfaceName',
                'props',
                'includeDates',
                'includeTags',
                'tags',
                'length',
                'propsType',
                'destructuredProps',
                'getDestructuredProps',
                'container',
                'generatePropTypes',
                'parts',
                'getStylingProp',
                'escapeJSX',
                'created_at',
                'updated_at',
                'tagsJSX',
                'map',
                'tag',
                'header',
                'element',
                'propTypes',
                'toLocaleDateString',
                'words',
                'split',
                'pascalCase',
                'filter',
                'word',
                'charAt',
                'toUpperCase',
                'slice',
                'test',
                'text',
                'validateFormatSpecificOptions',
                'errors',
                'isValidName',
                'constructor',
                'ReactContentProcessor',
                'processTextNode',
                'node',
                'bold',
                'italic',
                'underline',
                'strikethrough',
                'code',
                'superscript',
                'subscript',
                'processParagraph',
                'processChildren',
                'processHeading',
                'level',
                'Math',
                'min',
                'max',
                'processList',
                'ordered',
                'processListItem',
                'processBlockquote',
                'processCodeBlock',
                'processTable',
                'processImage',
                'src',
                'url',
                'alt',
                'processLink',
                'href',
                'processGenericNode',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '98ff81d705b26fa6b8b09e301b581836624d8fa7',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '98ff81d705b26fa6b8b09e301b581836624d8fa7' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_rxdgvvp5v = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_rxdgvvp5v()
      var console = __webpack_require__(
        '../../node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js'
      )
      function cov_2po4ns271c() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/base-exporter.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/base-exporter.ts',
            statementMap: {
              0: {
                start: { line: 3, column: 8 },
                end: { line: 5, column: 10 },
              },
              1: {
                start: { line: 8, column: 22 },
                end: { line: 8, column: 102 },
              },
              2: {
                start: { line: 9, column: 26 },
                end: { line: 9, column: 64 },
              },
              3: {
                start: { line: 10, column: 8 },
                end: { line: 10, column: 80 },
              },
              4: {
                start: { line: 13, column: 8 },
                end: { line: 17, column: 11 },
              },
              5: {
                start: { line: 20, column: 24 },
                end: { line: 20, column: 87 },
              },
              6: {
                start: { line: 21, column: 8 },
                end: { line: 21, column: 46 },
              },
              7: {
                start: { line: 22, column: 8 },
                end: { line: 27, column: 10 },
              },
              8: {
                start: { line: 31, column: 8 },
                end: { line: 31, column: 33 },
              },
              9: {
                start: { line: 31, column: 23 },
                end: { line: 31, column: 33 },
              },
              10: {
                start: { line: 32, column: 22 },
                end: { line: 32, column: 24 },
              },
              11: {
                start: { line: 33, column: 8 },
                end: { line: 33, column: 67 },
              },
              12: {
                start: { line: 33, column: 28 },
                end: { line: 33, column: 67 },
              },
              13: {
                start: { line: 34, column: 8 },
                end: { line: 34, column: 70 },
              },
              14: {
                start: { line: 34, column: 29 },
                end: { line: 34, column: 70 },
              },
              15: {
                start: { line: 35, column: 8 },
                end: { line: 35, column: 91 },
              },
              16: {
                start: { line: 35, column: 32 },
                end: { line: 35, column: 91 },
              },
              17: {
                start: { line: 36, column: 8 },
                end: { line: 36, column: 91 },
              },
              18: {
                start: { line: 36, column: 32 },
                end: { line: 36, column: 91 },
              },
              19: {
                start: { line: 37, column: 8 },
                end: { line: 37, column: 165 },
              },
              20: {
                start: { line: 37, column: 117 },
                end: { line: 37, column: 165 },
              },
              21: {
                start: { line: 38, column: 8 },
                end: { line: 38, column: 85 },
              },
              22: {
                start: { line: 38, column: 34 },
                end: { line: 38, column: 85 },
              },
              23: {
                start: { line: 39, column: 8 },
                end: { line: 39, column: 32 },
              },
              24: {
                start: { line: 42, column: 8 },
                end: { line: 42, column: 29 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 2, column: 4 },
                  end: { line: 2, column: 5 },
                },
                loc: {
                  start: { line: 2, column: 26 },
                  end: { line: 6, column: 5 },
                },
                line: 2,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 7, column: 4 },
                  end: { line: 7, column: 5 },
                },
                loc: {
                  start: { line: 7, column: 52 },
                  end: { line: 11, column: 5 },
                },
                line: 7,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 12, column: 4 },
                  end: { line: 12, column: 5 },
                },
                loc: {
                  start: { line: 12, column: 34 },
                  end: { line: 18, column: 5 },
                },
                line: 12,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 19, column: 4 },
                  end: { line: 19, column: 5 },
                },
                loc: {
                  start: { line: 19, column: 23 },
                  end: { line: 28, column: 5 },
                },
                line: 19,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 29, column: 4 },
                  end: { line: 29, column: 5 },
                },
                loc: {
                  start: { line: 29, column: 29 },
                  end: { line: 40, column: 5 },
                },
                line: 29,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 41, column: 4 },
                  end: { line: 41, column: 5 },
                },
                loc: {
                  start: { line: 41, column: 23 },
                  end: { line: 43, column: 5 },
                },
                line: 41,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 8, column: 22 },
                  end: { line: 8, column: 102 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 8, column: 23 },
                    end: { line: 8, column: 89 },
                  },
                  {
                    start: { line: 8, column: 94 },
                    end: { line: 8, column: 102 },
                  },
                ],
                line: 8,
              },
              1: {
                loc: {
                  start: { line: 8, column: 23 },
                  end: { line: 8, column: 89 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 8, column: 66 },
                    end: { line: 8, column: 72 },
                  },
                  {
                    start: { line: 8, column: 75 },
                    end: { line: 8, column: 89 },
                  },
                ],
                line: 8,
              },
              2: {
                loc: {
                  start: { line: 8, column: 23 },
                  end: { line: 8, column: 63 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 8, column: 23 },
                    end: { line: 8, column: 40 },
                  },
                  {
                    start: { line: 8, column: 44 },
                    end: { line: 8, column: 63 },
                  },
                ],
                line: 8,
              },
              3: {
                loc: {
                  start: { line: 20, column: 24 },
                  end: { line: 20, column: 87 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 20, column: 49 },
                    end: { line: 20, column: 62 },
                  },
                  {
                    start: { line: 20, column: 65 },
                    end: { line: 20, column: 87 },
                  },
                ],
                line: 20,
              },
              4: {
                loc: {
                  start: { line: 31, column: 8 },
                  end: { line: 31, column: 33 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 31, column: 8 },
                    end: { line: 31, column: 33 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 31,
              },
              5: {
                loc: {
                  start: { line: 33, column: 8 },
                  end: { line: 33, column: 67 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 33, column: 8 },
                    end: { line: 33, column: 67 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 33,
              },
              6: {
                loc: {
                  start: { line: 34, column: 8 },
                  end: { line: 34, column: 70 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 34, column: 8 },
                    end: { line: 34, column: 70 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 34,
              },
              7: {
                loc: {
                  start: { line: 35, column: 8 },
                  end: { line: 35, column: 91 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 35, column: 8 },
                    end: { line: 35, column: 91 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 35,
              },
              8: {
                loc: {
                  start: { line: 36, column: 8 },
                  end: { line: 36, column: 91 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 36, column: 8 },
                    end: { line: 36, column: 91 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 36,
              },
              9: {
                loc: {
                  start: { line: 37, column: 8 },
                  end: { line: 37, column: 165 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 37, column: 8 },
                    end: { line: 37, column: 165 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 37,
              },
              10: {
                loc: {
                  start: { line: 37, column: 12 },
                  end: { line: 37, column: 115 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 37, column: 85 },
                    end: { line: 37, column: 91 },
                  },
                  {
                    start: { line: 37, column: 94 },
                    end: { line: 37, column: 115 },
                  },
                ],
                line: 37,
              },
              11: {
                loc: {
                  start: { line: 37, column: 12 },
                  end: { line: 37, column: 82 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 37, column: 12 },
                    end: { line: 37, column: 53 },
                  },
                  {
                    start: { line: 37, column: 57 },
                    end: { line: 37, column: 82 },
                  },
                ],
                line: 37,
              },
              12: {
                loc: {
                  start: { line: 38, column: 8 },
                  end: { line: 38, column: 85 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 38, column: 8 },
                    end: { line: 38, column: 85 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 38,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
            },
            f: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/base-exporter.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\nimport {\n  type BulkExportOptions,\n  type ExportFormat,\n  type ExportMetadata,\n  type ExportOptions,\n  type ExportResult,\n  type ExportService,\n} from './types'\n\nexport abstract class BaseExporter implements ExportService {\n  protected readonly format: ExportFormat\n\n  constructor(format: ExportFormat) {\n    this.format = format\n  }\n\n  abstract export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult>\n\n  abstract bulkExport(options: BulkExportOptions): Promise<ExportResult>\n\n  getSupportedFormats(): ExportFormat[] {\n    return [this.format]\n  }\n\n  protected generateFileName(\n    baseName: string,\n    extension: string,\n    metadata?: ExportMetadata\n  ): string {\n    const title = metadata?.title || baseName\n    const timestamp = new Date().toISOString().split('T')[0]\n    return `${title.replace(/[^a-z0-9]/gi, '_')}_${timestamp}.${extension}`\n  }\n\n  protected createBlob(content: string, mimeType: string): Blob {\n    return new Blob([content], { type: mimeType })\n  }\n\n  protected handleError(error: unknown): ExportResult {\n    const message =\n      error instanceof Error ? error.message : 'Unknown export error'\n    console.error('Export error:', error)\n    return {\n      success: false,\n      fileName: '',\n      mimeType: '',\n      error: message,\n    }\n  }\n\n  protected formatMetadata(metadata?: ExportMetadata): string {\n    if (!metadata) return ''\n\n    const lines: string[] = []\n    if (metadata.title) lines.push(`Title: ${metadata.title}`)\n    if (metadata.author) lines.push(`Author: ${metadata.author}`)\n    if (metadata.createdAt)\n      lines.push(`Created: ${metadata.createdAt.toISOString()}`)\n    if (metadata.updatedAt)\n      lines.push(`Updated: ${metadata.updatedAt.toISOString()}`)\n    if (metadata.tags?.length) lines.push(`Tags: ${metadata.tags.join(', ')}`)\n    if (metadata.description) lines.push(`Description: ${metadata.description}`)\n\n    return lines.join('\\n')\n  }\n}\n",
              ],
              names: [
                'BaseExporter',
                'getSupportedFormats',
                'format',
                'generateFileName',
                'baseName',
                'extension',
                'metadata',
                'title',
                'timestamp',
                'Date',
                'toISOString',
                'split',
                'replace',
                'createBlob',
                'content',
                'mimeType',
                'Blob',
                'type',
                'handleError',
                'error',
                'message',
                'Error',
                'console',
                'success',
                'fileName',
                'formatMetadata',
                'lines',
                'push',
                'author',
                'createdAt',
                'updatedAt',
                'tags',
                'length',
                'join',
                'description',
                'constructor',
              ],
              mappings:
                'AAUA,OAAO,MAAeA;IAepBC,sBAAsC;QACpC,OAAO;YAAC,IAAI,CAACC,MAAM;SAAC;IACtB;IAEUC,iBACRC,QAAgB,EAChBC,SAAiB,EACjBC,QAAyB,EACjB;QACR,MAAMC,QAAQD,CAAAA,qBAAAA,+BAAAA,SAAUC,KAAK,KAAIH;QACjC,MAAMI,YAAY,IAAIC,OAAOC,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;QACxD,OAAO,GAAGJ,MAAMK,OAAO,CAAC,eAAe,KAAK,CAAC,EAAEJ,UAAU,CAAC,EAAEH,WAAW;IACzE;IAEUQ,WAAWC,OAAe,EAAEC,QAAgB,EAAQ;QAC5D,OAAO,IAAIC,KAAK;YAACF;SAAQ,EAAE;YAAEG,MAAMF;QAAS;IAC9C;IAEUG,YAAYC,KAAc,EAAgB;QAClD,MAAMC,UACJD,iBAAiBE,QAAQF,MAAMC,OAAO,GAAG;QAC3CE,QAAQH,KAAK,CAAC,iBAAiBA;QAC/B,OAAO;YACLI,SAAS;YACTC,UAAU;YACVT,UAAU;YACVI,OAAOC;QACT;IACF;IAEUK,eAAenB,QAAyB,EAAU;YAUtDA;QATJ,IAAI,CAACA,UAAU,OAAO;QAEtB,MAAMoB,QAAkB,EAAE;QAC1B,IAAIpB,SAASC,KAAK,EAAEmB,MAAMC,IAAI,CAAC,CAAC,OAAO,EAAErB,SAASC,KAAK,EAAE;QACzD,IAAID,SAASsB,MAAM,EAAEF,MAAMC,IAAI,CAAC,CAAC,QAAQ,EAAErB,SAASsB,MAAM,EAAE;QAC5D,IAAItB,SAASuB,SAAS,EACpBH,MAAMC,IAAI,CAAC,CAAC,SAAS,EAAErB,SAASuB,SAAS,CAACnB,WAAW,IAAI;QAC3D,IAAIJ,SAASwB,SAAS,EACpBJ,MAAMC,IAAI,CAAC,CAAC,SAAS,EAAErB,SAASwB,SAAS,CAACpB,WAAW,IAAI;QAC3D,KAAIJ,iBAAAA,SAASyB,IAAI,cAAbzB,qCAAAA,eAAe0B,MAAM,EAAEN,MAAMC,IAAI,CAAC,CAAC,MAAM,EAAErB,SAASyB,IAAI,CAACE,IAAI,CAAC,OAAO;QACzE,IAAI3B,SAAS4B,WAAW,EAAER,MAAMC,IAAI,CAAC,CAAC,aAAa,EAAErB,SAAS4B,WAAW,EAAE;QAE3E,OAAOR,MAAMO,IAAI,CAAC;IACpB;IAxDAE,YAAYjC,MAAoB,CAAE;QAChC,IAAI,CAACA,MAAM,GAAGA;IAChB;AAuDF',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '811e9db0763fdbc97ac710ff823dcf3025ef2d10',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '811e9db0763fdbc97ac710ff823dcf3025ef2d10' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_2po4ns271c = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_2po4ns271c()
      class BaseExporter {
        getSupportedFormats() {
          return (
            cov_2po4ns271c().f[0]++,
            cov_2po4ns271c().s[0]++,
            [this.format]
          )
        }
        generateFileName(baseName, extension, metadata) {
          cov_2po4ns271c().f[1]++
          const title =
              (cov_2po4ns271c().s[1]++,
              cov_2po4ns271c().b[0][0]++,
              cov_2po4ns271c().b[2][0]++,
              (null === metadata ||
              (cov_2po4ns271c().b[2][1]++, void 0 === metadata)
                ? void cov_2po4ns271c().b[1][0]++
                : (cov_2po4ns271c().b[1][1]++, metadata.title)) ||
                (cov_2po4ns271c().b[0][1]++, baseName)),
            timestamp =
              (cov_2po4ns271c().s[2]++, new Date().toISOString().split('T')[0])
          return (
            cov_2po4ns271c().s[3]++,
            `${title.replace(/[^a-z0-9]/gi, '_')}_${timestamp}.${extension}`
          )
        }
        createBlob(content, mimeType) {
          return (
            cov_2po4ns271c().f[2]++,
            cov_2po4ns271c().s[4]++,
            new Blob([content], { type: mimeType })
          )
        }
        handleError(error) {
          cov_2po4ns271c().f[3]++
          const message =
            (cov_2po4ns271c().s[5]++,
            error instanceof Error
              ? (cov_2po4ns271c().b[3][0]++, error.message)
              : (cov_2po4ns271c().b[3][1]++, 'Unknown export error'))
          return (
            cov_2po4ns271c().s[6]++,
            console.error('Export error:', error),
            cov_2po4ns271c().s[7]++,
            { success: !1, fileName: '', mimeType: '', error: message }
          )
        }
        formatMetadata(metadata) {
          var _metadata_tags
          if ((cov_2po4ns271c().f[4]++, cov_2po4ns271c().s[8]++, !metadata))
            return (cov_2po4ns271c().b[4][0]++, cov_2po4ns271c().s[9]++, '')
          cov_2po4ns271c().b[4][1]++
          const lines = (cov_2po4ns271c().s[10]++, [])
          return (
            cov_2po4ns271c().s[11]++,
            metadata.title
              ? (cov_2po4ns271c().b[5][0]++,
                cov_2po4ns271c().s[12]++,
                lines.push(`Title: ${metadata.title}`))
              : cov_2po4ns271c().b[5][1]++,
            cov_2po4ns271c().s[13]++,
            metadata.author
              ? (cov_2po4ns271c().b[6][0]++,
                cov_2po4ns271c().s[14]++,
                lines.push(`Author: ${metadata.author}`))
              : cov_2po4ns271c().b[6][1]++,
            cov_2po4ns271c().s[15]++,
            metadata.createdAt
              ? (cov_2po4ns271c().b[7][0]++,
                cov_2po4ns271c().s[16]++,
                lines.push(`Created: ${metadata.createdAt.toISOString()}`))
              : cov_2po4ns271c().b[7][1]++,
            cov_2po4ns271c().s[17]++,
            metadata.updatedAt
              ? (cov_2po4ns271c().b[8][0]++,
                cov_2po4ns271c().s[18]++,
                lines.push(`Updated: ${metadata.updatedAt.toISOString()}`))
              : cov_2po4ns271c().b[8][1]++,
            cov_2po4ns271c().s[19]++,
            cov_2po4ns271c().b[11][0]++,
            (
              null === (_metadata_tags = metadata.tags) ||
              (cov_2po4ns271c().b[11][1]++, void 0 === _metadata_tags)
                ? void cov_2po4ns271c().b[10][0]++
                : (cov_2po4ns271c().b[10][1]++, _metadata_tags.length)
            )
              ? (cov_2po4ns271c().b[9][0]++,
                cov_2po4ns271c().s[20]++,
                lines.push(`Tags: ${metadata.tags.join(', ')}`))
              : cov_2po4ns271c().b[9][1]++,
            cov_2po4ns271c().s[21]++,
            metadata.description
              ? (cov_2po4ns271c().b[12][0]++,
                cov_2po4ns271c().s[22]++,
                lines.push(`Description: ${metadata.description}`))
              : cov_2po4ns271c().b[12][1]++,
            cov_2po4ns271c().s[23]++,
            lines.join('\n')
          )
        }
        constructor(format) {
          ;(cov_2po4ns271c().f[5]++,
            cov_2po4ns271c().s[24]++,
            (this.format = format))
        }
      }
      var index_es = __webpack_require__(
        '../../node_modules/.pnpm/slate@0.117.2/node_modules/slate/dist/index.es.js'
      )
      function cov_1kkv211nzp() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-markdown.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-markdown.ts',
            statementMap: {
              0: {
                start: { line: 4, column: 8 },
                end: { line: 4, column: 70 },
              },
              1: {
                start: { line: 4, column: 33 },
                end: { line: 4, column: 55 },
              },
              2: { start: { line: 7, column: 8 }, end: { line: 9, column: 9 } },
              3: {
                start: { line: 8, column: 12 },
                end: { line: 8, column: 42 },
              },
              4: {
                start: { line: 10, column: 8 },
                end: { line: 12, column: 9 },
              },
              5: {
                start: { line: 11, column: 12 },
                end: { line: 11, column: 45 },
              },
              6: {
                start: { line: 13, column: 8 },
                end: { line: 13, column: 18 },
              },
              7: {
                start: { line: 16, column: 19 },
                end: { line: 16, column: 28 },
              },
              8: {
                start: { line: 18, column: 8 },
                end: { line: 18, column: 44 },
              },
              9: {
                start: { line: 18, column: 23 },
                end: { line: 18, column: 44 },
              },
              10: {
                start: { line: 19, column: 8 },
                end: { line: 19, column: 44 },
              },
              11: {
                start: { line: 19, column: 25 },
                end: { line: 19, column: 44 },
              },
              12: {
                start: { line: 20, column: 8 },
                end: { line: 20, column: 52 },
              },
              13: {
                start: { line: 20, column: 28 },
                end: { line: 20, column: 52 },
              },
              14: {
                start: { line: 21, column: 8 },
                end: { line: 21, column: 53 },
              },
              15: {
                start: { line: 21, column: 32 },
                end: { line: 21, column: 53 },
              },
              16: {
                start: { line: 22, column: 8 },
                end: { line: 22, column: 44 },
              },
              17: {
                start: { line: 22, column: 23 },
                end: { line: 22, column: 44 },
              },
              18: {
                start: { line: 23, column: 8 },
                end: { line: 23, column: 20 },
              },
              19: {
                start: { line: 26, column: 25 },
                end: { line: 26, column: 88 },
              },
              20: {
                start: { line: 26, column: 55 },
                end: { line: 26, column: 78 },
              },
              21: {
                start: { line: 27, column: 8 },
                end: { line: 48, column: 9 },
              },
              22: {
                start: { line: 29, column: 16 },
                end: { line: 30, column: 17 },
              },
              23: {
                start: { line: 32, column: 16 },
                end: { line: 32, column: 39 },
              },
              24: {
                start: { line: 34, column: 16 },
                end: { line: 34, column: 40 },
              },
              25: {
                start: { line: 36, column: 16 },
                end: { line: 36, column: 41 },
              },
              26: {
                start: { line: 38, column: 16 },
                end: { line: 38, column: 80 },
              },
              27: {
                start: { line: 38, column: 56 },
                end: { line: 38, column: 67 },
              },
              28: {
                start: { line: 40, column: 16 },
                end: { line: 40, column: 56 },
              },
              29: {
                start: { line: 42, column: 16 },
                end: { line: 42, column: 55 },
              },
              30: {
                start: { line: 44, column: 16 },
                end: { line: 44, column: 32 },
              },
              31: {
                start: { line: 47, column: 16 },
                end: { line: 47, column: 32 },
              },
              32: {
                start: { line: 51, column: 8 },
                end: { line: 51, column: 25 },
              },
              33: {
                start: { line: 52, column: 8 },
                end: { line: 54, column: 9 },
              },
              34: {
                start: { line: 53, column: 12 },
                end: { line: 53, column: 53 },
              },
              35: {
                start: { line: 55, column: 22 },
                end: { line: 66, column: 37 },
              },
              36: {
                start: { line: 56, column: 12 },
                end: { line: 64, column: 13 },
              },
              37: {
                start: { line: 57, column: 31 },
                end: { line: 57, column: 62 },
              },
              38: {
                start: { line: 58, column: 31 },
                end: { line: 58, column: 97 },
              },
              39: {
                start: { line: 59, column: 16 },
                end: { line: 61, column: 17 },
              },
              40: {
                start: { line: 60, column: 20 },
                end: { line: 60, column: 108 },
              },
              41: {
                start: { line: 62, column: 32 },
                end: { line: 62, column: 85 },
              },
              42: {
                start: { line: 62, column: 56 },
                end: { line: 62, column: 75 },
              },
              43: {
                start: { line: 63, column: 16 },
                end: { line: 63, column: 54 },
              },
              44: {
                start: { line: 65, column: 12 },
                end: { line: 65, column: 22 },
              },
              45: {
                start: { line: 67, column: 8 },
                end: { line: 67, column: 25 },
              },
              46: {
                start: { line: 68, column: 8 },
                end: { line: 70, column: 9 },
              },
              47: {
                start: { line: 69, column: 12 },
                end: { line: 69, column: 38 },
              },
              48: {
                start: { line: 71, column: 8 },
                end: { line: 71, column: 21 },
              },
              49: {
                start: { line: 77, column: 8 },
                end: { line: 77, column: 35 },
              },
              50: {
                start: { line: 80, column: 8 },
                end: { line: 80, column: 27 },
              },
              51: {
                start: { line: 81, column: 8 },
                end: { line: 81, column: 38 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 3, column: 4 },
                  end: { line: 3, column: 5 },
                },
                loc: {
                  start: { line: 3, column: 19 },
                  end: { line: 5, column: 5 },
                },
                line: 3,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 4, column: 25 },
                  end: { line: 4, column: 26 },
                },
                loc: {
                  start: { line: 4, column: 33 },
                  end: { line: 4, column: 55 },
                },
                line: 4,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 6, column: 4 },
                  end: { line: 6, column: 5 },
                },
                loc: {
                  start: { line: 6, column: 22 },
                  end: { line: 14, column: 5 },
                },
                line: 6,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 15, column: 4 },
                  end: { line: 15, column: 5 },
                },
                loc: {
                  start: { line: 15, column: 22 },
                  end: { line: 24, column: 5 },
                },
                line: 15,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 25, column: 4 },
                  end: { line: 25, column: 5 },
                },
                loc: {
                  start: { line: 25, column: 28 },
                  end: { line: 49, column: 5 },
                },
                line: 25,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 26, column: 46 },
                  end: { line: 26, column: 47 },
                },
                loc: {
                  start: { line: 26, column: 55 },
                  end: { line: 26, column: 78 },
                },
                line: 26,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 38, column: 48 },
                  end: { line: 38, column: 49 },
                },
                loc: {
                  start: { line: 38, column: 56 },
                  end: { line: 38, column: 67 },
                },
                line: 38,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 50, column: 4 },
                  end: { line: 50, column: 5 },
                },
                loc: {
                  start: { line: 50, column: 34 },
                  end: { line: 72, column: 5 },
                },
                line: 50,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 55, column: 43 },
                  end: { line: 55, column: 44 },
                },
                loc: {
                  start: { line: 55, column: 59 },
                  end: { line: 66, column: 9 },
                },
                line: 55,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 62, column: 51 },
                  end: { line: 62, column: 52 },
                },
                loc: {
                  start: { line: 62, column: 56 },
                  end: { line: 62, column: 75 },
                },
                line: 62,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 74, column: 4 },
                  end: { line: 74, column: 5 },
                },
                loc: {
                  start: { line: 74, column: 24 },
                  end: { line: 78, column: 5 },
                },
                line: 74,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 79, column: 4 },
                  end: { line: 79, column: 5 },
                },
                loc: {
                  start: { line: 79, column: 17 },
                  end: { line: 82, column: 5 },
                },
                line: 79,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 7, column: 8 },
                  end: { line: 9, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 7, column: 8 },
                    end: { line: 9, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 7,
              },
              1: {
                loc: {
                  start: { line: 10, column: 8 },
                  end: { line: 12, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 10, column: 8 },
                    end: { line: 12, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 10,
              },
              2: {
                loc: {
                  start: { line: 18, column: 8 },
                  end: { line: 18, column: 44 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 18, column: 8 },
                    end: { line: 18, column: 44 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 18,
              },
              3: {
                loc: {
                  start: { line: 19, column: 8 },
                  end: { line: 19, column: 44 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 19, column: 8 },
                    end: { line: 19, column: 44 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 19,
              },
              4: {
                loc: {
                  start: { line: 20, column: 8 },
                  end: { line: 20, column: 52 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 20, column: 8 },
                    end: { line: 20, column: 52 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 20,
              },
              5: {
                loc: {
                  start: { line: 21, column: 8 },
                  end: { line: 21, column: 53 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 21, column: 8 },
                    end: { line: 21, column: 53 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 21,
              },
              6: {
                loc: {
                  start: { line: 22, column: 8 },
                  end: { line: 22, column: 44 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 22, column: 8 },
                    end: { line: 22, column: 44 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 22,
              },
              7: {
                loc: {
                  start: { line: 27, column: 8 },
                  end: { line: 48, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 28, column: 12 },
                    end: { line: 30, column: 17 },
                  },
                  {
                    start: { line: 31, column: 12 },
                    end: { line: 32, column: 39 },
                  },
                  {
                    start: { line: 33, column: 12 },
                    end: { line: 34, column: 40 },
                  },
                  {
                    start: { line: 35, column: 12 },
                    end: { line: 36, column: 41 },
                  },
                  {
                    start: { line: 37, column: 12 },
                    end: { line: 38, column: 80 },
                  },
                  {
                    start: { line: 39, column: 12 },
                    end: { line: 40, column: 56 },
                  },
                  {
                    start: { line: 41, column: 12 },
                    end: { line: 42, column: 55 },
                  },
                  {
                    start: { line: 43, column: 12 },
                    end: { line: 44, column: 32 },
                  },
                  {
                    start: { line: 45, column: 12 },
                    end: { line: 47, column: 32 },
                  },
                ],
                line: 27,
              },
              8: {
                loc: {
                  start: { line: 29, column: 23 },
                  end: { line: 29, column: 37 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 29, column: 23 },
                    end: { line: 29, column: 31 },
                  },
                  {
                    start: { line: 29, column: 35 },
                    end: { line: 29, column: 37 },
                  },
                ],
                line: 29,
              },
              9: {
                loc: {
                  start: { line: 52, column: 8 },
                  end: { line: 54, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 52, column: 8 },
                    end: { line: 54, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 52,
              },
              10: {
                loc: {
                  start: { line: 52, column: 12 },
                  end: { line: 52, column: 61 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 52, column: 12 },
                    end: { line: 52, column: 19 },
                  },
                  {
                    start: { line: 52, column: 23 },
                    end: { line: 52, column: 61 },
                  },
                ],
                line: 52,
              },
              11: {
                loc: {
                  start: { line: 56, column: 12 },
                  end: { line: 64, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 56, column: 12 },
                    end: { line: 64, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 56,
              },
              12: {
                loc: {
                  start: { line: 56, column: 16 },
                  end: { line: 56, column: 70 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 56, column: 16 },
                    end: { line: 56, column: 40 },
                  },
                  {
                    start: { line: 56, column: 44 },
                    end: { line: 56, column: 70 },
                  },
                ],
                line: 56,
              },
              13: {
                loc: {
                  start: { line: 58, column: 31 },
                  end: { line: 58, column: 97 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 58, column: 41 },
                    end: { line: 58, column: 90 },
                  },
                  {
                    start: { line: 58, column: 93 },
                    end: { line: 58, column: 97 },
                  },
                ],
                line: 58,
              },
              14: {
                loc: {
                  start: { line: 58, column: 44 },
                  end: { line: 58, column: 86 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 58, column: 44 },
                    end: { line: 58, column: 81 },
                  },
                  {
                    start: { line: 58, column: 85 },
                    end: { line: 58, column: 86 },
                  },
                ],
                line: 58,
              },
              15: {
                loc: {
                  start: { line: 59, column: 16 },
                  end: { line: 61, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 59, column: 16 },
                    end: { line: 61, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 59,
              },
              16: {
                loc: {
                  start: { line: 60, column: 59 },
                  end: { line: 60, column: 101 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 60, column: 59 },
                    end: { line: 60, column: 96 },
                  },
                  {
                    start: { line: 60, column: 100 },
                    end: { line: 60, column: 101 },
                  },
                ],
                line: 60,
              },
              17: {
                loc: {
                  start: { line: 68, column: 8 },
                  end: { line: 70, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 68, column: 8 },
                    end: { line: 70, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 68,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0, 0, 0, 0, 0, 0, 0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-markdown.ts',
              ],
              sourcesContent: [
                "import { type Descendant, Element, Text } from 'slate'\n\nexport class SlateToMarkdownConverter {\n  private listDepth = 0\n  private listCounters: Map<number, number> = new Map()\n\n  convert(nodes: Descendant[]): string {\n    return nodes.map((node) => this.convertNode(node)).join('\\n\\n')\n  }\n\n  private convertNode(node: Descendant): string {\n    if (Text.isText(node)) {\n      return this.convertText(node)\n    }\n\n    if (Element.isElement(node)) {\n      return this.convertElement(node)\n    }\n\n    return ''\n  }\n\n  private convertText(node: Text): string {\n    let text = node.text\n\n    // Apply inline formatting\n    if (node.bold) text = `**${text}**`\n    if (node.italic) text = `*${text}*`\n    if (node.underline) text = `<u>${text}</u>`\n    if (node.strikethrough) text = `~~${text}~~`\n    if (node.code) text = `\\`${text}\\``\n\n    return text\n  }\n\n  private convertElement(element: Element): string {\n    const children = element.children\n      .map((child) => this.convertNode(child))\n      .join('')\n\n    switch (element.type) {\n      case 'paragraph':\n        return children || '' // Empty string for empty paragraphs\n\n      case 'heading-one':\n        return `# ${children}`\n\n      case 'heading-two':\n        return `## ${children}`\n\n      case 'heading-three':\n        return `### ${children}`\n\n      case 'block-quote':\n        return children\n          .split('\\n')\n          .map((line) => `> ${line}`)\n          .join('\\n')\n\n      case 'bulleted-list':\n        return this.convertList(element, false)\n\n      case 'numbered-list':\n        return this.convertList(element, true)\n\n      case 'list-item':\n        return children\n\n      default:\n        // Fallback for unknown element types\n        return children\n    }\n  }\n\n  private convertList(element: Element, ordered: boolean): string {\n    this.listDepth++\n\n    if (ordered && !this.listCounters.has(this.listDepth)) {\n      this.listCounters.set(this.listDepth, 1)\n    }\n\n    const items = element.children\n      .map((child, index) => {\n        if (Element.isElement(child) && child.type === 'list-item') {\n          const indent = '  '.repeat(this.listDepth - 1)\n          const marker = ordered\n            ? `${this.listCounters.get(this.listDepth) || 1}. `\n            : '- '\n\n          if (ordered) {\n            this.listCounters.set(\n              this.listDepth,\n              (this.listCounters.get(this.listDepth) || 1) + 1\n            )\n          }\n\n          const content = child.children\n            .map((c) => this.convertNode(c))\n            .join('')\n\n          return `${indent}${marker}${content}`\n        }\n        return ''\n      })\n      .filter(Boolean)\n      .join('\\n')\n\n    this.listDepth--\n\n    if (this.listDepth === 0) {\n      this.listCounters.clear()\n    }\n\n    return items\n  }\n\n  // GitHub Flavored Markdown extensions\n  convertToGFM(nodes: Descendant[]): string {\n    // For now, standard markdown is compatible with GFM\n    // Additional GFM features like tables would be added here\n    return this.convert(nodes)\n  }\n}\n",
              ],
              names: [
                'Element',
                'Text',
                'SlateToMarkdownConverter',
                'convert',
                'nodes',
                'map',
                'node',
                'convertNode',
                'join',
                'isText',
                'convertText',
                'isElement',
                'convertElement',
                'text',
                'bold',
                'italic',
                'underline',
                'strikethrough',
                'code',
                'element',
                'children',
                'child',
                'type',
                'split',
                'line',
                'convertList',
                'ordered',
                'listDepth',
                'listCounters',
                'has',
                'set',
                'items',
                'index',
                'indent',
                'repeat',
                'marker',
                'get',
                'content',
                'c',
                'filter',
                'Boolean',
                'clear',
                'convertToGFM',
                'Map',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: 'fbe0c8ea4bd56eebd52d3671ec4d372078a853db',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          'fbe0c8ea4bd56eebd52d3671ec4d372078a853db' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_1kkv211nzp = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_1kkv211nzp()
      class SlateToMarkdownConverter {
        convert(nodes) {
          return (
            cov_1kkv211nzp().f[0]++,
            cov_1kkv211nzp().s[0]++,
            nodes
              .map(
                (node) => (
                  cov_1kkv211nzp().f[1]++,
                  cov_1kkv211nzp().s[1]++,
                  this.convertNode(node)
                )
              )
              .join('\n\n')
          )
        }
        convertNode(node) {
          return (
            cov_1kkv211nzp().f[2]++,
            cov_1kkv211nzp().s[2]++,
            index_es.EY.isText(node)
              ? (cov_1kkv211nzp().b[0][0]++,
                cov_1kkv211nzp().s[3]++,
                this.convertText(node))
              : (cov_1kkv211nzp().b[0][1]++,
                cov_1kkv211nzp().s[4]++,
                index_es.Hg.isElement(node)
                  ? (cov_1kkv211nzp().b[1][0]++,
                    cov_1kkv211nzp().s[5]++,
                    this.convertElement(node))
                  : (cov_1kkv211nzp().b[1][1]++, cov_1kkv211nzp().s[6]++, ''))
          )
        }
        convertText(node) {
          cov_1kkv211nzp().f[3]++
          let text = (cov_1kkv211nzp().s[7]++, node.text)
          return (
            cov_1kkv211nzp().s[8]++,
            node.bold
              ? (cov_1kkv211nzp().b[2][0]++,
                cov_1kkv211nzp().s[9]++,
                (text = `**${text}**`))
              : cov_1kkv211nzp().b[2][1]++,
            cov_1kkv211nzp().s[10]++,
            node.italic
              ? (cov_1kkv211nzp().b[3][0]++,
                cov_1kkv211nzp().s[11]++,
                (text = `*${text}*`))
              : cov_1kkv211nzp().b[3][1]++,
            cov_1kkv211nzp().s[12]++,
            node.underline
              ? (cov_1kkv211nzp().b[4][0]++,
                cov_1kkv211nzp().s[13]++,
                (text = `<u>${text}</u>`))
              : cov_1kkv211nzp().b[4][1]++,
            cov_1kkv211nzp().s[14]++,
            node.strikethrough
              ? (cov_1kkv211nzp().b[5][0]++,
                cov_1kkv211nzp().s[15]++,
                (text = `~~${text}~~`))
              : cov_1kkv211nzp().b[5][1]++,
            cov_1kkv211nzp().s[16]++,
            node.code
              ? (cov_1kkv211nzp().b[6][0]++,
                cov_1kkv211nzp().s[17]++,
                (text = `\`${text}\``))
              : cov_1kkv211nzp().b[6][1]++,
            cov_1kkv211nzp().s[18]++,
            text
          )
        }
        convertElement(element) {
          cov_1kkv211nzp().f[4]++
          const children =
            (cov_1kkv211nzp().s[19]++,
            element.children
              .map(
                (child) => (
                  cov_1kkv211nzp().f[5]++,
                  cov_1kkv211nzp().s[20]++,
                  this.convertNode(child)
                )
              )
              .join(''))
          switch ((cov_1kkv211nzp().s[21]++, element.type)) {
            case 'paragraph':
              return (
                cov_1kkv211nzp().b[7][0]++,
                cov_1kkv211nzp().s[22]++,
                cov_1kkv211nzp().b[8][0]++,
                children || (cov_1kkv211nzp().b[8][1]++, '')
              )
            case 'heading-one':
              return (
                cov_1kkv211nzp().b[7][1]++,
                cov_1kkv211nzp().s[23]++,
                `# ${children}`
              )
            case 'heading-two':
              return (
                cov_1kkv211nzp().b[7][2]++,
                cov_1kkv211nzp().s[24]++,
                `## ${children}`
              )
            case 'heading-three':
              return (
                cov_1kkv211nzp().b[7][3]++,
                cov_1kkv211nzp().s[25]++,
                `### ${children}`
              )
            case 'block-quote':
              return (
                cov_1kkv211nzp().b[7][4]++,
                cov_1kkv211nzp().s[26]++,
                children
                  .split('\n')
                  .map(
                    (line) => (
                      cov_1kkv211nzp().f[6]++,
                      cov_1kkv211nzp().s[27]++,
                      `> ${line}`
                    )
                  )
                  .join('\n')
              )
            case 'bulleted-list':
              return (
                cov_1kkv211nzp().b[7][5]++,
                cov_1kkv211nzp().s[28]++,
                this.convertList(element, !1)
              )
            case 'numbered-list':
              return (
                cov_1kkv211nzp().b[7][6]++,
                cov_1kkv211nzp().s[29]++,
                this.convertList(element, !0)
              )
            case 'list-item':
              return (
                cov_1kkv211nzp().b[7][7]++,
                cov_1kkv211nzp().s[30]++,
                children
              )
            default:
              return (
                cov_1kkv211nzp().b[7][8]++,
                cov_1kkv211nzp().s[31]++,
                children
              )
          }
        }
        convertList(element, ordered) {
          ;(cov_1kkv211nzp().f[7]++,
            cov_1kkv211nzp().s[32]++,
            this.listDepth++,
            cov_1kkv211nzp().s[33]++,
            cov_1kkv211nzp().b[10][0]++,
            ordered &&
            (cov_1kkv211nzp().b[10][1]++,
            !this.listCounters.has(this.listDepth))
              ? (cov_1kkv211nzp().b[9][0]++,
                cov_1kkv211nzp().s[34]++,
                this.listCounters.set(this.listDepth, 1))
              : cov_1kkv211nzp().b[9][1]++)
          const items =
            (cov_1kkv211nzp().s[35]++,
            element.children
              .map((child, index) => {
                if (
                  (cov_1kkv211nzp().f[8]++,
                  cov_1kkv211nzp().s[36]++,
                  cov_1kkv211nzp().b[12][0]++,
                  index_es.Hg.isElement(child) &&
                    (cov_1kkv211nzp().b[12][1]++, 'list-item' === child.type))
                ) {
                  cov_1kkv211nzp().b[11][0]++
                  const indent =
                      (cov_1kkv211nzp().s[37]++,
                      '  '.repeat(this.listDepth - 1)),
                    marker =
                      (cov_1kkv211nzp().s[38]++,
                      ordered
                        ? (cov_1kkv211nzp().b[13][0]++,
                          `${(cov_1kkv211nzp().b[14][0]++, this.listCounters.get(this.listDepth) || (cov_1kkv211nzp().b[14][1]++, 1))}. `)
                        : (cov_1kkv211nzp().b[13][1]++, '- '))
                  ;(cov_1kkv211nzp().s[39]++,
                    ordered
                      ? (cov_1kkv211nzp().b[15][0]++,
                        cov_1kkv211nzp().s[40]++,
                        this.listCounters.set(
                          this.listDepth,
                          (cov_1kkv211nzp().b[16][0]++,
                          (this.listCounters.get(this.listDepth) ||
                            (cov_1kkv211nzp().b[16][1]++, 1)) + 1)
                        ))
                      : cov_1kkv211nzp().b[15][1]++)
                  const content =
                    (cov_1kkv211nzp().s[41]++,
                    child.children
                      .map(
                        (c) => (
                          cov_1kkv211nzp().f[9]++,
                          cov_1kkv211nzp().s[42]++,
                          this.convertNode(c)
                        )
                      )
                      .join(''))
                  return (
                    cov_1kkv211nzp().s[43]++,
                    `${indent}${marker}${content}`
                  )
                }
                return (
                  cov_1kkv211nzp().b[11][1]++,
                  cov_1kkv211nzp().s[44]++,
                  ''
                )
              })
              .filter(Boolean)
              .join('\n'))
          return (
            cov_1kkv211nzp().s[45]++,
            this.listDepth--,
            cov_1kkv211nzp().s[46]++,
            0 === this.listDepth
              ? (cov_1kkv211nzp().b[17][0]++,
                cov_1kkv211nzp().s[47]++,
                this.listCounters.clear())
              : cov_1kkv211nzp().b[17][1]++,
            cov_1kkv211nzp().s[48]++,
            items
          )
        }
        convertToGFM(nodes) {
          return (
            cov_1kkv211nzp().f[10]++,
            cov_1kkv211nzp().s[49]++,
            this.convert(nodes)
          )
        }
        constructor() {
          ;(cov_1kkv211nzp().f[11]++,
            cov_1kkv211nzp().s[50]++,
            (this.listDepth = 0),
            cov_1kkv211nzp().s[51]++,
            (this.listCounters = new Map()))
        }
      }
      function cov_stbgq0mjt() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/utils/archive-utils.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/utils/archive-utils.ts',
            statementMap: {
              0: {
                start: { line: 13, column: 8 },
                end: { line: 18, column: 9 },
              },
              1: {
                start: { line: 14, column: 12 },
                end: { line: 14, column: 48 },
              },
              2: {
                start: { line: 17, column: 12 },
                end: { line: 17, column: 48 },
              },
              3: {
                start: { line: 23, column: 25 },
                end: { line: 23, column: 51 },
              },
              4: {
                start: { line: 24, column: 31 },
                end: { line: 24, column: 33 },
              },
              5: {
                start: { line: 25, column: 8 },
                end: { line: 25, column: 56 },
              },
              6: {
                start: { line: 26, column: 8 },
                end: { line: 26, column: 70 },
              },
              7: {
                start: { line: 27, column: 8 },
                end: { line: 27, column: 62 },
              },
              8: {
                start: { line: 28, column: 8 },
                end: { line: 28, column: 32 },
              },
              9: {
                start: { line: 29, column: 8 },
                end: { line: 41, column: 9 },
              },
              10: {
                start: { line: 30, column: 12 },
                end: { line: 30, column: 42 },
              },
              11: {
                start: { line: 31, column: 12 },
                end: { line: 31, column: 54 },
              },
              12: {
                start: { line: 32, column: 12 },
                end: { line: 32, column: 44 },
              },
              13: {
                start: { line: 33, column: 12 },
                end: { line: 39, column: 13 },
              },
              14: {
                start: { line: 35, column: 29 },
                end: { line: 35, column: 54 },
              },
              15: {
                start: { line: 36, column: 16 },
                end: { line: 36, column: 42 },
              },
              16: {
                start: { line: 38, column: 16 },
                end: { line: 38, column: 50 },
              },
              17: {
                start: { line: 40, column: 12 },
                end: { line: 40, column: 36 },
              },
              18: {
                start: { line: 42, column: 8 },
                end: { line: 42, column: 38 },
              },
              19: {
                start: { line: 43, column: 28 },
                end: { line: 43, column: 53 },
              },
              20: {
                start: { line: 44, column: 8 },
                end: { line: 48, column: 11 },
              },
              21: {
                start: { line: 53, column: 8 },
                end: { line: 55, column: 9 },
              },
              22: {
                start: { line: 54, column: 12 },
                end: { line: 54, column: 25 },
              },
              23: {
                start: { line: 57, column: 26 },
                end: { line: 57, column: 28 },
              },
              24: {
                start: { line: 58, column: 28 },
                end: { line: 58, column: 37 },
              },
              25: {
                start: { line: 59, column: 8 },
                end: { line: 65, column: 11 },
              },
              26: {
                start: { line: 61, column: 30 },
                end: { line: 61, column: 184 },
              },
              27: {
                start: { line: 62, column: 29 },
                end: { line: 62, column: 61 },
              },
              28: {
                start: { line: 63, column: 12 },
                end: { line: 63, column: 32 },
              },
              29: {
                start: { line: 64, column: 12 },
                end: { line: 64, column: 49 },
              },
              30: {
                start: { line: 67, column: 8 },
                end: { line: 81, column: 11 },
              },
              31: {
                start: { line: 69, column: 12 },
                end: { line: 73, column: 15 },
              },
              32: {
                start: { line: 75, column: 12 },
                end: { line: 80, column: 15 },
              },
              33: {
                start: { line: 76, column: 16 },
                end: { line: 79, column: 19 },
              },
              34: {
                start: { line: 82, column: 8 },
                end: { line: 82, column: 25 },
              },
              35: {
                start: { line: 87, column: 23 },
                end: { line: 87, column: 25 },
              },
              36: {
                start: { line: 88, column: 8 },
                end: { line: 90, column: 9 },
              },
              37: {
                start: { line: 89, column: 12 },
                end: { line: 89, column: 47 },
              },
              38: {
                start: { line: 91, column: 22 },
                end: { line: 91, column: 31 },
              },
              39: {
                start: { line: 92, column: 8 },
                end: { line: 103, column: 11 },
              },
              40: {
                start: { line: 93, column: 12 },
                end: { line: 95, column: 13 },
              },
              41: {
                start: { line: 94, column: 16 },
                end: { line: 94, column: 66 },
              },
              42: {
                start: { line: 96, column: 12 },
                end: { line: 98, column: 13 },
              },
              43: {
                start: { line: 97, column: 16 },
                end: { line: 97, column: 65 },
              },
              44: {
                start: { line: 99, column: 12 },
                end: { line: 99, column: 33 },
              },
              45: {
                start: { line: 100, column: 12 },
                end: { line: 102, column: 13 },
              },
              46: {
                start: { line: 101, column: 16 },
                end: { line: 101, column: 64 },
              },
              47: {
                start: { line: 104, column: 8 },
                end: { line: 107, column: 10 },
              },
              48: {
                start: { line: 112, column: 24 },
                end: { line: 112, column: 25 },
              },
              49: {
                start: { line: 113, column: 8 },
                end: { line: 121, column: 11 },
              },
              50: {
                start: { line: 114, column: 12 },
                end: { line: 120, column: 13 },
              },
              51: {
                start: { line: 115, column: 16 },
                end: { line: 115, column: 47 },
              },
              52: {
                start: { line: 117, column: 16 },
                end: { line: 119, column: 24 },
              },
              53: {
                start: { line: 123, column: 8 },
                end: { line: 123, column: 42 },
              },
              54: {
                start: { line: 128, column: 19 },
                end: { line: 128, column: 55 },
              },
              55: {
                start: { line: 129, column: 8 },
                end: { line: 134, column: 9 },
              },
              56: {
                start: { line: 130, column: 24 },
                end: { line: 130, column: 34 },
              },
              57: {
                start: { line: 131, column: 28 },
                end: { line: 131, column: 59 },
              },
              58: {
                start: { line: 132, column: 28 },
                end: { line: 132, column: 78 },
              },
              59: {
                start: { line: 133, column: 12 },
                end: { line: 133, column: 45 },
              },
              60: {
                start: { line: 135, column: 8 },
                end: { line: 135, column: 47 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 10, column: 6 },
                  end: { line: 10, column: 7 },
                },
                loc: {
                  start: { line: 12, column: 7 },
                  end: { line: 19, column: 5 },
                },
                line: 12,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 20, column: 4 },
                  end: { line: 20, column: 5 },
                },
                loc: {
                  start: { line: 20, column: 41 },
                  end: { line: 49, column: 5 },
                },
                line: 20,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 52, column: 6 },
                  end: { line: 52, column: 7 },
                },
                loc: {
                  start: { line: 52, column: 66 },
                  end: { line: 83, column: 5 },
                },
                line: 52,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 59, column: 22 },
                  end: { line: 59, column: 23 },
                },
                loc: {
                  start: { line: 59, column: 30 },
                  end: { line: 65, column: 9 },
                },
                line: 59,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 67, column: 28 },
                  end: { line: 67, column: 29 },
                },
                loc: {
                  start: { line: 67, column: 47 },
                  end: { line: 81, column: 9 },
                },
                line: 67,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 75, column: 30 },
                  end: { line: 75, column: 31 },
                },
                loc: {
                  start: { line: 75, column: 38 },
                  end: { line: 80, column: 13 },
                },
                line: 75,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 86, column: 6 },
                  end: { line: 86, column: 7 },
                },
                loc: {
                  start: { line: 86, column: 34 },
                  end: { line: 108, column: 5 },
                },
                line: 86,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 92, column: 22 },
                  end: { line: 92, column: 23 },
                },
                loc: {
                  start: { line: 92, column: 37 },
                  end: { line: 103, column: 9 },
                },
                line: 92,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 111, column: 6 },
                  end: { line: 111, column: 7 },
                },
                loc: {
                  start: { line: 111, column: 40 },
                  end: { line: 124, column: 5 },
                },
                line: 111,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 113, column: 22 },
                  end: { line: 113, column: 23 },
                },
                loc: {
                  start: { line: 113, column: 30 },
                  end: { line: 121, column: 9 },
                },
                line: 113,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 127, column: 6 },
                  end: { line: 127, column: 7 },
                },
                loc: {
                  start: { line: 127, column: 80 },
                  end: { line: 136, column: 5 },
                },
                line: 127,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 10, column: 40 },
                  end: { line: 12, column: 5 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 10, column: 50 },
                    end: { line: 12, column: 5 },
                  },
                ],
                line: 10,
              },
              1: {
                loc: {
                  start: { line: 13, column: 8 },
                  end: { line: 18, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 13, column: 8 },
                    end: { line: 18, column: 9 },
                  },
                  {
                    start: { line: 15, column: 15 },
                    end: { line: 18, column: 9 },
                  },
                ],
                line: 13,
              },
              2: {
                loc: {
                  start: { line: 33, column: 12 },
                  end: { line: 39, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 33, column: 12 },
                    end: { line: 39, column: 13 },
                  },
                  {
                    start: { line: 37, column: 19 },
                    end: { line: 39, column: 13 },
                  },
                ],
                line: 33,
              },
              3: {
                loc: {
                  start: { line: 52, column: 45 },
                  end: { line: 52, column: 64 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 52, column: 60 },
                    end: { line: 52, column: 64 },
                  },
                ],
                line: 52,
              },
              4: {
                loc: {
                  start: { line: 53, column: 8 },
                  end: { line: 55, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 53, column: 8 },
                    end: { line: 55, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 53,
              },
              5: {
                loc: {
                  start: { line: 61, column: 30 },
                  end: { line: 61, column: 184 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 61, column: 31 },
                    end: { line: 61, column: 172 },
                  },
                  {
                    start: { line: 61, column: 177 },
                    end: { line: 61, column: 184 },
                  },
                ],
                line: 61,
              },
              6: {
                loc: {
                  start: { line: 61, column: 31 },
                  end: { line: 61, column: 172 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 61, column: 129 },
                    end: { line: 61, column: 135 },
                  },
                  {
                    start: { line: 61, column: 138 },
                    end: { line: 61, column: 172 },
                  },
                ],
                line: 61,
              },
              7: {
                loc: {
                  start: { line: 61, column: 31 },
                  end: { line: 61, column: 126 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 61, column: 31 },
                    end: { line: 61, column: 91 },
                  },
                  {
                    start: { line: 61, column: 95 },
                    end: { line: 61, column: 126 },
                  },
                ],
                line: 61,
              },
              8: {
                loc: {
                  start: { line: 62, column: 29 },
                  end: { line: 62, column: 61 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 62, column: 29 },
                    end: { line: 62, column: 55 },
                  },
                  {
                    start: { line: 62, column: 59 },
                    end: { line: 62, column: 61 },
                  },
                ],
                line: 62,
              },
              9: {
                loc: {
                  start: { line: 88, column: 8 },
                  end: { line: 90, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 88, column: 8 },
                    end: { line: 90, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 88,
              },
              10: {
                loc: {
                  start: { line: 93, column: 12 },
                  end: { line: 95, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 93, column: 12 },
                    end: { line: 95, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 93,
              },
              11: {
                loc: {
                  start: { line: 93, column: 16 },
                  end: { line: 93, column: 53 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 93, column: 16 },
                    end: { line: 93, column: 26 },
                  },
                  {
                    start: { line: 93, column: 30 },
                    end: { line: 93, column: 53 },
                  },
                ],
                line: 93,
              },
              12: {
                loc: {
                  start: { line: 96, column: 12 },
                  end: { line: 98, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 96, column: 12 },
                    end: { line: 98, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 96,
              },
              13: {
                loc: {
                  start: { line: 100, column: 12 },
                  end: { line: 102, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 100, column: 12 },
                    end: { line: 102, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 100,
              },
              14: {
                loc: {
                  start: { line: 100, column: 16 },
                  end: { line: 100, column: 67 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 100, column: 16 },
                    end: { line: 100, column: 42 },
                  },
                  {
                    start: { line: 100, column: 46 },
                    end: { line: 100, column: 67 },
                  },
                ],
                line: 100,
              },
              15: {
                loc: {
                  start: { line: 114, column: 12 },
                  end: { line: 120, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 114, column: 12 },
                    end: { line: 120, column: 13 },
                  },
                  {
                    start: { line: 116, column: 19 },
                    end: { line: 120, column: 13 },
                  },
                ],
                line: 114,
              },
              16: {
                loc: {
                  start: { line: 127, column: 33 },
                  end: { line: 127, column: 52 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 127, column: 44 },
                    end: { line: 127, column: 52 },
                  },
                ],
                line: 127,
              },
              17: {
                loc: {
                  start: { line: 127, column: 62 },
                  end: { line: 127, column: 78 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 127, column: 74 },
                    end: { line: 127, column: 78 },
                  },
                ],
                line: 127,
              },
              18: {
                loc: {
                  start: { line: 129, column: 8 },
                  end: { line: 134, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 129, column: 8 },
                    end: { line: 134, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 129,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
            },
            b: {
              0: [0],
              1: [0, 0],
              2: [0, 0],
              3: [0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0],
              17: [0],
              18: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/utils/archive-utils.ts',
              ],
              sourcesContent: [
                "// Archive utilities for bulk export functionality\n// This provides a lightweight ZIP creation for bulk exports\n\nexport interface FileEntry {\n  name: string\n  content: string | Blob\n  isDirectory?: boolean\n}\n\nexport interface ArchiveOptions {\n  type: 'zip' | 'tar'\n  compression?: boolean\n}\n\n/**\n * Simple ZIP file creator using built-in browser APIs\n * For production use, consider using libraries like JSZip\n */\nexport class ArchiveCreator {\n  /**\n   * Creates a ZIP-like archive from file entries\n   * Note: This is a simplified implementation. For full ZIP support, use JSZip library\n   */\n  static async createArchive(\n    files: FileEntry[],\n    options: ArchiveOptions = { type: 'zip' }\n  ): Promise<Blob> {\n    if (options.type === 'zip') {\n      return this.createZipArchive(files)\n    } else {\n      // For now, fallback to ZIP for TAR\n      return this.createZipArchive(files)\n    }\n  }\n\n  private static async createZipArchive(files: FileEntry[]): Promise<Blob> {\n    // Simple ZIP-like structure\n    // In production, use JSZip for proper ZIP creation\n    const boundary = '----ARCHIVE_BOUNDARY----'\n    const archiveContent: string[] = []\n\n    archiveContent.push('# Exported Notes Archive')\n    archiveContent.push(`# Created: ${new Date().toISOString()}`)\n    archiveContent.push(`# Total files: ${files.length}`)\n    archiveContent.push('')\n\n    for (const file of files) {\n      archiveContent.push(boundary)\n      archiveContent.push(`File: ${file.name}`)\n      archiveContent.push('Content:')\n\n      if (file.content instanceof Blob) {\n        // Convert blob to text\n        const text = await file.content.text()\n        archiveContent.push(text)\n      } else {\n        archiveContent.push(file.content)\n      }\n\n      archiveContent.push('')\n    }\n\n    archiveContent.push(boundary)\n\n    const archiveText = archiveContent.join('\\n')\n    return new Blob([archiveText], { type: 'text/plain' })\n  }\n\n  /**\n   * Creates a folder structure for bulk exports\n   */\n  static organizeFilesByStructure(\n    files: FileEntry[],\n    useStructure: boolean = true\n  ): FileEntry[] {\n    if (!useStructure) {\n      return files\n    }\n\n    // Group files by type/category\n    const organized: FileEntry[] = []\n    const filesByType = new Map<string, FileEntry[]>()\n\n    files.forEach((file) => {\n      const extension = file.name.split('.').pop()?.toLowerCase() || 'other'\n      const existing = filesByType.get(extension) || []\n      existing.push(file)\n      filesByType.set(extension, existing)\n    })\n\n    // Create organized structure\n    filesByType.forEach((typeFiles, type) => {\n      // Add directory marker\n      organized.push({\n        name: `${type}/`,\n        content: '',\n        isDirectory: true,\n      })\n\n      // Add files in this directory\n      typeFiles.forEach((file) => {\n        organized.push({\n          ...file,\n          name: `${type}/${file.name}`,\n        })\n      })\n    })\n\n    return organized\n  }\n\n  /**\n   * Validates file entries before archiving\n   */\n  static validateFiles(files: FileEntry[]): {\n    valid: boolean\n    errors: string[]\n  } {\n    const errors: string[] = []\n\n    if (files.length === 0) {\n      errors.push('No files to archive')\n    }\n\n    const names = new Set<string>()\n    files.forEach((file, index) => {\n      if (!file.name || file.name.trim() === '') {\n        errors.push(`File at index ${index} has no name`)\n      }\n\n      if (names.has(file.name)) {\n        errors.push(`Duplicate file name: ${file.name}`)\n      }\n      names.add(file.name)\n\n      if (file.content === undefined || file.content === null) {\n        errors.push(`File ${file.name} has no content`)\n      }\n    })\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    }\n  }\n\n  /**\n   * Estimates the archive size\n   */\n  static estimateArchiveSize(files: FileEntry[]): number {\n    let totalSize = 0\n\n    files.forEach((file) => {\n      if (file.content instanceof Blob) {\n        totalSize += file.content.size\n      } else {\n        totalSize += new Blob([file.content]).size\n      }\n    })\n\n    // Add overhead for archive structure (approximately 10%)\n    return Math.ceil(totalSize * 1.1)\n  }\n\n  /**\n   * Generates a unique archive name\n   */\n  static generateArchiveName(\n    baseName: string = 'export',\n    format: string,\n    timestamp: boolean = true\n  ): string {\n    let name = baseName.replace(/[^a-z0-9]/gi, '_')\n\n    if (timestamp) {\n      const now = new Date()\n      const dateStr = now.toISOString().split('T')[0]\n      const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '')\n      name += `_${dateStr}_${timeStr}`\n    }\n\n    return `${name}_${format}_archive.zip`\n  }\n}\n",
              ],
              names: [
                'ArchiveCreator',
                'createArchive',
                'files',
                'options',
                'type',
                'createZipArchive',
                'boundary',
                'archiveContent',
                'push',
                'Date',
                'toISOString',
                'length',
                'file',
                'name',
                'content',
                'Blob',
                'text',
                'archiveText',
                'join',
                'organizeFilesByStructure',
                'useStructure',
                'organized',
                'filesByType',
                'Map',
                'forEach',
                'extension',
                'split',
                'pop',
                'toLowerCase',
                'existing',
                'get',
                'set',
                'typeFiles',
                'isDirectory',
                'validateFiles',
                'errors',
                'names',
                'Set',
                'index',
                'trim',
                'has',
                'add',
                'undefined',
                'valid',
                'estimateArchiveSize',
                'totalSize',
                'size',
                'Math',
                'ceil',
                'generateArchiveName',
                'baseName',
                'format',
                'timestamp',
                'replace',
                'now',
                'dateStr',
                'timeStr',
                'toTimeString',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: 'b9963e4ebc60eafa0d3783ab15ad30612d31aa65',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          'b9963e4ebc60eafa0d3783ab15ad30612d31aa65' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_stbgq0mjt = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_stbgq0mjt()
      class ArchiveCreator {
        static async createArchive(
          files,
          options = (cov_stbgq0mjt().b[0][0]++, { type: 'zip' })
        ) {
          return (
            cov_stbgq0mjt().f[0]++,
            cov_stbgq0mjt().s[0]++,
            'zip' === options.type
              ? (cov_stbgq0mjt().b[1][0]++,
                cov_stbgq0mjt().s[1]++,
                this.createZipArchive(files))
              : (cov_stbgq0mjt().b[1][1]++,
                cov_stbgq0mjt().s[2]++,
                this.createZipArchive(files))
          )
        }
        static async createZipArchive(files) {
          cov_stbgq0mjt().f[1]++
          const boundary = (cov_stbgq0mjt().s[3]++, '----ARCHIVE_BOUNDARY----'),
            archiveContent = (cov_stbgq0mjt().s[4]++, [])
          ;(cov_stbgq0mjt().s[5]++,
            archiveContent.push('# Exported Notes Archive'),
            cov_stbgq0mjt().s[6]++,
            archiveContent.push(`# Created: ${new Date().toISOString()}`),
            cov_stbgq0mjt().s[7]++,
            archiveContent.push(`# Total files: ${files.length}`),
            cov_stbgq0mjt().s[8]++,
            archiveContent.push(''),
            cov_stbgq0mjt().s[9]++)
          for (const file of files) {
            if (
              (cov_stbgq0mjt().s[10]++,
              archiveContent.push(boundary),
              cov_stbgq0mjt().s[11]++,
              archiveContent.push(`File: ${file.name}`),
              cov_stbgq0mjt().s[12]++,
              archiveContent.push('Content:'),
              cov_stbgq0mjt().s[13]++,
              file.content instanceof Blob)
            ) {
              cov_stbgq0mjt().b[2][0]++
              const text = (cov_stbgq0mjt().s[14]++, await file.content.text())
              ;(cov_stbgq0mjt().s[15]++, archiveContent.push(text))
            } else
              (cov_stbgq0mjt().b[2][1]++,
                cov_stbgq0mjt().s[16]++,
                archiveContent.push(file.content))
            ;(cov_stbgq0mjt().s[17]++, archiveContent.push(''))
          }
          ;(cov_stbgq0mjt().s[18]++, archiveContent.push(boundary))
          const archiveText =
            (cov_stbgq0mjt().s[19]++, archiveContent.join('\n'))
          return (
            cov_stbgq0mjt().s[20]++,
            new Blob([archiveText], { type: 'text/plain' })
          )
        }
        static organizeFilesByStructure(
          files,
          useStructure = (cov_stbgq0mjt().b[3][0]++, !0)
        ) {
          if ((cov_stbgq0mjt().f[2]++, cov_stbgq0mjt().s[21]++, !useStructure))
            return (cov_stbgq0mjt().b[4][0]++, cov_stbgq0mjt().s[22]++, files)
          cov_stbgq0mjt().b[4][1]++
          const organized = (cov_stbgq0mjt().s[23]++, []),
            filesByType = (cov_stbgq0mjt().s[24]++, new Map())
          return (
            cov_stbgq0mjt().s[25]++,
            files.forEach((file) => {
              var _file_name_split_pop
              cov_stbgq0mjt().f[3]++
              const extension =
                  (cov_stbgq0mjt().s[26]++,
                  cov_stbgq0mjt().b[5][0]++,
                  cov_stbgq0mjt().b[7][0]++,
                  (null ===
                    (_file_name_split_pop = file.name.split('.').pop()) ||
                  (cov_stbgq0mjt().b[7][1]++, void 0 === _file_name_split_pop)
                    ? void cov_stbgq0mjt().b[6][0]++
                    : (cov_stbgq0mjt().b[6][1]++,
                      _file_name_split_pop.toLowerCase())) ||
                    (cov_stbgq0mjt().b[5][1]++, 'other')),
                existing =
                  (cov_stbgq0mjt().s[27]++,
                  cov_stbgq0mjt().b[8][0]++,
                  filesByType.get(extension) || (cov_stbgq0mjt().b[8][1]++, []))
              ;(cov_stbgq0mjt().s[28]++,
                existing.push(file),
                cov_stbgq0mjt().s[29]++,
                filesByType.set(extension, existing))
            }),
            cov_stbgq0mjt().s[30]++,
            filesByType.forEach((typeFiles, type) => {
              ;(cov_stbgq0mjt().f[4]++,
                cov_stbgq0mjt().s[31]++,
                organized.push({
                  name: `${type}/`,
                  content: '',
                  isDirectory: !0,
                }),
                cov_stbgq0mjt().s[32]++,
                typeFiles.forEach((file) => {
                  ;(cov_stbgq0mjt().f[5]++,
                    cov_stbgq0mjt().s[33]++,
                    organized.push({ ...file, name: `${type}/${file.name}` }))
                }))
            }),
            cov_stbgq0mjt().s[34]++,
            organized
          )
        }
        static validateFiles(files) {
          cov_stbgq0mjt().f[6]++
          const errors = (cov_stbgq0mjt().s[35]++, [])
          ;(cov_stbgq0mjt().s[36]++,
            0 === files.length
              ? (cov_stbgq0mjt().b[9][0]++,
                cov_stbgq0mjt().s[37]++,
                errors.push('No files to archive'))
              : cov_stbgq0mjt().b[9][1]++)
          const names = (cov_stbgq0mjt().s[38]++, new Set())
          return (
            cov_stbgq0mjt().s[39]++,
            files.forEach((file, index) => {
              ;(cov_stbgq0mjt().f[7]++,
                cov_stbgq0mjt().s[40]++,
                cov_stbgq0mjt().b[11][0]++,
                file.name &&
                (cov_stbgq0mjt().b[11][1]++, '' !== file.name.trim())
                  ? cov_stbgq0mjt().b[10][1]++
                  : (cov_stbgq0mjt().b[10][0]++,
                    cov_stbgq0mjt().s[41]++,
                    errors.push(`File at index ${index} has no name`)),
                cov_stbgq0mjt().s[42]++,
                names.has(file.name)
                  ? (cov_stbgq0mjt().b[12][0]++,
                    cov_stbgq0mjt().s[43]++,
                    errors.push(`Duplicate file name: ${file.name}`))
                  : cov_stbgq0mjt().b[12][1]++,
                cov_stbgq0mjt().s[44]++,
                names.add(file.name),
                cov_stbgq0mjt().s[45]++,
                cov_stbgq0mjt().b[14][0]++,
                void 0 === file.content ||
                (cov_stbgq0mjt().b[14][1]++, null === file.content)
                  ? (cov_stbgq0mjt().b[13][0]++,
                    cov_stbgq0mjt().s[46]++,
                    errors.push(`File ${file.name} has no content`))
                  : cov_stbgq0mjt().b[13][1]++)
            }),
            cov_stbgq0mjt().s[47]++,
            { valid: 0 === errors.length, errors }
          )
        }
        static estimateArchiveSize(files) {
          cov_stbgq0mjt().f[8]++
          let totalSize = (cov_stbgq0mjt().s[48]++, 0)
          return (
            cov_stbgq0mjt().s[49]++,
            files.forEach((file) => {
              ;(cov_stbgq0mjt().f[9]++,
                cov_stbgq0mjt().s[50]++,
                file.content instanceof Blob
                  ? (cov_stbgq0mjt().b[15][0]++,
                    cov_stbgq0mjt().s[51]++,
                    (totalSize += file.content.size))
                  : (cov_stbgq0mjt().b[15][1]++,
                    cov_stbgq0mjt().s[52]++,
                    (totalSize += new Blob([file.content]).size)))
            }),
            cov_stbgq0mjt().s[53]++,
            Math.ceil(1.1 * totalSize)
          )
        }
        static generateArchiveName(
          baseName = (cov_stbgq0mjt().b[16][0]++, 'export'),
          format,
          timestamp = (cov_stbgq0mjt().b[17][0]++, !0)
        ) {
          cov_stbgq0mjt().f[10]++
          let name =
            (cov_stbgq0mjt().s[54]++, baseName.replace(/[^a-z0-9]/gi, '_'))
          if ((cov_stbgq0mjt().s[55]++, timestamp)) {
            cov_stbgq0mjt().b[18][0]++
            const now = (cov_stbgq0mjt().s[56]++, new Date()),
              dateStr =
                (cov_stbgq0mjt().s[57]++, now.toISOString().split('T')[0]),
              timeStr =
                (cov_stbgq0mjt().s[58]++,
                now.toTimeString().split(' ')[0].replace(/:/g, ''))
            ;(cov_stbgq0mjt().s[59]++, (name += `_${dateStr}_${timeStr}`))
          } else cov_stbgq0mjt().b[18][1]++
          return (cov_stbgq0mjt().s[60]++, `${name}_${format}_archive.zip`)
        }
      }
      function cov_1vxrjhhj4k() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/markdown-exporter.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/markdown-exporter.ts',
            statementMap: {
              0: {
                start: { line: 6, column: 8 },
                end: { line: 31, column: 9 },
              },
              1: {
                start: { line: 7, column: 36 },
                end: { line: 7, column: 43 },
              },
              2: {
                start: { line: 9, column: 36 },
                end: { line: 9, column: 141 },
              },
              3: {
                start: { line: 11, column: 31 },
                end: { line: 11, column: 33 },
              },
              4: {
                start: { line: 13, column: 12 },
                end: { line: 16, column: 13 },
              },
              5: {
                start: { line: 14, column: 16 },
                end: { line: 14, column: 67 },
              },
              6: {
                start: { line: 15, column: 16 },
                end: { line: 15, column: 39 },
              },
              7: {
                start: { line: 18, column: 12 },
                end: { line: 18, column: 44 },
              },
              8: {
                start: { line: 20, column: 29 },
                end: { line: 20, column: 168 },
              },
              9: {
                start: { line: 22, column: 25 },
                end: { line: 22, column: 71 },
              },
              10: {
                start: { line: 23, column: 12 },
                end: { line: 28, column: 14 },
              },
              11: {
                start: { line: 30, column: 12 },
                end: { line: 30, column: 43 },
              },
              12: {
                start: { line: 34, column: 8 },
                end: { line: 76, column: 9 },
              },
              13: {
                start: { line: 35, column: 83 },
                end: { line: 35, column: 90 },
              },
              14: {
                start: { line: 36, column: 12 },
                end: { line: 38, column: 13 },
              },
              15: {
                start: { line: 37, column: 16 },
                end: { line: 37, column: 72 },
              },
              16: {
                start: { line: 40, column: 26 },
                end: { line: 40, column: 28 },
              },
              17: {
                start: { line: 41, column: 12 },
                end: { line: 55, column: 13 },
              },
              18: {
                start: { line: 43, column: 40 },
                end: { line: 43, column: 76 },
              },
              19: {
                start: { line: 44, column: 35 },
                end: { line: 44, column: 37 },
              },
              20: {
                start: { line: 45, column: 16 },
                end: { line: 48, column: 17 },
              },
              21: {
                start: { line: 46, column: 20 },
                end: { line: 46, column: 76 },
              },
              22: {
                start: { line: 47, column: 20 },
                end: { line: 47, column: 43 },
              },
              23: {
                start: { line: 49, column: 16 },
                end: { line: 49, column: 48 },
              },
              24: {
                start: { line: 50, column: 33 },
                end: { line: 50, column: 218 },
              },
              25: {
                start: { line: 51, column: 16 },
                end: { line: 54, column: 19 },
              },
              26: {
                start: { line: 57, column: 31 },
                end: { line: 57, column: 66 },
              },
              27: {
                start: { line: 58, column: 12 },
                end: { line: 60, column: 13 },
              },
              28: {
                start: { line: 59, column: 16 },
                end: { line: 59, column: 86 },
              },
              29: {
                start: { line: 62, column: 35 },
                end: { line: 62, column: 98 },
              },
              30: {
                start: { line: 64, column: 32 },
                end: { line: 66, column: 14 },
              },
              31: {
                start: { line: 67, column: 32 },
                end: { line: 67, column: 94 },
              },
              32: {
                start: { line: 68, column: 12 },
                end: { line: 73, column: 14 },
              },
              33: {
                start: { line: 75, column: 12 },
                end: { line: 75, column: 43 },
              },
              34: {
                start: { line: 79, column: 28 },
                end: { line: 81, column: 9 },
              },
              35: {
                start: { line: 82, column: 8 },
                end: { line: 84, column: 9 },
              },
              36: {
                start: { line: 83, column: 12 },
                end: { line: 83, column: 59 },
              },
              37: {
                start: { line: 85, column: 8 },
                end: { line: 87, column: 9 },
              },
              38: {
                start: { line: 86, column: 12 },
                end: { line: 86, column: 61 },
              },
              39: {
                start: { line: 88, column: 8 },
                end: { line: 90, column: 9 },
              },
              40: {
                start: { line: 89, column: 12 },
                end: { line: 89, column: 77 },
              },
              41: {
                start: { line: 91, column: 8 },
                end: { line: 93, column: 9 },
              },
              42: {
                start: { line: 92, column: 12 },
                end: { line: 92, column: 77 },
              },
              43: {
                start: { line: 94, column: 8 },
                end: { line: 99, column: 9 },
              },
              44: {
                start: { line: 95, column: 12 },
                end: { line: 95, column: 38 },
              },
              45: {
                start: { line: 96, column: 12 },
                end: { line: 98, column: 15 },
              },
              46: {
                start: { line: 97, column: 16 },
                end: { line: 97, column: 47 },
              },
              47: {
                start: { line: 100, column: 8 },
                end: { line: 105, column: 9 },
              },
              48: {
                start: { line: 102, column: 39 },
                end: { line: 102, column: 103 },
              },
              49: {
                start: { line: 103, column: 12 },
                end: { line: 103, column: 47 },
              },
              50: {
                start: { line: 104, column: 12 },
                end: { line: 104, column: 56 },
              },
              51: {
                start: { line: 106, column: 8 },
                end: { line: 106, column: 32 },
              },
              52: {
                start: { line: 107, column: 8 },
                end: { line: 107, column: 38 },
              },
              53: {
                start: { line: 110, column: 8 },
                end: { line: 110, column: 26 },
              },
              54: {
                start: { line: 111, column: 8 },
                end: { line: 111, column: 56 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 5, column: 4 },
                  end: { line: 5, column: 5 },
                },
                loc: {
                  start: { line: 5, column: 45 },
                  end: { line: 32, column: 5 },
                },
                line: 5,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 33, column: 4 },
                  end: { line: 33, column: 5 },
                },
                loc: {
                  start: { line: 33, column: 30 },
                  end: { line: 77, column: 5 },
                },
                line: 33,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 78, column: 4 },
                  end: { line: 78, column: 5 },
                },
                loc: {
                  start: { line: 78, column: 34 },
                  end: { line: 108, column: 5 },
                },
                line: 78,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 96, column: 34 },
                  end: { line: 96, column: 35 },
                },
                loc: {
                  start: { line: 96, column: 41 },
                  end: { line: 98, column: 13 },
                },
                line: 96,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 109, column: 4 },
                  end: { line: 109, column: 5 },
                },
                loc: {
                  start: { line: 109, column: 17 },
                  end: { line: 112, column: 5 },
                },
                line: 109,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 9, column: 36 },
                  end: { line: 9, column: 141 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 9, column: 71 },
                    end: { line: 9, column: 107 },
                  },
                  {
                    start: { line: 9, column: 110 },
                    end: { line: 9, column: 141 },
                  },
                ],
                line: 9,
              },
              1: {
                loc: {
                  start: { line: 13, column: 12 },
                  end: { line: 16, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 13, column: 12 },
                    end: { line: 16, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 13,
              },
              2: {
                loc: {
                  start: { line: 13, column: 16 },
                  end: { line: 13, column: 59 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 13, column: 16 },
                    end: { line: 13, column: 47 },
                  },
                  {
                    start: { line: 13, column: 51 },
                    end: { line: 13, column: 59 },
                  },
                ],
                line: 13,
              },
              3: {
                loc: {
                  start: { line: 20, column: 29 },
                  end: { line: 20, column: 168 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 20, column: 29 },
                    end: { line: 20, column: 45 },
                  },
                  {
                    start: { line: 20, column: 49 },
                    end: { line: 20, column: 168 },
                  },
                ],
                line: 20,
              },
              4: {
                loc: {
                  start: { line: 20, column: 71 },
                  end: { line: 20, column: 151 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 20, column: 72 },
                    end: { line: 20, column: 138 },
                  },
                  {
                    start: { line: 20, column: 143 },
                    end: { line: 20, column: 151 },
                  },
                ],
                line: 20,
              },
              5: {
                loc: {
                  start: { line: 20, column: 72 },
                  end: { line: 20, column: 138 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 20, column: 115 },
                    end: { line: 20, column: 121 },
                  },
                  {
                    start: { line: 20, column: 124 },
                    end: { line: 20, column: 138 },
                  },
                ],
                line: 20,
              },
              6: {
                loc: {
                  start: { line: 20, column: 72 },
                  end: { line: 20, column: 112 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 20, column: 72 },
                    end: { line: 20, column: 89 },
                  },
                  {
                    start: { line: 20, column: 93 },
                    end: { line: 20, column: 112 },
                  },
                ],
                line: 20,
              },
              7: {
                loc: {
                  start: { line: 35, column: 35 },
                  end: { line: 35, column: 54 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 35, column: 49 },
                    end: { line: 35, column: 54 },
                  },
                ],
                line: 35,
              },
              8: {
                loc: {
                  start: { line: 35, column: 56 },
                  end: { line: 35, column: 78 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 35, column: 74 },
                    end: { line: 35, column: 78 },
                  },
                ],
                line: 35,
              },
              9: {
                loc: {
                  start: { line: 36, column: 12 },
                  end: { line: 38, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 36, column: 12 },
                    end: { line: 38, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 36,
              },
              10: {
                loc: {
                  start: { line: 45, column: 16 },
                  end: { line: 48, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 45, column: 16 },
                    end: { line: 48, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 45,
              },
              11: {
                loc: {
                  start: { line: 50, column: 33 },
                  end: { line: 50, column: 218 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 50, column: 140 },
                    end: { line: 50, column: 195 },
                  },
                  {
                    start: { line: 50, column: 198 },
                    end: { line: 50, column: 218 },
                  },
                ],
                line: 50,
              },
              12: {
                loc: {
                  start: { line: 50, column: 34 },
                  end: { line: 50, column: 136 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 50, column: 107 },
                    end: { line: 50, column: 113 },
                  },
                  {
                    start: { line: 50, column: 116 },
                    end: { line: 50, column: 136 },
                  },
                ],
                line: 50,
              },
              13: {
                loc: {
                  start: { line: 50, column: 34 },
                  end: { line: 50, column: 104 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 50, column: 34 },
                    end: { line: 50, column: 75 },
                  },
                  {
                    start: { line: 50, column: 79 },
                    end: { line: 50, column: 104 },
                  },
                ],
                line: 50,
              },
              14: {
                loc: {
                  start: { line: 58, column: 12 },
                  end: { line: 60, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 58, column: 12 },
                    end: { line: 60, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 58,
              },
              15: {
                loc: {
                  start: { line: 82, column: 8 },
                  end: { line: 84, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 82, column: 8 },
                    end: { line: 84, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 82,
              },
              16: {
                loc: {
                  start: { line: 85, column: 8 },
                  end: { line: 87, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 85, column: 8 },
                    end: { line: 87, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 85,
              },
              17: {
                loc: {
                  start: { line: 88, column: 8 },
                  end: { line: 90, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 88, column: 8 },
                    end: { line: 90, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 88,
              },
              18: {
                loc: {
                  start: { line: 91, column: 8 },
                  end: { line: 93, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 91, column: 8 },
                    end: { line: 93, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 91,
              },
              19: {
                loc: {
                  start: { line: 94, column: 8 },
                  end: { line: 99, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 94, column: 8 },
                    end: { line: 99, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 94,
              },
              20: {
                loc: {
                  start: { line: 94, column: 12 },
                  end: { line: 94, column: 53 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 94, column: 12 },
                    end: { line: 94, column: 25 },
                  },
                  {
                    start: { line: 94, column: 29 },
                    end: { line: 94, column: 53 },
                  },
                ],
                line: 94,
              },
              21: {
                loc: {
                  start: { line: 100, column: 8 },
                  end: { line: 105, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 100, column: 8 },
                    end: { line: 105, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 100,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
            },
            f: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0 },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0],
              8: [0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/markdown-exporter.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\nimport { BaseExporter } from './base-exporter'\nimport {\n  type BulkExportOptions,\n  type ExportMetadata,\n  type ExportOptions,\n  type ExportResult,\n  type MarkdownExportOptions,\n} from './types'\nimport { SlateToMarkdownConverter } from './converters/slate-to-markdown'\nimport { ArchiveCreator, type FileEntry } from './utils/archive-utils'\n\nexport class MarkdownExporter extends BaseExporter {\n  private converter: SlateToMarkdownConverter\n\n  constructor() {\n    super('markdown')\n    this.converter = new SlateToMarkdownConverter()\n  }\n\n  async export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult> {\n    try {\n      const markdownOptions = options as MarkdownExportOptions\n\n      // Convert content to markdown\n      const markdownContent =\n        markdownOptions.flavor === 'gfm'\n          ? this.converter.convertToGFM(content)\n          : this.converter.convert(content)\n\n      // Build the final document\n      let finalContent = ''\n\n      // Add front matter if metadata is included\n      if (markdownOptions.includeMetadata && metadata) {\n        finalContent += this.generateFrontMatter(metadata)\n        finalContent += '\\n\\n'\n      }\n\n      // Add the main content\n      finalContent += markdownContent\n\n      // Generate filename\n      const fileName =\n        options.fileName ||\n        this.generateFileName(metadata?.title || 'export', 'md', metadata)\n\n      // Create blob\n      const blob = this.createBlob(finalContent, 'text/markdown')\n\n      return {\n        success: true,\n        data: blob,\n        fileName,\n        mimeType: 'text/markdown',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  async bulkExport(options: BulkExportOptions): Promise<ExportResult> {\n    try {\n      const {\n        notes,\n        format,\n        archiveType = 'zip',\n        folderStructure = true,\n      } = options\n\n      if (format !== 'markdown') {\n        throw new Error('Invalid format for markdown exporter')\n      }\n\n      // Create file entries for each note\n      const files: FileEntry[] = []\n\n      for (const note of notes) {\n        const markdownContent = this.converter.convert(note.content)\n\n        let finalContent = ''\n        if (note.metadata) {\n          finalContent += this.generateFrontMatter(note.metadata)\n          finalContent += '\\n\\n'\n        }\n        finalContent += markdownContent\n\n        const fileName = note.metadata?.title\n          ? `${note.metadata.title.replace(/[^a-z0-9]/gi, '_')}.md`\n          : `note_${note.id}.md`\n\n        files.push({\n          name: fileName,\n          content: finalContent,\n        })\n      }\n\n      // Validate files\n      const validation = ArchiveCreator.validateFiles(files)\n      if (!validation.valid) {\n        throw new Error(`Validation failed: ${validation.errors.join(', ')}`)\n      }\n\n      // Organize files if folder structure is requested\n      const organizedFiles = ArchiveCreator.organizeFilesByStructure(\n        files,\n        folderStructure\n      )\n\n      // Create archive\n      const archiveBlob = await ArchiveCreator.createArchive(organizedFiles, {\n        type: archiveType,\n      })\n      const archiveName = ArchiveCreator.generateArchiveName(\n        'notes-export',\n        'markdown'\n      )\n\n      return {\n        success: true,\n        data: archiveBlob,\n        fileName: archiveName,\n        mimeType: 'application/zip',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  private generateFrontMatter(metadata: ExportMetadata): string {\n    const frontMatter: string[] = ['---']\n\n    if (metadata.title) {\n      frontMatter.push(`title: \"${metadata.title}\"`)\n    }\n\n    if (metadata.author) {\n      frontMatter.push(`author: \"${metadata.author}\"`)\n    }\n\n    if (metadata.createdAt) {\n      frontMatter.push(`created: ${metadata.createdAt.toISOString()}`)\n    }\n\n    if (metadata.updatedAt) {\n      frontMatter.push(`updated: ${metadata.updatedAt.toISOString()}`)\n    }\n\n    if (metadata.tags && metadata.tags.length > 0) {\n      frontMatter.push('tags:')\n      metadata.tags.forEach((tag) => {\n        frontMatter.push(`  - ${tag}`)\n      })\n    }\n\n    if (metadata.description) {\n      // Escape quotes and ensure proper indentation\n      const escapedDescription = metadata.description\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\n  ')\n      frontMatter.push(`description: |`)\n      frontMatter.push(`  ${escapedDescription}`)\n    }\n\n    frontMatter.push('---')\n\n    return frontMatter.join('\\n')\n  }\n}\n",
              ],
              names: [
                'BaseExporter',
                'SlateToMarkdownConverter',
                'ArchiveCreator',
                'MarkdownExporter',
                'export',
                'content',
                'options',
                'metadata',
                'markdownOptions',
                'markdownContent',
                'flavor',
                'converter',
                'convertToGFM',
                'convert',
                'finalContent',
                'includeMetadata',
                'generateFrontMatter',
                'fileName',
                'generateFileName',
                'title',
                'blob',
                'createBlob',
                'success',
                'data',
                'mimeType',
                'error',
                'handleError',
                'bulkExport',
                'notes',
                'format',
                'archiveType',
                'folderStructure',
                'Error',
                'files',
                'note',
                'replace',
                'id',
                'push',
                'name',
                'validation',
                'validateFiles',
                'valid',
                'errors',
                'join',
                'organizedFiles',
                'organizeFilesByStructure',
                'archiveBlob',
                'createArchive',
                'type',
                'archiveName',
                'generateArchiveName',
                'frontMatter',
                'author',
                'createdAt',
                'toISOString',
                'updatedAt',
                'tags',
                'length',
                'forEach',
                'tag',
                'description',
                'escapedDescription',
                'constructor',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '54414f38061b1ec5e9d9834a5e334f7b066ab642',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '54414f38061b1ec5e9d9834a5e334f7b066ab642' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_1vxrjhhj4k = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_1vxrjhhj4k()
      class MarkdownExporter extends BaseExporter {
        async export(content, options, metadata) {
          ;(cov_1vxrjhhj4k().f[0]++, cov_1vxrjhhj4k().s[0]++)
          try {
            const markdownOptions = (cov_1vxrjhhj4k().s[1]++, options),
              markdownContent =
                (cov_1vxrjhhj4k().s[2]++,
                'gfm' === markdownOptions.flavor
                  ? (cov_1vxrjhhj4k().b[0][0]++,
                    this.converter.convertToGFM(content))
                  : (cov_1vxrjhhj4k().b[0][1]++,
                    this.converter.convert(content)))
            let finalContent = (cov_1vxrjhhj4k().s[3]++, '')
            ;(cov_1vxrjhhj4k().s[4]++,
              cov_1vxrjhhj4k().b[2][0]++,
              markdownOptions.includeMetadata &&
              (cov_1vxrjhhj4k().b[2][1]++, metadata)
                ? (cov_1vxrjhhj4k().b[1][0]++,
                  cov_1vxrjhhj4k().s[5]++,
                  (finalContent += this.generateFrontMatter(metadata)),
                  cov_1vxrjhhj4k().s[6]++,
                  (finalContent += '\n\n'))
                : cov_1vxrjhhj4k().b[1][1]++,
              cov_1vxrjhhj4k().s[7]++,
              (finalContent += markdownContent))
            const fileName =
                (cov_1vxrjhhj4k().s[8]++,
                cov_1vxrjhhj4k().b[3][0]++,
                options.fileName ||
                  (cov_1vxrjhhj4k().b[3][1]++,
                  this.generateFileName(
                    (cov_1vxrjhhj4k().b[4][0]++,
                    cov_1vxrjhhj4k().b[6][0]++,
                    (null === metadata ||
                    (cov_1vxrjhhj4k().b[6][1]++, void 0 === metadata)
                      ? void cov_1vxrjhhj4k().b[5][0]++
                      : (cov_1vxrjhhj4k().b[5][1]++, metadata.title)) ||
                      (cov_1vxrjhhj4k().b[4][1]++, 'export')),
                    'md',
                    metadata
                  ))),
              blob =
                (cov_1vxrjhhj4k().s[9]++,
                this.createBlob(finalContent, 'text/markdown'))
            return (
              cov_1vxrjhhj4k().s[10]++,
              { success: !0, data: blob, fileName, mimeType: 'text/markdown' }
            )
          } catch (error) {
            return (cov_1vxrjhhj4k().s[11]++, this.handleError(error))
          }
        }
        async bulkExport(options) {
          ;(cov_1vxrjhhj4k().f[1]++, cov_1vxrjhhj4k().s[12]++)
          try {
            const {
              notes,
              format,
              archiveType = (cov_1vxrjhhj4k().b[7][0]++, 'zip'),
              folderStructure = (cov_1vxrjhhj4k().b[8][0]++, !0),
            } = (cov_1vxrjhhj4k().s[13]++, options)
            if ((cov_1vxrjhhj4k().s[14]++, 'markdown' !== format))
              throw (
                cov_1vxrjhhj4k().b[9][0]++,
                cov_1vxrjhhj4k().s[15]++,
                new Error('Invalid format for markdown exporter')
              )
            cov_1vxrjhhj4k().b[9][1]++
            const files = (cov_1vxrjhhj4k().s[16]++, [])
            cov_1vxrjhhj4k().s[17]++
            for (const note of notes) {
              var _note_metadata
              const markdownContent =
                (cov_1vxrjhhj4k().s[18]++, this.converter.convert(note.content))
              let finalContent = (cov_1vxrjhhj4k().s[19]++, '')
              ;(cov_1vxrjhhj4k().s[20]++,
                note.metadata
                  ? (cov_1vxrjhhj4k().b[10][0]++,
                    cov_1vxrjhhj4k().s[21]++,
                    (finalContent += this.generateFrontMatter(note.metadata)),
                    cov_1vxrjhhj4k().s[22]++,
                    (finalContent += '\n\n'))
                  : cov_1vxrjhhj4k().b[10][1]++,
                cov_1vxrjhhj4k().s[23]++,
                (finalContent += markdownContent))
              const fileName =
                (cov_1vxrjhhj4k().s[24]++,
                cov_1vxrjhhj4k().b[13][0]++,
                (
                  null === (_note_metadata = note.metadata) ||
                  (cov_1vxrjhhj4k().b[13][1]++, void 0 === _note_metadata)
                    ? void cov_1vxrjhhj4k().b[12][0]++
                    : (cov_1vxrjhhj4k().b[12][1]++, _note_metadata.title)
                )
                  ? (cov_1vxrjhhj4k().b[11][0]++,
                    `${note.metadata.title.replace(/[^a-z0-9]/gi, '_')}.md`)
                  : (cov_1vxrjhhj4k().b[11][1]++, `note_${note.id}.md`))
              ;(cov_1vxrjhhj4k().s[25]++,
                files.push({ name: fileName, content: finalContent }))
            }
            const validation =
              (cov_1vxrjhhj4k().s[26]++, ArchiveCreator.validateFiles(files))
            if ((cov_1vxrjhhj4k().s[27]++, !validation.valid))
              throw (
                cov_1vxrjhhj4k().b[14][0]++,
                cov_1vxrjhhj4k().s[28]++,
                new Error(`Validation failed: ${validation.errors.join(', ')}`)
              )
            cov_1vxrjhhj4k().b[14][1]++
            const organizedFiles =
                (cov_1vxrjhhj4k().s[29]++,
                ArchiveCreator.organizeFilesByStructure(
                  files,
                  folderStructure
                )),
              archiveBlob =
                (cov_1vxrjhhj4k().s[30]++,
                await ArchiveCreator.createArchive(organizedFiles, {
                  type: archiveType,
                })),
              archiveName =
                (cov_1vxrjhhj4k().s[31]++,
                ArchiveCreator.generateArchiveName('notes-export', 'markdown'))
            return (
              cov_1vxrjhhj4k().s[32]++,
              {
                success: !0,
                data: archiveBlob,
                fileName: archiveName,
                mimeType: 'application/zip',
              }
            )
          } catch (error) {
            return (cov_1vxrjhhj4k().s[33]++, this.handleError(error))
          }
        }
        generateFrontMatter(metadata) {
          cov_1vxrjhhj4k().f[2]++
          const frontMatter = (cov_1vxrjhhj4k().s[34]++, ['---'])
          if (
            (cov_1vxrjhhj4k().s[35]++,
            metadata.title
              ? (cov_1vxrjhhj4k().b[15][0]++,
                cov_1vxrjhhj4k().s[36]++,
                frontMatter.push(`title: "${metadata.title}"`))
              : cov_1vxrjhhj4k().b[15][1]++,
            cov_1vxrjhhj4k().s[37]++,
            metadata.author
              ? (cov_1vxrjhhj4k().b[16][0]++,
                cov_1vxrjhhj4k().s[38]++,
                frontMatter.push(`author: "${metadata.author}"`))
              : cov_1vxrjhhj4k().b[16][1]++,
            cov_1vxrjhhj4k().s[39]++,
            metadata.createdAt
              ? (cov_1vxrjhhj4k().b[17][0]++,
                cov_1vxrjhhj4k().s[40]++,
                frontMatter.push(
                  `created: ${metadata.createdAt.toISOString()}`
                ))
              : cov_1vxrjhhj4k().b[17][1]++,
            cov_1vxrjhhj4k().s[41]++,
            metadata.updatedAt
              ? (cov_1vxrjhhj4k().b[18][0]++,
                cov_1vxrjhhj4k().s[42]++,
                frontMatter.push(
                  `updated: ${metadata.updatedAt.toISOString()}`
                ))
              : cov_1vxrjhhj4k().b[18][1]++,
            cov_1vxrjhhj4k().s[43]++,
            cov_1vxrjhhj4k().b[20][0]++,
            metadata.tags &&
            (cov_1vxrjhhj4k().b[20][1]++, metadata.tags.length > 0)
              ? (cov_1vxrjhhj4k().b[19][0]++,
                cov_1vxrjhhj4k().s[44]++,
                frontMatter.push('tags:'),
                cov_1vxrjhhj4k().s[45]++,
                metadata.tags.forEach((tag) => {
                  ;(cov_1vxrjhhj4k().f[3]++,
                    cov_1vxrjhhj4k().s[46]++,
                    frontMatter.push(`  - ${tag}`))
                }))
              : cov_1vxrjhhj4k().b[19][1]++,
            cov_1vxrjhhj4k().s[47]++,
            metadata.description)
          ) {
            cov_1vxrjhhj4k().b[21][0]++
            const escapedDescription =
              (cov_1vxrjhhj4k().s[48]++,
              metadata.description.replace(/"/g, '\\"').replace(/\n/g, '\n  '))
            ;(cov_1vxrjhhj4k().s[49]++,
              frontMatter.push('description: |'),
              cov_1vxrjhhj4k().s[50]++,
              frontMatter.push(`  ${escapedDescription}`))
          } else cov_1vxrjhhj4k().b[21][1]++
          return (
            cov_1vxrjhhj4k().s[51]++,
            frontMatter.push('---'),
            cov_1vxrjhhj4k().s[52]++,
            frontMatter.join('\n')
          )
        }
        constructor() {
          ;(cov_1vxrjhhj4k().f[4]++,
            cov_1vxrjhhj4k().s[53]++,
            super('markdown'),
            cov_1vxrjhhj4k().s[54]++,
            (this.converter = new SlateToMarkdownConverter()))
        }
      }
      function cov_50ae5mtbd() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-html.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-html.ts',
            statementMap: {
              0: {
                start: { line: 4, column: 8 },
                end: { line: 4, column: 66 },
              },
              1: {
                start: { line: 4, column: 33 },
                end: { line: 4, column: 55 },
              },
              2: { start: { line: 7, column: 8 }, end: { line: 9, column: 9 } },
              3: {
                start: { line: 8, column: 12 },
                end: { line: 8, column: 42 },
              },
              4: {
                start: { line: 10, column: 8 },
                end: { line: 12, column: 9 },
              },
              5: {
                start: { line: 11, column: 12 },
                end: { line: 11, column: 45 },
              },
              6: {
                start: { line: 13, column: 8 },
                end: { line: 13, column: 18 },
              },
              7: {
                start: { line: 16, column: 19 },
                end: { line: 16, column: 45 },
              },
              8: {
                start: { line: 18, column: 8 },
                end: { line: 18, column: 57 },
              },
              9: {
                start: { line: 18, column: 23 },
                end: { line: 18, column: 57 },
              },
              10: {
                start: { line: 19, column: 8 },
                end: { line: 19, column: 51 },
              },
              11: {
                start: { line: 19, column: 25 },
                end: { line: 19, column: 51 },
              },
              12: {
                start: { line: 20, column: 8 },
                end: { line: 20, column: 52 },
              },
              13: {
                start: { line: 20, column: 28 },
                end: { line: 20, column: 52 },
              },
              14: {
                start: { line: 21, column: 8 },
                end: { line: 21, column: 56 },
              },
              15: {
                start: { line: 21, column: 32 },
                end: { line: 21, column: 56 },
              },
              16: {
                start: { line: 22, column: 8 },
                end: { line: 22, column: 53 },
              },
              17: {
                start: { line: 22, column: 23 },
                end: { line: 22, column: 53 },
              },
              18: {
                start: { line: 23, column: 8 },
                end: { line: 23, column: 20 },
              },
              19: {
                start: { line: 26, column: 25 },
                end: { line: 26, column: 88 },
              },
              20: {
                start: { line: 26, column: 55 },
                end: { line: 26, column: 78 },
              },
              21: {
                start: { line: 27, column: 8 },
                end: { line: 47, column: 9 },
              },
              22: {
                start: { line: 29, column: 16 },
                end: { line: 29, column: 56 },
              },
              23: {
                start: { line: 31, column: 16 },
                end: { line: 31, column: 46 },
              },
              24: {
                start: { line: 33, column: 16 },
                end: { line: 33, column: 46 },
              },
              25: {
                start: { line: 35, column: 16 },
                end: { line: 35, column: 46 },
              },
              26: {
                start: { line: 37, column: 16 },
                end: { line: 37, column: 62 },
              },
              27: {
                start: { line: 39, column: 16 },
                end: { line: 39, column: 46 },
              },
              28: {
                start: { line: 41, column: 16 },
                end: { line: 41, column: 46 },
              },
              29: {
                start: { line: 43, column: 16 },
                end: { line: 43, column: 46 },
              },
              30: {
                start: { line: 46, column: 16 },
                end: { line: 46, column: 48 },
              },
              31: {
                start: { line: 50, column: 28 },
                end: { line: 56, column: 9 },
              },
              32: {
                start: { line: 57, column: 8 },
                end: { line: 57, column: 75 },
              },
              33: {
                start: { line: 57, column: 48 },
                end: { line: 57, column: 73 },
              },
              34: {
                start: { line: 60, column: 30 },
                end: { line: 60, column: 58 },
              },
              35: {
                start: { line: 61, column: 23 },
                end: { line: 61, column: 49 },
              },
              36: {
                start: { line: 62, column: 8 },
                end: { line: 77, column: 9 },
              },
              37: {
                start: { line: 80, column: 27 },
                end: { line: 150, column: 5 },
              },
              38: {
                start: { line: 151, column: 28 },
                end: { line: 185, column: 9 },
              },
              39: {
                start: { line: 186, column: 8 },
                end: { line: 186, column: 55 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 3, column: 4 },
                  end: { line: 3, column: 5 },
                },
                loc: {
                  start: { line: 3, column: 19 },
                  end: { line: 5, column: 5 },
                },
                line: 3,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 4, column: 25 },
                  end: { line: 4, column: 26 },
                },
                loc: {
                  start: { line: 4, column: 33 },
                  end: { line: 4, column: 55 },
                },
                line: 4,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 6, column: 4 },
                  end: { line: 6, column: 5 },
                },
                loc: {
                  start: { line: 6, column: 22 },
                  end: { line: 14, column: 5 },
                },
                line: 6,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 15, column: 4 },
                  end: { line: 15, column: 5 },
                },
                loc: {
                  start: { line: 15, column: 22 },
                  end: { line: 24, column: 5 },
                },
                line: 15,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 25, column: 4 },
                  end: { line: 25, column: 5 },
                },
                loc: {
                  start: { line: 25, column: 28 },
                  end: { line: 48, column: 5 },
                },
                line: 25,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 26, column: 46 },
                  end: { line: 26, column: 47 },
                },
                loc: {
                  start: { line: 26, column: 55 },
                  end: { line: 26, column: 78 },
                },
                line: 26,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 49, column: 4 },
                  end: { line: 49, column: 5 },
                },
                loc: {
                  start: { line: 49, column: 21 },
                  end: { line: 58, column: 5 },
                },
                line: 49,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 57, column: 40 },
                  end: { line: 57, column: 41 },
                },
                loc: {
                  start: { line: 57, column: 48 },
                  end: { line: 57, column: 73 },
                },
                line: 57,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 59, column: 4 },
                  end: { line: 59, column: 5 },
                },
                loc: {
                  start: { line: 59, column: 50 },
                  end: { line: 78, column: 5 },
                },
                line: 59,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 79, column: 4 },
                  end: { line: 79, column: 5 },
                },
                loc: {
                  start: { line: 79, column: 28 },
                  end: { line: 187, column: 5 },
                },
                line: 79,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 7, column: 8 },
                  end: { line: 9, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 7, column: 8 },
                    end: { line: 9, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 7,
              },
              1: {
                loc: {
                  start: { line: 10, column: 8 },
                  end: { line: 12, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 10, column: 8 },
                    end: { line: 12, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 10,
              },
              2: {
                loc: {
                  start: { line: 18, column: 8 },
                  end: { line: 18, column: 57 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 18, column: 8 },
                    end: { line: 18, column: 57 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 18,
              },
              3: {
                loc: {
                  start: { line: 19, column: 8 },
                  end: { line: 19, column: 51 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 19, column: 8 },
                    end: { line: 19, column: 51 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 19,
              },
              4: {
                loc: {
                  start: { line: 20, column: 8 },
                  end: { line: 20, column: 52 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 20, column: 8 },
                    end: { line: 20, column: 52 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 20,
              },
              5: {
                loc: {
                  start: { line: 21, column: 8 },
                  end: { line: 21, column: 56 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 21, column: 8 },
                    end: { line: 21, column: 56 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 21,
              },
              6: {
                loc: {
                  start: { line: 22, column: 8 },
                  end: { line: 22, column: 53 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 22, column: 8 },
                    end: { line: 22, column: 53 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 22,
              },
              7: {
                loc: {
                  start: { line: 27, column: 8 },
                  end: { line: 47, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 28, column: 12 },
                    end: { line: 29, column: 56 },
                  },
                  {
                    start: { line: 30, column: 12 },
                    end: { line: 31, column: 46 },
                  },
                  {
                    start: { line: 32, column: 12 },
                    end: { line: 33, column: 46 },
                  },
                  {
                    start: { line: 34, column: 12 },
                    end: { line: 35, column: 46 },
                  },
                  {
                    start: { line: 36, column: 12 },
                    end: { line: 37, column: 62 },
                  },
                  {
                    start: { line: 38, column: 12 },
                    end: { line: 39, column: 46 },
                  },
                  {
                    start: { line: 40, column: 12 },
                    end: { line: 41, column: 46 },
                  },
                  {
                    start: { line: 42, column: 12 },
                    end: { line: 43, column: 46 },
                  },
                  {
                    start: { line: 44, column: 12 },
                    end: { line: 46, column: 48 },
                  },
                ],
                line: 27,
              },
              8: {
                loc: {
                  start: { line: 29, column: 29 },
                  end: { line: 29, column: 49 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 29, column: 29 },
                    end: { line: 29, column: 37 },
                  },
                  {
                    start: { line: 29, column: 41 },
                    end: { line: 29, column: 49 },
                  },
                ],
                line: 29,
              },
              9: {
                loc: {
                  start: { line: 57, column: 48 },
                  end: { line: 57, column: 73 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 57, column: 48 },
                    end: { line: 57, column: 65 },
                  },
                  {
                    start: { line: 57, column: 69 },
                    end: { line: 57, column: 73 },
                  },
                ],
                line: 57,
              },
              10: {
                loc: {
                  start: { line: 61, column: 23 },
                  end: { line: 61, column: 49 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 61, column: 23 },
                    end: { line: 61, column: 32 },
                  },
                  {
                    start: { line: 61, column: 36 },
                    end: { line: 61, column: 49 },
                  },
                ],
                line: 61,
              },
              11: {
                loc: {
                  start: { line: 186, column: 29 },
                  end: { line: 186, column: 53 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 186, column: 29 },
                    end: { line: 186, column: 47 },
                  },
                  {
                    start: { line: 186, column: 51 },
                    end: { line: 186, column: 53 },
                  },
                ],
                line: 186,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
            },
            f: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0 },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0, 0, 0, 0, 0, 0, 0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-html.ts',
              ],
              sourcesContent: [
                "import { type Descendant, Element, Text } from 'slate'\n\nexport class SlateToHTMLConverter {\n  convert(nodes: Descendant[]): string {\n    return nodes.map((node) => this.convertNode(node)).join('')\n  }\n\n  private convertNode(node: Descendant): string {\n    if (Text.isText(node)) {\n      return this.convertText(node)\n    }\n\n    if (Element.isElement(node)) {\n      return this.convertElement(node)\n    }\n\n    return ''\n  }\n\n  private convertText(node: Text): string {\n    let text = this.escapeHtml(node.text)\n\n    // Apply inline formatting\n    if (node.bold) text = `<strong>${text}</strong>`\n    if (node.italic) text = `<em>${text}</em>`\n    if (node.underline) text = `<u>${text}</u>`\n    if (node.strikethrough) text = `<s>${text}</s>`\n    if (node.code) text = `<code>${text}</code>`\n\n    return text\n  }\n\n  private convertElement(element: Element): string {\n    const children = element.children\n      .map((child) => this.convertNode(child))\n      .join('')\n\n    switch (element.type) {\n      case 'paragraph':\n        return `<p>${children || '&nbsp;'}</p>`\n\n      case 'heading-one':\n        return `<h1>${children}</h1>`\n\n      case 'heading-two':\n        return `<h2>${children}</h2>`\n\n      case 'heading-three':\n        return `<h3>${children}</h3>`\n\n      case 'block-quote':\n        return `<blockquote>${children}</blockquote>`\n\n      case 'bulleted-list':\n        return `<ul>${children}</ul>`\n\n      case 'numbered-list':\n        return `<ol>${children}</ol>`\n\n      case 'list-item':\n        return `<li>${children}</li>`\n\n      default:\n        // Fallback for unknown element types\n        return `<div>${children}</div>`\n    }\n  }\n\n  private escapeHtml(text: string): string {\n    const htmlEscapes: Record<string, string> = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n    }\n\n    return text.replace(/[&<>\"']/g, (char) => htmlEscapes[char] || char)\n  }\n\n  generateStyledHTML(\n    content: string,\n    theme: 'light' | 'dark' | 'custom',\n    customCSS?: string\n  ): string {\n    const defaultStyles = this.getDefaultStyles(theme)\n    const styles = customCSS || defaultStyles\n\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exported Note</title>\n    <style>\n        ${styles}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        ${content}\n    </div>\n</body>\n</html>`\n  }\n\n  private getDefaultStyles(theme: 'light' | 'dark' | 'custom'): string {\n    const baseStyles = `\n        * {\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 0;\n        }\n        \n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 2rem;\n        }\n        \n        h1, h2, h3, h4, h5, h6 {\n            margin-top: 1.5em;\n            margin-bottom: 0.5em;\n            font-weight: 600;\n        }\n        \n        h1 { font-size: 2.5rem; }\n        h2 { font-size: 2rem; }\n        h3 { font-size: 1.5rem; }\n        \n        p {\n            margin: 1em 0;\n        }\n        \n        blockquote {\n            margin: 1em 0;\n            padding-left: 1em;\n            border-left: 4px solid #e2e8f0;\n            color: #64748b;\n        }\n        \n        code {\n            padding: 0.2em 0.4em;\n            margin: 0;\n            font-size: 85%;\n            border-radius: 3px;\n            font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n        }\n        \n        ul, ol {\n            margin: 1em 0;\n            padding-left: 2em;\n        }\n        \n        li {\n            margin: 0.25em 0;\n        }\n        \n        strong { font-weight: 600; }\n        em { font-style: italic; }\n        u { text-decoration: underline; }\n        s { text-decoration: line-through; }\n        \n        @media (max-width: 768px) {\n            .container {\n                padding: 1rem;\n            }\n            \n            h1 { font-size: 2rem; }\n            h2 { font-size: 1.5rem; }\n            h3 { font-size: 1.25rem; }\n        }\n    `\n\n    const themeStyles = {\n      light: `\n        body {\n            background-color: #ffffff;\n            color: #1a202c;\n        }\n        \n        code {\n            background-color: #f7fafc;\n            color: #e53e3e;\n        }\n        \n        blockquote {\n            border-left-color: #e2e8f0;\n            color: #64748b;\n        }\n      `,\n      dark: `\n        body {\n            background-color: #1a202c;\n            color: #f7fafc;\n        }\n        \n        code {\n            background-color: #2d3748;\n            color: #f56565;\n        }\n        \n        blockquote {\n            border-left-color: #4a5568;\n            color: #a0aec0;\n        }\n      `,\n      custom: '',\n    }\n\n    return baseStyles + (themeStyles[theme] || '')\n  }\n}\n",
              ],
              names: [
                'Element',
                'Text',
                'SlateToHTMLConverter',
                'convert',
                'nodes',
                'map',
                'node',
                'convertNode',
                'join',
                'isText',
                'convertText',
                'isElement',
                'convertElement',
                'text',
                'escapeHtml',
                'bold',
                'italic',
                'underline',
                'strikethrough',
                'code',
                'element',
                'children',
                'child',
                'type',
                'htmlEscapes',
                'replace',
                'char',
                'generateStyledHTML',
                'content',
                'theme',
                'customCSS',
                'defaultStyles',
                'getDefaultStyles',
                'styles',
                'baseStyles',
                'themeStyles',
                'light',
                'dark',
                'custom',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '8d50d31419de07d3bf28d4c0f4481ea728868aed',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '8d50d31419de07d3bf28d4c0f4481ea728868aed' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_50ae5mtbd = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_50ae5mtbd()
      class SlateToHTMLConverter {
        convert(nodes) {
          return (
            cov_50ae5mtbd().f[0]++,
            cov_50ae5mtbd().s[0]++,
            nodes
              .map(
                (node) => (
                  cov_50ae5mtbd().f[1]++,
                  cov_50ae5mtbd().s[1]++,
                  this.convertNode(node)
                )
              )
              .join('')
          )
        }
        convertNode(node) {
          return (
            cov_50ae5mtbd().f[2]++,
            cov_50ae5mtbd().s[2]++,
            index_es.EY.isText(node)
              ? (cov_50ae5mtbd().b[0][0]++,
                cov_50ae5mtbd().s[3]++,
                this.convertText(node))
              : (cov_50ae5mtbd().b[0][1]++,
                cov_50ae5mtbd().s[4]++,
                index_es.Hg.isElement(node)
                  ? (cov_50ae5mtbd().b[1][0]++,
                    cov_50ae5mtbd().s[5]++,
                    this.convertElement(node))
                  : (cov_50ae5mtbd().b[1][1]++, cov_50ae5mtbd().s[6]++, ''))
          )
        }
        convertText(node) {
          cov_50ae5mtbd().f[3]++
          let text = (cov_50ae5mtbd().s[7]++, this.escapeHtml(node.text))
          return (
            cov_50ae5mtbd().s[8]++,
            node.bold
              ? (cov_50ae5mtbd().b[2][0]++,
                cov_50ae5mtbd().s[9]++,
                (text = `<strong>${text}</strong>`))
              : cov_50ae5mtbd().b[2][1]++,
            cov_50ae5mtbd().s[10]++,
            node.italic
              ? (cov_50ae5mtbd().b[3][0]++,
                cov_50ae5mtbd().s[11]++,
                (text = `<em>${text}</em>`))
              : cov_50ae5mtbd().b[3][1]++,
            cov_50ae5mtbd().s[12]++,
            node.underline
              ? (cov_50ae5mtbd().b[4][0]++,
                cov_50ae5mtbd().s[13]++,
                (text = `<u>${text}</u>`))
              : cov_50ae5mtbd().b[4][1]++,
            cov_50ae5mtbd().s[14]++,
            node.strikethrough
              ? (cov_50ae5mtbd().b[5][0]++,
                cov_50ae5mtbd().s[15]++,
                (text = `<s>${text}</s>`))
              : cov_50ae5mtbd().b[5][1]++,
            cov_50ae5mtbd().s[16]++,
            node.code
              ? (cov_50ae5mtbd().b[6][0]++,
                cov_50ae5mtbd().s[17]++,
                (text = `<code>${text}</code>`))
              : cov_50ae5mtbd().b[6][1]++,
            cov_50ae5mtbd().s[18]++,
            text
          )
        }
        convertElement(element) {
          cov_50ae5mtbd().f[4]++
          const children =
            (cov_50ae5mtbd().s[19]++,
            element.children
              .map(
                (child) => (
                  cov_50ae5mtbd().f[5]++,
                  cov_50ae5mtbd().s[20]++,
                  this.convertNode(child)
                )
              )
              .join(''))
          switch ((cov_50ae5mtbd().s[21]++, element.type)) {
            case 'paragraph':
              return (
                cov_50ae5mtbd().b[7][0]++,
                cov_50ae5mtbd().s[22]++,
                `<p>${(cov_50ae5mtbd().b[8][0]++, children || (cov_50ae5mtbd().b[8][1]++, '&nbsp;'))}</p>`
              )
            case 'heading-one':
              return (
                cov_50ae5mtbd().b[7][1]++,
                cov_50ae5mtbd().s[23]++,
                `<h1>${children}</h1>`
              )
            case 'heading-two':
              return (
                cov_50ae5mtbd().b[7][2]++,
                cov_50ae5mtbd().s[24]++,
                `<h2>${children}</h2>`
              )
            case 'heading-three':
              return (
                cov_50ae5mtbd().b[7][3]++,
                cov_50ae5mtbd().s[25]++,
                `<h3>${children}</h3>`
              )
            case 'block-quote':
              return (
                cov_50ae5mtbd().b[7][4]++,
                cov_50ae5mtbd().s[26]++,
                `<blockquote>${children}</blockquote>`
              )
            case 'bulleted-list':
              return (
                cov_50ae5mtbd().b[7][5]++,
                cov_50ae5mtbd().s[27]++,
                `<ul>${children}</ul>`
              )
            case 'numbered-list':
              return (
                cov_50ae5mtbd().b[7][6]++,
                cov_50ae5mtbd().s[28]++,
                `<ol>${children}</ol>`
              )
            case 'list-item':
              return (
                cov_50ae5mtbd().b[7][7]++,
                cov_50ae5mtbd().s[29]++,
                `<li>${children}</li>`
              )
            default:
              return (
                cov_50ae5mtbd().b[7][8]++,
                cov_50ae5mtbd().s[30]++,
                `<div>${children}</div>`
              )
          }
        }
        escapeHtml(text) {
          cov_50ae5mtbd().f[6]++
          const htmlEscapes =
            (cov_50ae5mtbd().s[31]++,
            {
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#39;',
            })
          return (
            cov_50ae5mtbd().s[32]++,
            text.replace(
              /[&<>"']/g,
              (char) => (
                cov_50ae5mtbd().f[7]++,
                cov_50ae5mtbd().s[33]++,
                cov_50ae5mtbd().b[9][0]++,
                htmlEscapes[char] || (cov_50ae5mtbd().b[9][1]++, char)
              )
            )
          )
        }
        generateStyledHTML(content, theme, customCSS) {
          cov_50ae5mtbd().f[8]++
          const defaultStyles =
              (cov_50ae5mtbd().s[34]++, this.getDefaultStyles(theme)),
            styles =
              (cov_50ae5mtbd().s[35]++,
              cov_50ae5mtbd().b[10][0]++,
              customCSS || (cov_50ae5mtbd().b[10][1]++, defaultStyles))
          return (
            cov_50ae5mtbd().s[36]++,
            `<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Exported Note</title>\n    <style>\n        ${styles}\n    </style>\n</head>\n<body>\n    <div class="container">\n        ${content}\n    </div>\n</body>\n</html>`
          )
        }
        getDefaultStyles(theme) {
          cov_50ae5mtbd().f[9]++
          const baseStyles =
              (cov_50ae5mtbd().s[37]++,
              "\n        * {\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 0;\n        }\n        \n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 2rem;\n        }\n        \n        h1, h2, h3, h4, h5, h6 {\n            margin-top: 1.5em;\n            margin-bottom: 0.5em;\n            font-weight: 600;\n        }\n        \n        h1 { font-size: 2.5rem; }\n        h2 { font-size: 2rem; }\n        h3 { font-size: 1.5rem; }\n        \n        p {\n            margin: 1em 0;\n        }\n        \n        blockquote {\n            margin: 1em 0;\n            padding-left: 1em;\n            border-left: 4px solid #e2e8f0;\n            color: #64748b;\n        }\n        \n        code {\n            padding: 0.2em 0.4em;\n            margin: 0;\n            font-size: 85%;\n            border-radius: 3px;\n            font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n        }\n        \n        ul, ol {\n            margin: 1em 0;\n            padding-left: 2em;\n        }\n        \n        li {\n            margin: 0.25em 0;\n        }\n        \n        strong { font-weight: 600; }\n        em { font-style: italic; }\n        u { text-decoration: underline; }\n        s { text-decoration: line-through; }\n        \n        @media (max-width: 768px) {\n            .container {\n                padding: 1rem;\n            }\n            \n            h1 { font-size: 2rem; }\n            h2 { font-size: 1.5rem; }\n            h3 { font-size: 1.25rem; }\n        }\n    "),
            themeStyles =
              (cov_50ae5mtbd().s[38]++,
              {
                light:
                  '\n        body {\n            background-color: #ffffff;\n            color: #1a202c;\n        }\n        \n        code {\n            background-color: #f7fafc;\n            color: #e53e3e;\n        }\n        \n        blockquote {\n            border-left-color: #e2e8f0;\n            color: #64748b;\n        }\n      ',
                dark: '\n        body {\n            background-color: #1a202c;\n            color: #f7fafc;\n        }\n        \n        code {\n            background-color: #2d3748;\n            color: #f56565;\n        }\n        \n        blockquote {\n            border-left-color: #4a5568;\n            color: #a0aec0;\n        }\n      ',
                custom: '',
              })
          return (
            cov_50ae5mtbd().s[39]++,
            baseStyles +
              (cov_50ae5mtbd().b[11][0]++,
              themeStyles[theme] || (cov_50ae5mtbd().b[11][1]++, ''))
          )
        }
      }
      function cov_17wpwxap2d() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/html-exporter.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/html-exporter.ts',
            statementMap: {
              0: {
                start: { line: 5, column: 8 },
                end: { line: 40, column: 9 },
              },
              1: {
                start: { line: 6, column: 32 },
                end: { line: 6, column: 39 },
              },
              2: {
                start: { line: 8, column: 30 },
                end: { line: 8, column: 61 },
              },
              3: {
                start: { line: 10, column: 12 },
                end: { line: 12, column: 13 },
              },
              4: {
                start: { line: 11, column: 16 },
                end: { line: 11, column: 78 },
              },
              5: {
                start: { line: 14, column: 12 },
                end: { line: 16, column: 13 },
              },
              6: {
                start: { line: 15, column: 16 },
                end: { line: 15, column: 76 },
              },
              7: {
                start: { line: 19, column: 12 },
                end: { line: 27, column: 13 },
              },
              8: {
                start: { line: 20, column: 16 },
                end: { line: 20, column: 123 },
              },
              9: {
                start: { line: 22, column: 16 },
                end: { line: 24, column: 17 },
              },
              10: {
                start: { line: 23, column: 20 },
                end: { line: 23, column: 77 },
              },
              11: {
                start: { line: 26, column: 16 },
                end: { line: 26, column: 43 },
              },
              12: {
                start: { line: 29, column: 29 },
                end: { line: 29, column: 170 },
              },
              13: {
                start: { line: 31, column: 25 },
                end: { line: 31, column: 67 },
              },
              14: {
                start: { line: 32, column: 12 },
                end: { line: 37, column: 14 },
              },
              15: {
                start: { line: 39, column: 12 },
                end: { line: 39, column: 43 },
              },
              16: {
                start: { line: 43, column: 8 },
                end: { line: 87, column: 9 },
              },
              17: {
                start: { line: 44, column: 38 },
                end: { line: 44, column: 45 },
              },
              18: {
                start: { line: 45, column: 12 },
                end: { line: 47, column: 13 },
              },
              19: {
                start: { line: 46, column: 16 },
                end: { line: 46, column: 68 },
              },
              20: {
                start: { line: 49, column: 26 },
                end: { line: 49, column: 28 },
              },
              21: {
                start: { line: 50, column: 24 },
                end: { line: 50, column: 26 },
              },
              22: {
                start: { line: 51, column: 12 },
                end: { line: 66, column: 15 },
              },
              23: {
                start: { line: 53, column: 36 },
                end: { line: 53, column: 72 },
              },
              24: {
                start: { line: 54, column: 31 },
                end: { line: 54, column: 50 },
              },
              25: {
                start: { line: 55, column: 30 },
                end: { line: 55, column: 157 },
              },
              26: {
                start: { line: 57, column: 16 },
                end: { line: 57, column: 88 },
              },
              27: {
                start: { line: 59, column: 16 },
                end: { line: 65, column: 11 },
              },
              28: {
                start: { line: 67, column: 28 },
                end: { line: 74, column: 7 },
              },
              29: {
                start: { line: 75, column: 31 },
                end: { line: 75, column: 57 },
              },
              30: {
                start: { line: 76, column: 33 },
                end: { line: 76, column: 115 },
              },
              31: {
                start: { line: 77, column: 29 },
                end: { line: 77, column: 73 },
              },
              32: {
                start: { line: 78, column: 25 },
                end: { line: 78, column: 67 },
              },
              33: {
                start: { line: 79, column: 12 },
                end: { line: 84, column: 14 },
              },
              34: {
                start: { line: 86, column: 12 },
                end: { line: 86, column: 43 },
              },
              35: {
                start: { line: 90, column: 22 },
                end: { line: 90, column: 24 },
              },
              36: {
                start: { line: 91, column: 8 },
                end: { line: 93, column: 9 },
              },
              37: {
                start: { line: 92, column: 12 },
                end: { line: 92, column: 118 },
              },
              38: {
                start: { line: 94, column: 8 },
                end: { line: 96, column: 9 },
              },
              39: {
                start: { line: 95, column: 12 },
                end: { line: 95, column: 120 },
              },
              40: {
                start: { line: 97, column: 8 },
                end: { line: 99, column: 9 },
              },
              41: {
                start: { line: 98, column: 12 },
                end: { line: 98, column: 128 },
              },
              42: {
                start: { line: 100, column: 8 },
                end: { line: 102, column: 9 },
              },
              43: {
                start: { line: 101, column: 12 },
                end: { line: 101, column: 128 },
              },
              44: {
                start: { line: 103, column: 8 },
                end: { line: 106, column: 9 },
              },
              45: {
                start: { line: 104, column: 25 },
                end: { line: 104, column: 111 },
              },
              46: {
                start: { line: 104, column: 50 },
                end: { line: 104, column: 100 },
              },
              47: {
                start: { line: 105, column: 12 },
                end: { line: 105, column: 90 },
              },
              48: {
                start: { line: 107, column: 8 },
                end: { line: 109, column: 9 },
              },
              49: {
                start: { line: 108, column: 12 },
                end: { line: 108, column: 130 },
              },
              50: {
                start: { line: 110, column: 8 },
                end: { line: 115, column: 6 },
              },
              51: {
                start: { line: 119, column: 29 },
                end: { line: 119, column: 54 },
              },
              52: {
                start: { line: 120, column: 25 },
                end: { line: 120, column: 27 },
              },
              53: {
                start: { line: 122, column: 8 },
                end: { line: 132, column: 9 },
              },
              54: {
                start: { line: 123, column: 26 },
                end: { line: 123, column: 44 },
              },
              55: {
                start: { line: 124, column: 25 },
                end: { line: 124, column: 57 },
              },
              56: {
                start: { line: 126, column: 23 },
                end: { line: 126, column: 51 },
              },
              57: {
                start: { line: 127, column: 12 },
                end: { line: 131, column: 15 },
              },
              58: {
                start: { line: 134, column: 25 },
                end: { line: 137, column: 21 },
              },
              59: {
                start: { line: 135, column: 27 },
                end: { line: 135, column: 49 },
              },
              60: {
                start: { line: 136, column: 12 },
                end: { line: 136, column: 85 },
              },
              61: {
                start: { line: 138, column: 20 },
                end: { line: 146, column: 5 },
              },
              62: {
                start: { line: 148, column: 29 },
                end: { line: 148, column: 36 },
              },
              63: {
                start: { line: 149, column: 8 },
                end: { line: 151, column: 11 },
              },
              64: {
                start: { line: 150, column: 12 },
                end: { line: 150, column: 124 },
              },
              65: {
                start: { line: 152, column: 8 },
                end: { line: 152, column: 19 },
              },
              66: {
                start: { line: 155, column: 29 },
                end: { line: 208, column: 5 },
              },
              67: {
                start: { line: 209, column: 8 },
                end: { line: 209, column: 65 },
              },
              68: {
                start: { line: 212, column: 8 },
                end: { line: 267, column: 6 },
              },
              69: {
                start: { line: 270, column: 20 },
                end: { line: 270, column: 49 },
              },
              70: {
                start: { line: 271, column: 8 },
                end: { line: 271, column: 31 },
              },
              71: {
                start: { line: 272, column: 8 },
                end: { line: 272, column: 29 },
              },
              72: {
                start: { line: 275, column: 8 },
                end: { line: 275, column: 22 },
              },
              73: {
                start: { line: 276, column: 8 },
                end: { line: 276, column: 52 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 4, column: 4 },
                  end: { line: 4, column: 5 },
                },
                loc: {
                  start: { line: 4, column: 45 },
                  end: { line: 41, column: 5 },
                },
                line: 4,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 42, column: 4 },
                  end: { line: 42, column: 5 },
                },
                loc: {
                  start: { line: 42, column: 30 },
                  end: { line: 88, column: 5 },
                },
                line: 42,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 51, column: 26 },
                  end: { line: 51, column: 27 },
                },
                loc: {
                  start: { line: 51, column: 41 },
                  end: { line: 66, column: 13 },
                },
                line: 51,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 89, column: 4 },
                  end: { line: 89, column: 5 },
                },
                loc: {
                  start: { line: 89, column: 33 },
                  end: { line: 116, column: 5 },
                },
                line: 89,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 104, column: 43 },
                  end: { line: 104, column: 44 },
                },
                loc: {
                  start: { line: 104, column: 50 },
                  end: { line: 104, column: 100 },
                },
                line: 104,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 117, column: 4 },
                  end: { line: 117, column: 5 },
                },
                loc: {
                  start: { line: 117, column: 27 },
                  end: { line: 153, column: 5 },
                },
                line: 117,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 134, column: 38 },
                  end: { line: 134, column: 39 },
                },
                loc: {
                  start: { line: 134, column: 61 },
                  end: { line: 137, column: 9 },
                },
                line: 134,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 149, column: 25 },
                  end: { line: 149, column: 26 },
                },
                loc: {
                  start: { line: 149, column: 42 },
                  end: { line: 151, column: 9 },
                },
                line: 149,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 154, column: 4 },
                  end: { line: 154, column: 5 },
                },
                loc: {
                  start: { line: 154, column: 33 },
                  end: { line: 210, column: 5 },
                },
                line: 154,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 211, column: 4 },
                  end: { line: 211, column: 5 },
                },
                loc: {
                  start: { line: 211, column: 26 },
                  end: { line: 268, column: 5 },
                },
                line: 211,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 269, column: 4 },
                  end: { line: 269, column: 5 },
                },
                loc: {
                  start: { line: 269, column: 21 },
                  end: { line: 273, column: 5 },
                },
                line: 269,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 274, column: 4 },
                  end: { line: 274, column: 5 },
                },
                loc: {
                  start: { line: 274, column: 17 },
                  end: { line: 277, column: 5 },
                },
                line: 274,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 10, column: 12 },
                  end: { line: 12, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 10, column: 12 },
                    end: { line: 12, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 10,
              },
              1: {
                loc: {
                  start: { line: 10, column: 16 },
                  end: { line: 10, column: 55 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 10, column: 16 },
                    end: { line: 10, column: 43 },
                  },
                  {
                    start: { line: 10, column: 47 },
                    end: { line: 10, column: 55 },
                  },
                ],
                line: 10,
              },
              2: {
                loc: {
                  start: { line: 14, column: 12 },
                  end: { line: 16, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 14, column: 12 },
                    end: { line: 16, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 14,
              },
              3: {
                loc: {
                  start: { line: 19, column: 12 },
                  end: { line: 27, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 19, column: 12 },
                    end: { line: 27, column: 13 },
                  },
                  {
                    start: { line: 25, column: 19 },
                    end: { line: 27, column: 13 },
                  },
                ],
                line: 19,
              },
              4: {
                loc: {
                  start: { line: 20, column: 78 },
                  end: { line: 20, column: 102 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 20, column: 78 },
                    end: { line: 20, column: 91 },
                  },
                  {
                    start: { line: 20, column: 95 },
                    end: { line: 20, column: 102 },
                  },
                ],
                line: 20,
              },
              5: {
                loc: {
                  start: { line: 22, column: 16 },
                  end: { line: 24, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 22, column: 16 },
                    end: { line: 24, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 22,
              },
              6: {
                loc: {
                  start: { line: 29, column: 29 },
                  end: { line: 29, column: 170 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 29, column: 29 },
                    end: { line: 29, column: 45 },
                  },
                  {
                    start: { line: 29, column: 49 },
                    end: { line: 29, column: 170 },
                  },
                ],
                line: 29,
              },
              7: {
                loc: {
                  start: { line: 29, column: 71 },
                  end: { line: 29, column: 151 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 29, column: 72 },
                    end: { line: 29, column: 138 },
                  },
                  {
                    start: { line: 29, column: 143 },
                    end: { line: 29, column: 151 },
                  },
                ],
                line: 29,
              },
              8: {
                loc: {
                  start: { line: 29, column: 72 },
                  end: { line: 29, column: 138 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 29, column: 115 },
                    end: { line: 29, column: 121 },
                  },
                  {
                    start: { line: 29, column: 124 },
                    end: { line: 29, column: 138 },
                  },
                ],
                line: 29,
              },
              9: {
                loc: {
                  start: { line: 29, column: 72 },
                  end: { line: 29, column: 112 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 29, column: 72 },
                    end: { line: 29, column: 89 },
                  },
                  {
                    start: { line: 29, column: 93 },
                    end: { line: 29, column: 112 },
                  },
                ],
                line: 29,
              },
              10: {
                loc: {
                  start: { line: 45, column: 12 },
                  end: { line: 47, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 45, column: 12 },
                    end: { line: 47, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 45,
              },
              11: {
                loc: {
                  start: { line: 55, column: 30 },
                  end: { line: 55, column: 157 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 55, column: 31 },
                    end: { line: 55, column: 133 },
                  },
                  {
                    start: { line: 55, column: 138 },
                    end: { line: 55, column: 157 },
                  },
                ],
                line: 55,
              },
              12: {
                loc: {
                  start: { line: 55, column: 31 },
                  end: { line: 55, column: 133 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 55, column: 104 },
                    end: { line: 55, column: 110 },
                  },
                  {
                    start: { line: 55, column: 113 },
                    end: { line: 55, column: 133 },
                  },
                ],
                line: 55,
              },
              13: {
                loc: {
                  start: { line: 55, column: 31 },
                  end: { line: 55, column: 101 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 55, column: 31 },
                    end: { line: 55, column: 72 },
                  },
                  {
                    start: { line: 55, column: 76 },
                    end: { line: 55, column: 101 },
                  },
                ],
                line: 55,
              },
              14: {
                loc: {
                  start: { line: 91, column: 8 },
                  end: { line: 93, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 91, column: 8 },
                    end: { line: 93, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 91,
              },
              15: {
                loc: {
                  start: { line: 94, column: 8 },
                  end: { line: 96, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 94, column: 8 },
                    end: { line: 96, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 94,
              },
              16: {
                loc: {
                  start: { line: 97, column: 8 },
                  end: { line: 99, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 97, column: 8 },
                    end: { line: 99, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 97,
              },
              17: {
                loc: {
                  start: { line: 100, column: 8 },
                  end: { line: 102, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 100, column: 8 },
                    end: { line: 102, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 100,
              },
              18: {
                loc: {
                  start: { line: 103, column: 8 },
                  end: { line: 106, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 103, column: 8 },
                    end: { line: 106, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 103,
              },
              19: {
                loc: {
                  start: { line: 103, column: 12 },
                  end: { line: 103, column: 53 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 103, column: 12 },
                    end: { line: 103, column: 25 },
                  },
                  {
                    start: { line: 103, column: 29 },
                    end: { line: 103, column: 53 },
                  },
                ],
                line: 103,
              },
              20: {
                loc: {
                  start: { line: 107, column: 8 },
                  end: { line: 109, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 107, column: 8 },
                    end: { line: 109, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 107,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/html-exporter.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\nimport { BaseExporter } from './base-exporter'\nimport {\n  type BulkExportOptions,\n  type ExportMetadata,\n  type ExportOptions,\n  type ExportResult,\n  type HTMLExportOptions,\n} from './types'\nimport { SlateToHTMLConverter } from './converters/slate-to-html'\n\nexport class HTMLExporter extends BaseExporter {\n  private converter: SlateToHTMLConverter\n\n  constructor() {\n    super('html')\n    this.converter = new SlateToHTMLConverter()\n  }\n\n  async export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult> {\n    try {\n      const htmlOptions = options as HTMLExportOptions\n\n      // Convert content to HTML\n      let htmlContent = this.converter.convert(content)\n\n      // Add metadata if requested\n      if (htmlOptions.includeMetadata && metadata) {\n        htmlContent = this.addMetadataSection(metadata) + htmlContent\n      }\n\n      // Add navigation if requested\n      if (htmlOptions.includeNavigation) {\n        htmlContent = this.addNavigation(htmlContent) + htmlContent\n      }\n\n      // Wrap in complete HTML document if self-contained\n      let finalContent: string\n      if (htmlOptions.selfContained !== false) {\n        finalContent = this.converter.generateStyledHTML(\n          htmlContent,\n          options.theme || 'light',\n          options.customCSS\n        )\n\n        // Add search functionality if requested\n        if (htmlOptions.includeSearch) {\n          finalContent = this.addSearchFunctionality(finalContent)\n        }\n      } else {\n        finalContent = htmlContent\n      }\n\n      // Generate filename\n      const fileName =\n        options.fileName ||\n        this.generateFileName(metadata?.title || 'export', 'html', metadata)\n\n      // Create blob\n      const blob = this.createBlob(finalContent, 'text/html')\n\n      return {\n        success: true,\n        data: blob,\n        fileName,\n        mimeType: 'text/html',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  async bulkExport(options: BulkExportOptions): Promise<ExportResult> {\n    try {\n      const { notes, format } = options\n\n      if (format !== 'html') {\n        throw new Error('Invalid format for HTML exporter')\n      }\n\n      // Create a multi-page HTML document\n      const pages: string[] = []\n      const toc: string[] = []\n\n      notes.forEach((note, index) => {\n        const htmlContent = this.converter.convert(note.content)\n        const pageId = `note-${index + 1}`\n        const title = note.metadata?.title || `Note ${index + 1}`\n\n        // Add to TOC\n        toc.push(`<li><a href=\"#${pageId}\">${this.escapeHtml(title)}</a></li>`)\n\n        // Add page\n        pages.push(`\n          <article id=\"${pageId}\" class=\"note-page\">\n            <h1>${this.escapeHtml(title)}</h1>\n            ${htmlContent}\n          </article>\n          <hr class=\"page-separator\">\n        `)\n      })\n\n      const tocHtml = `\n        <nav class=\"table-of-contents\">\n          <h2>Table of Contents</h2>\n          <ol>\n            ${toc.join('\\n')}\n          </ol>\n        </nav>\n      `\n\n      const allContent = tocHtml + pages.join('\\n')\n      const finalContent = this.converter.generateStyledHTML(\n        allContent,\n        'light',\n        this.getBulkExportStyles()\n      )\n\n      const fileName = this.generateFileName('bulk-export', 'html')\n      const blob = this.createBlob(finalContent, 'text/html')\n\n      return {\n        success: true,\n        data: blob,\n        fileName,\n        mimeType: 'text/html',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  private addMetadataSection(metadata: ExportMetadata): string {\n    const items: string[] = []\n\n    if (metadata.title) {\n      items.push(\n        `<div class=\"metadata-item\"><strong>Title:</strong> ${this.escapeHtml(metadata.title)}</div>`\n      )\n    }\n    if (metadata.author) {\n      items.push(\n        `<div class=\"metadata-item\"><strong>Author:</strong> ${this.escapeHtml(metadata.author)}</div>`\n      )\n    }\n    if (metadata.createdAt) {\n      items.push(\n        `<div class=\"metadata-item\"><strong>Created:</strong> ${metadata.createdAt.toLocaleDateString()}</div>`\n      )\n    }\n    if (metadata.updatedAt) {\n      items.push(\n        `<div class=\"metadata-item\"><strong>Updated:</strong> ${metadata.updatedAt.toLocaleDateString()}</div>`\n      )\n    }\n    if (metadata.tags && metadata.tags.length > 0) {\n      const tags = metadata.tags\n        .map((tag) => `<span class=\"tag\">${this.escapeHtml(tag)}</span>`)\n        .join(' ')\n      items.push(\n        `<div class=\"metadata-item\"><strong>Tags:</strong> ${tags}</div>`\n      )\n    }\n    if (metadata.description) {\n      items.push(\n        `<div class=\"metadata-item\"><strong>Description:</strong> ${this.escapeHtml(metadata.description)}</div>`\n      )\n    }\n\n    return `\n      <div class=\"metadata-section\">\n        ${items.join('\\n')}\n      </div>\n      <hr>\n    `\n  }\n\n  private addNavigation(content: string): string {\n    // Extract headings for navigation\n    const headingRegex = /<h([1-6])>(.*?)<\\/h\\1>/g\n    const headings: Array<{ level: number; text: string; id: string }> = []\n    let match\n\n    while ((match = headingRegex.exec(content)) !== null) {\n      const level = parseInt(match[1])\n      const text = match[2].replace(/<[^>]*>/g, '') // Strip HTML tags\n      const id = `heading-${headings.length}`\n      headings.push({ level, text, id })\n    }\n\n    // Generate navigation HTML\n    const navItems = headings\n      .map(({ level, text, id }) => {\n        const indent = '  '.repeat(level - 1)\n        return `${indent}<li><a href=\"#${id}\">${this.escapeHtml(text)}</a></li>`\n      })\n      .join('\\n')\n\n    const nav = `\n      <nav class=\"document-navigation\">\n        <h2>Contents</h2>\n        <ul>\n          ${navItems}\n        </ul>\n      </nav>\n      <hr>\n    `\n\n    // Add IDs to headings in content\n    let updatedContent = content\n    headings.forEach(({ id }, index) => {\n      updatedContent = updatedContent.replace(\n        new RegExp(`<h([1-6])>(.*?)<\\/h\\\\1>`, 'i'),\n        `<h$1 id=\"${id}\">$2</h$1>`\n      )\n    })\n\n    return nav\n  }\n\n  private addSearchFunctionality(html: string): string {\n    const searchScript = `\n      <script>\n        function searchContent() {\n          const searchTerm = document.getElementById('search-input').value.toLowerCase();\n          const content = document.querySelector('.container');\n          const text = content.textContent || content.innerText;\n          \n          // Remove previous highlights\n          content.innerHTML = content.innerHTML.replace(/<mark[^>]*>(.*?)<\\/mark>/gi, '$1');\n          \n          if (searchTerm.length < 2) return;\n          \n          // Highlight search terms\n          const regex = new RegExp('(' + searchTerm + ')', 'gi');\n          content.innerHTML = content.innerHTML.replace(regex, '<mark>$1</mark>');\n        }\n        \n        document.addEventListener('DOMContentLoaded', function() {\n          const searchBox = '<div class=\"search-box\"><input type=\"text\" id=\"search-input\" placeholder=\"Search...\" oninput=\"searchContent()\"></div>';\n          document.querySelector('.container').insertAdjacentHTML('afterbegin', searchBox);\n        });\n      <\/script>\n      \n      <style>\n        .search-box {\n          margin-bottom: 2rem;\n          position: sticky;\n          top: 0;\n          background: inherit;\n          padding: 1rem 0;\n          z-index: 100;\n        }\n        \n        #search-input {\n          width: 100%;\n          padding: 0.5rem 1rem;\n          font-size: 1rem;\n          border: 2px solid #e2e8f0;\n          border-radius: 0.375rem;\n          outline: none;\n        }\n        \n        #search-input:focus {\n          border-color: #3b82f6;\n        }\n        \n        mark {\n          background-color: #fef3c7;\n          color: inherit;\n          padding: 0.1em 0.2em;\n          border-radius: 0.2em;\n        }\n      </style>\n    `\n\n    return html.replace('</head>', `${searchScript}</head>`)\n  }\n\n  private getBulkExportStyles(): string {\n    return `\n      .table-of-contents {\n        margin-bottom: 3rem;\n        padding: 2rem;\n        background-color: #f8fafc;\n        border-radius: 0.5rem;\n      }\n      \n      .table-of-contents h2 {\n        margin-top: 0;\n      }\n      \n      .table-of-contents ol {\n        margin: 1rem 0;\n      }\n      \n      .table-of-contents a {\n        color: #3b82f6;\n        text-decoration: none;\n      }\n      \n      .table-of-contents a:hover {\n        text-decoration: underline;\n      }\n      \n      .note-page {\n        margin: 3rem 0;\n      }\n      \n      .page-separator {\n        margin: 4rem 0;\n        border: none;\n        border-top: 2px solid #e2e8f0;\n      }\n      \n      .metadata-section {\n        background-color: #f8fafc;\n        padding: 1rem;\n        border-radius: 0.375rem;\n        margin-bottom: 2rem;\n      }\n      \n      .metadata-item {\n        margin: 0.5rem 0;\n      }\n      \n      .tag {\n        display: inline-block;\n        padding: 0.25rem 0.5rem;\n        margin: 0.25rem;\n        background-color: #e0e7ff;\n        color: #4338ca;\n        border-radius: 0.25rem;\n        font-size: 0.875rem;\n      }\n    `\n  }\n\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n}\n",
              ],
              names: [
                'BaseExporter',
                'SlateToHTMLConverter',
                'HTMLExporter',
                'export',
                'content',
                'options',
                'metadata',
                'htmlOptions',
                'htmlContent',
                'converter',
                'convert',
                'includeMetadata',
                'addMetadataSection',
                'includeNavigation',
                'addNavigation',
                'finalContent',
                'selfContained',
                'generateStyledHTML',
                'theme',
                'customCSS',
                'includeSearch',
                'addSearchFunctionality',
                'fileName',
                'generateFileName',
                'title',
                'blob',
                'createBlob',
                'success',
                'data',
                'mimeType',
                'error',
                'handleError',
                'bulkExport',
                'notes',
                'format',
                'Error',
                'pages',
                'toc',
                'forEach',
                'note',
                'index',
                'pageId',
                'push',
                'escapeHtml',
                'tocHtml',
                'join',
                'allContent',
                'getBulkExportStyles',
                'items',
                'author',
                'createdAt',
                'toLocaleDateString',
                'updatedAt',
                'tags',
                'length',
                'map',
                'tag',
                'description',
                'headingRegex',
                'headings',
                'match',
                'exec',
                'level',
                'parseInt',
                'text',
                'replace',
                'id',
                'navItems',
                'indent',
                'repeat',
                'nav',
                'updatedContent',
                'RegExp',
                'html',
                'searchScript',
                'div',
                'document',
                'createElement',
                'textContent',
                'innerHTML',
                'constructor',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '22e59c27f85c73c3afbb8939a51c29ba0393feca',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '22e59c27f85c73c3afbb8939a51c29ba0393feca' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_17wpwxap2d = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_17wpwxap2d()
      class HTMLExporter extends BaseExporter {
        async export(content, options, metadata) {
          ;(cov_17wpwxap2d().f[0]++, cov_17wpwxap2d().s[0]++)
          try {
            const htmlOptions = (cov_17wpwxap2d().s[1]++, options)
            let finalContent,
              htmlContent =
                (cov_17wpwxap2d().s[2]++, this.converter.convert(content))
            ;(cov_17wpwxap2d().s[3]++,
              cov_17wpwxap2d().b[1][0]++,
              htmlOptions.includeMetadata &&
              (cov_17wpwxap2d().b[1][1]++, metadata)
                ? (cov_17wpwxap2d().b[0][0]++,
                  cov_17wpwxap2d().s[4]++,
                  (htmlContent =
                    this.addMetadataSection(metadata) + htmlContent))
                : cov_17wpwxap2d().b[0][1]++,
              cov_17wpwxap2d().s[5]++,
              htmlOptions.includeNavigation
                ? (cov_17wpwxap2d().b[2][0]++,
                  cov_17wpwxap2d().s[6]++,
                  (htmlContent = this.addNavigation(htmlContent) + htmlContent))
                : cov_17wpwxap2d().b[2][1]++,
              cov_17wpwxap2d().s[7]++,
              !1 !== htmlOptions.selfContained
                ? (cov_17wpwxap2d().b[3][0]++,
                  cov_17wpwxap2d().s[8]++,
                  (finalContent = this.converter.generateStyledHTML(
                    htmlContent,
                    (cov_17wpwxap2d().b[4][0]++,
                    options.theme || (cov_17wpwxap2d().b[4][1]++, 'light')),
                    options.customCSS
                  )),
                  cov_17wpwxap2d().s[9]++,
                  htmlOptions.includeSearch
                    ? (cov_17wpwxap2d().b[5][0]++,
                      cov_17wpwxap2d().s[10]++,
                      (finalContent =
                        this.addSearchFunctionality(finalContent)))
                    : cov_17wpwxap2d().b[5][1]++)
                : (cov_17wpwxap2d().b[3][1]++,
                  cov_17wpwxap2d().s[11]++,
                  (finalContent = htmlContent)))
            const fileName =
                (cov_17wpwxap2d().s[12]++,
                cov_17wpwxap2d().b[6][0]++,
                options.fileName ||
                  (cov_17wpwxap2d().b[6][1]++,
                  this.generateFileName(
                    (cov_17wpwxap2d().b[7][0]++,
                    cov_17wpwxap2d().b[9][0]++,
                    (null === metadata ||
                    (cov_17wpwxap2d().b[9][1]++, void 0 === metadata)
                      ? void cov_17wpwxap2d().b[8][0]++
                      : (cov_17wpwxap2d().b[8][1]++, metadata.title)) ||
                      (cov_17wpwxap2d().b[7][1]++, 'export')),
                    'html',
                    metadata
                  ))),
              blob =
                (cov_17wpwxap2d().s[13]++,
                this.createBlob(finalContent, 'text/html'))
            return (
              cov_17wpwxap2d().s[14]++,
              { success: !0, data: blob, fileName, mimeType: 'text/html' }
            )
          } catch (error) {
            return (cov_17wpwxap2d().s[15]++, this.handleError(error))
          }
        }
        async bulkExport(options) {
          ;(cov_17wpwxap2d().f[1]++, cov_17wpwxap2d().s[16]++)
          try {
            const { notes, format } = (cov_17wpwxap2d().s[17]++, options)
            if ((cov_17wpwxap2d().s[18]++, 'html' !== format))
              throw (
                cov_17wpwxap2d().b[10][0]++,
                cov_17wpwxap2d().s[19]++,
                new Error('Invalid format for HTML exporter')
              )
            cov_17wpwxap2d().b[10][1]++
            const pages = (cov_17wpwxap2d().s[20]++, []),
              toc = (cov_17wpwxap2d().s[21]++, [])
            ;(cov_17wpwxap2d().s[22]++,
              notes.forEach((note, index) => {
                var _note_metadata
                cov_17wpwxap2d().f[2]++
                const htmlContent =
                    (cov_17wpwxap2d().s[23]++,
                    this.converter.convert(note.content)),
                  pageId = (cov_17wpwxap2d().s[24]++, `note-${index + 1}`),
                  title =
                    (cov_17wpwxap2d().s[25]++,
                    cov_17wpwxap2d().b[11][0]++,
                    cov_17wpwxap2d().b[13][0]++,
                    (null === (_note_metadata = note.metadata) ||
                    (cov_17wpwxap2d().b[13][1]++, void 0 === _note_metadata)
                      ? void cov_17wpwxap2d().b[12][0]++
                      : (cov_17wpwxap2d().b[12][1]++, _note_metadata.title)) ||
                      (cov_17wpwxap2d().b[11][1]++, `Note ${index + 1}`))
                ;(cov_17wpwxap2d().s[26]++,
                  toc.push(
                    `<li><a href="#${pageId}">${this.escapeHtml(title)}</a></li>`
                  ),
                  cov_17wpwxap2d().s[27]++,
                  pages.push(
                    `\n          <article id="${pageId}" class="note-page">\n            <h1>${this.escapeHtml(title)}</h1>\n            ${htmlContent}\n          </article>\n          <hr class="page-separator">\n        `
                  ))
              }))
            const tocHtml =
                (cov_17wpwxap2d().s[28]++,
                `\n        <nav class="table-of-contents">\n          <h2>Table of Contents</h2>\n          <ol>\n            ${toc.join('\n')}\n          </ol>\n        </nav>\n      `),
              allContent =
                (cov_17wpwxap2d().s[29]++, tocHtml + pages.join('\n')),
              finalContent =
                (cov_17wpwxap2d().s[30]++,
                this.converter.generateStyledHTML(
                  allContent,
                  'light',
                  this.getBulkExportStyles()
                )),
              fileName =
                (cov_17wpwxap2d().s[31]++,
                this.generateFileName('bulk-export', 'html')),
              blob =
                (cov_17wpwxap2d().s[32]++,
                this.createBlob(finalContent, 'text/html'))
            return (
              cov_17wpwxap2d().s[33]++,
              { success: !0, data: blob, fileName, mimeType: 'text/html' }
            )
          } catch (error) {
            return (cov_17wpwxap2d().s[34]++, this.handleError(error))
          }
        }
        addMetadataSection(metadata) {
          cov_17wpwxap2d().f[3]++
          const items = (cov_17wpwxap2d().s[35]++, [])
          if (
            (cov_17wpwxap2d().s[36]++,
            metadata.title
              ? (cov_17wpwxap2d().b[14][0]++,
                cov_17wpwxap2d().s[37]++,
                items.push(
                  `<div class="metadata-item"><strong>Title:</strong> ${this.escapeHtml(metadata.title)}</div>`
                ))
              : cov_17wpwxap2d().b[14][1]++,
            cov_17wpwxap2d().s[38]++,
            metadata.author
              ? (cov_17wpwxap2d().b[15][0]++,
                cov_17wpwxap2d().s[39]++,
                items.push(
                  `<div class="metadata-item"><strong>Author:</strong> ${this.escapeHtml(metadata.author)}</div>`
                ))
              : cov_17wpwxap2d().b[15][1]++,
            cov_17wpwxap2d().s[40]++,
            metadata.createdAt
              ? (cov_17wpwxap2d().b[16][0]++,
                cov_17wpwxap2d().s[41]++,
                items.push(
                  `<div class="metadata-item"><strong>Created:</strong> ${metadata.createdAt.toLocaleDateString()}</div>`
                ))
              : cov_17wpwxap2d().b[16][1]++,
            cov_17wpwxap2d().s[42]++,
            metadata.updatedAt
              ? (cov_17wpwxap2d().b[17][0]++,
                cov_17wpwxap2d().s[43]++,
                items.push(
                  `<div class="metadata-item"><strong>Updated:</strong> ${metadata.updatedAt.toLocaleDateString()}</div>`
                ))
              : cov_17wpwxap2d().b[17][1]++,
            cov_17wpwxap2d().s[44]++,
            cov_17wpwxap2d().b[19][0]++,
            metadata.tags &&
              (cov_17wpwxap2d().b[19][1]++, metadata.tags.length > 0))
          ) {
            cov_17wpwxap2d().b[18][0]++
            const tags =
              (cov_17wpwxap2d().s[45]++,
              metadata.tags
                .map(
                  (tag) => (
                    cov_17wpwxap2d().f[4]++,
                    cov_17wpwxap2d().s[46]++,
                    `<span class="tag">${this.escapeHtml(tag)}</span>`
                  )
                )
                .join(' '))
            ;(cov_17wpwxap2d().s[47]++,
              items.push(
                `<div class="metadata-item"><strong>Tags:</strong> ${tags}</div>`
              ))
          } else cov_17wpwxap2d().b[18][1]++
          return (
            cov_17wpwxap2d().s[48]++,
            metadata.description
              ? (cov_17wpwxap2d().b[20][0]++,
                cov_17wpwxap2d().s[49]++,
                items.push(
                  `<div class="metadata-item"><strong>Description:</strong> ${this.escapeHtml(metadata.description)}</div>`
                ))
              : cov_17wpwxap2d().b[20][1]++,
            cov_17wpwxap2d().s[50]++,
            `\n      <div class="metadata-section">\n        ${items.join('\n')}\n      </div>\n      <hr>\n    `
          )
        }
        addNavigation(content) {
          cov_17wpwxap2d().f[5]++
          const headingRegex =
              (cov_17wpwxap2d().s[51]++, /<h([1-6])>(.*?)<\/h\1>/g),
            headings = (cov_17wpwxap2d().s[52]++, [])
          let match
          for (
            cov_17wpwxap2d().s[53]++;
            null !== (match = headingRegex.exec(content));

          ) {
            const level = (cov_17wpwxap2d().s[54]++, parseInt(match[1])),
              text =
                (cov_17wpwxap2d().s[55]++, match[2].replace(/<[^>]*>/g, '')),
              id = (cov_17wpwxap2d().s[56]++, `heading-${headings.length}`)
            ;(cov_17wpwxap2d().s[57]++, headings.push({ level, text, id }))
          }
          const navItems =
              (cov_17wpwxap2d().s[58]++,
              headings
                .map(({ level, text, id }) => {
                  cov_17wpwxap2d().f[6]++
                  const indent =
                    (cov_17wpwxap2d().s[59]++, '  '.repeat(level - 1))
                  return (
                    cov_17wpwxap2d().s[60]++,
                    `${indent}<li><a href="#${id}">${this.escapeHtml(text)}</a></li>`
                  )
                })
                .join('\n')),
            nav =
              (cov_17wpwxap2d().s[61]++,
              `\n      <nav class="document-navigation">\n        <h2>Contents</h2>\n        <ul>\n          ${navItems}\n        </ul>\n      </nav>\n      <hr>\n    `)
          let updatedContent = (cov_17wpwxap2d().s[62]++, content)
          return (
            cov_17wpwxap2d().s[63]++,
            headings.forEach(({ id }, index) => {
              ;(cov_17wpwxap2d().f[7]++,
                cov_17wpwxap2d().s[64]++,
                (updatedContent = updatedContent.replace(
                  new RegExp('<h([1-6])>(.*?)</h\\1>', 'i'),
                  `<h$1 id="${id}">$2</h$1>`
                )))
            }),
            cov_17wpwxap2d().s[65]++,
            nav
          )
        }
        addSearchFunctionality(html) {
          cov_17wpwxap2d().f[8]++
          const searchScript =
            (cov_17wpwxap2d().s[66]++,
            "\n      <script>\n        function searchContent() {\n          const searchTerm = document.getElementById('search-input').value.toLowerCase();\n          const content = document.querySelector('.container');\n          const text = content.textContent || content.innerText;\n          \n          // Remove previous highlights\n          content.innerHTML = content.innerHTML.replace(/<mark[^>]*>(.*?)</mark>/gi, '$1');\n          \n          if (searchTerm.length < 2) return;\n          \n          // Highlight search terms\n          const regex = new RegExp('(' + searchTerm + ')', 'gi');\n          content.innerHTML = content.innerHTML.replace(regex, '<mark>$1</mark>');\n        }\n        \n        document.addEventListener('DOMContentLoaded', function() {\n          const searchBox = '<div class=\"search-box\"><input type=\"text\" id=\"search-input\" placeholder=\"Search...\" oninput=\"searchContent()\"></div>';\n          document.querySelector('.container').insertAdjacentHTML('afterbegin', searchBox);\n        });\n      <\/script>\n      \n      <style>\n        .search-box {\n          margin-bottom: 2rem;\n          position: sticky;\n          top: 0;\n          background: inherit;\n          padding: 1rem 0;\n          z-index: 100;\n        }\n        \n        #search-input {\n          width: 100%;\n          padding: 0.5rem 1rem;\n          font-size: 1rem;\n          border: 2px solid #e2e8f0;\n          border-radius: 0.375rem;\n          outline: none;\n        }\n        \n        #search-input:focus {\n          border-color: #3b82f6;\n        }\n        \n        mark {\n          background-color: #fef3c7;\n          color: inherit;\n          padding: 0.1em 0.2em;\n          border-radius: 0.2em;\n        }\n      </style>\n    ")
          return (
            cov_17wpwxap2d().s[67]++,
            html.replace('</head>', `${searchScript}</head>`)
          )
        }
        getBulkExportStyles() {
          return (
            cov_17wpwxap2d().f[9]++,
            cov_17wpwxap2d().s[68]++,
            '\n      .table-of-contents {\n        margin-bottom: 3rem;\n        padding: 2rem;\n        background-color: #f8fafc;\n        border-radius: 0.5rem;\n      }\n      \n      .table-of-contents h2 {\n        margin-top: 0;\n      }\n      \n      .table-of-contents ol {\n        margin: 1rem 0;\n      }\n      \n      .table-of-contents a {\n        color: #3b82f6;\n        text-decoration: none;\n      }\n      \n      .table-of-contents a:hover {\n        text-decoration: underline;\n      }\n      \n      .note-page {\n        margin: 3rem 0;\n      }\n      \n      .page-separator {\n        margin: 4rem 0;\n        border: none;\n        border-top: 2px solid #e2e8f0;\n      }\n      \n      .metadata-section {\n        background-color: #f8fafc;\n        padding: 1rem;\n        border-radius: 0.375rem;\n        margin-bottom: 2rem;\n      }\n      \n      .metadata-item {\n        margin: 0.5rem 0;\n      }\n      \n      .tag {\n        display: inline-block;\n        padding: 0.25rem 0.5rem;\n        margin: 0.25rem;\n        background-color: #e0e7ff;\n        color: #4338ca;\n        border-radius: 0.25rem;\n        font-size: 0.875rem;\n      }\n    '
          )
        }
        escapeHtml(text) {
          cov_17wpwxap2d().f[10]++
          const div = (cov_17wpwxap2d().s[69]++, document.createElement('div'))
          return (
            cov_17wpwxap2d().s[70]++,
            (div.textContent = text),
            cov_17wpwxap2d().s[71]++,
            div.innerHTML
          )
        }
        constructor() {
          ;(cov_17wpwxap2d().f[11]++,
            cov_17wpwxap2d().s[72]++,
            super('html'),
            cov_17wpwxap2d().s[73]++,
            (this.converter = new SlateToHTMLConverter()))
        }
      }
      function cov_1iz79yavf8() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/pdf-exporter.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/pdf-exporter.ts',
            statementMap: {
              0: {
                start: { line: 5, column: 8 },
                end: { line: 24, column: 9 },
              },
              1: {
                start: { line: 6, column: 31 },
                end: { line: 6, column: 38 },
              },
              2: {
                start: { line: 8, column: 32 },
                end: { line: 8, column: 67 },
              },
              3: {
                start: { line: 10, column: 28 },
                end: { line: 10, column: 80 },
              },
              4: {
                start: { line: 13, column: 28 },
                end: { line: 13, column: 71 },
              },
              5: {
                start: { line: 15, column: 29 },
                end: { line: 15, column: 169 },
              },
              6: {
                start: { line: 16, column: 12 },
                end: { line: 21, column: 14 },
              },
              7: {
                start: { line: 23, column: 12 },
                end: { line: 23, column: 43 },
              },
              8: {
                start: { line: 27, column: 8 },
                end: { line: 63, column: 9 },
              },
              9: {
                start: { line: 28, column: 38 },
                end: { line: 28, column: 45 },
              },
              10: {
                start: { line: 29, column: 12 },
                end: { line: 31, column: 13 },
              },
              11: {
                start: { line: 30, column: 16 },
                end: { line: 30, column: 67 },
              },
              12: {
                start: { line: 33, column: 26 },
                end: { line: 33, column: 28 },
              },
              13: {
                start: { line: 34, column: 31 },
                end: { line: 34, column: 33 },
              },
              14: {
                start: { line: 35, column: 12 },
                end: { line: 49, column: 15 },
              },
              15: {
                start: { line: 37, column: 36 },
                end: { line: 37, column: 76 },
              },
              16: {
                start: { line: 38, column: 30 },
                end: { line: 38, column: 157 },
              },
              17: {
                start: { line: 39, column: 16 },
                end: { line: 42, column: 19 },
              },
              18: {
                start: { line: 43, column: 16 },
                end: { line: 48, column: 11 },
              },
              19: {
                start: { line: 50, column: 28 },
                end: { line: 50, column: 68 },
              },
              20: {
                start: { line: 51, column: 28 },
                end: { line: 53, column: 14 },
              },
              21: {
                start: { line: 54, column: 29 },
                end: { line: 54, column: 72 },
              },
              22: {
                start: { line: 55, column: 12 },
                end: { line: 60, column: 14 },
              },
              23: {
                start: { line: 62, column: 12 },
                end: { line: 62, column: 43 },
              },
              24: {
                start: { line: 66, column: 25 },
                end: { line: 66, column: 49 },
              },
              25: {
                start: { line: 67, column: 28 },
                end: { line: 67, column: 61 },
              },
              26: {
                start: { line: 68, column: 24 },
                end: { line: 73, column: 9 },
              },
              27: {
                start: { line: 75, column: 27 },
                end: { line: 75, column: 29 },
              },
              28: {
                start: { line: 76, column: 8 },
                end: { line: 78, column: 9 },
              },
              29: {
                start: { line: 77, column: 12 },
                end: { line: 77, column: 59 },
              },
              30: {
                start: { line: 80, column: 18 },
                end: { line: 80, column: 20 },
              },
              31: {
                start: { line: 81, column: 8 },
                end: { line: 83, column: 9 },
              },
              32: {
                start: { line: 82, column: 12 },
                end: { line: 82, column: 53 },
              },
              33: {
                start: { line: 85, column: 30 },
                end: { line: 85, column: 32 },
              },
              34: {
                start: { line: 86, column: 8 },
                end: { line: 88, column: 9 },
              },
              35: {
                start: { line: 87, column: 12 },
                end: { line: 87, column: 66 },
              },
              36: {
                start: { line: 89, column: 8 },
                end: { line: 105, column: 9 },
              },
              37: {
                start: { line: 108, column: 20 },
                end: { line: 108, column: 63 },
              },
              38: {
                start: { line: 109, column: 8 },
                end: { line: 127, column: 9 },
              },
              39: {
                start: { line: 130, column: 25 },
                end: { line: 130, column: 27 },
              },
              40: {
                start: { line: 131, column: 8 },
                end: { line: 137, column: 9 },
              },
              41: {
                start: { line: 132, column: 12 },
                end: { line: 136, column: 9 },
              },
              42: {
                start: { line: 138, column: 8 },
                end: { line: 145, column: 9 },
              },
              43: {
                start: { line: 139, column: 12 },
                end: { line: 144, column: 9 },
              },
              44: {
                start: { line: 146, column: 8 },
                end: { line: 146, column: 35 },
              },
              45: {
                start: { line: 150, column: 29 },
                end: { line: 150, column: 54 },
              },
              46: {
                start: { line: 151, column: 25 },
                end: { line: 151, column: 27 },
              },
              47: {
                start: { line: 153, column: 8 },
                end: { line: 160, column: 9 },
              },
              48: {
                start: { line: 154, column: 26 },
                end: { line: 154, column: 44 },
              },
              49: {
                start: { line: 155, column: 25 },
                end: { line: 155, column: 57 },
              },
              50: {
                start: { line: 156, column: 12 },
                end: { line: 159, column: 15 },
              },
              51: {
                start: { line: 161, column: 8 },
                end: { line: 161, column: 45 },
              },
              52: {
                start: { line: 161, column: 35 },
                end: { line: 161, column: 45 },
              },
              53: {
                start: { line: 162, column: 25 },
                end: { line: 165, column: 21 },
              },
              54: {
                start: { line: 163, column: 27 },
                end: { line: 163, column: 49 },
              },
              55: {
                start: { line: 164, column: 12 },
                end: { line: 164, column: 64 },
              },
              56: {
                start: { line: 166, column: 8 },
                end: { line: 174, column: 6 },
              },
              57: {
                start: { line: 177, column: 25 },
                end: { line: 177, column: 142 },
              },
              58: {
                start: { line: 177, column: 56 },
                end: { line: 177, column: 130 },
              },
              59: {
                start: { line: 178, column: 8 },
                end: { line: 186, column: 6 },
              },
              60: {
                start: { line: 189, column: 22 },
                end: { line: 189, column: 24 },
              },
              61: {
                start: { line: 190, column: 8 },
                end: { line: 192, column: 9 },
              },
              62: {
                start: { line: 191, column: 12 },
                end: { line: 191, column: 70 },
              },
              63: {
                start: { line: 193, column: 8 },
                end: { line: 195, column: 9 },
              },
              64: {
                start: { line: 194, column: 12 },
                end: { line: 194, column: 87 },
              },
              65: {
                start: { line: 196, column: 8 },
                end: { line: 198, column: 9 },
              },
              66: {
                start: { line: 197, column: 12 },
                end: { line: 197, column: 89 },
              },
              67: {
                start: { line: 199, column: 8 },
                end: { line: 201, column: 9 },
              },
              68: {
                start: { line: 200, column: 12 },
                end: { line: 200, column: 94 },
              },
              69: {
                start: { line: 202, column: 8 },
                end: { line: 207, column: 6 },
              },
              70: {
                start: { line: 216, column: 8 },
                end: { line: 220, column: 11 },
              },
              71: {
                start: { line: 223, column: 26 },
                end: { line: 236, column: 9 },
              },
              72: {
                start: { line: 237, column: 21 },
                end: { line: 237, column: 56 },
              },
              73: {
                start: { line: 238, column: 34 },
                end: { line: 241, column: 16 },
              },
              74: {
                start: { line: 242, column: 8 },
                end: { line: 382, column: 6 },
              },
              75: {
                start: { line: 385, column: 8 },
                end: { line: 399, column: 6 },
              },
              76: {
                start: { line: 402, column: 20 },
                end: { line: 402, column: 49 },
              },
              77: {
                start: { line: 403, column: 8 },
                end: { line: 403, column: 31 },
              },
              78: {
                start: { line: 404, column: 8 },
                end: { line: 404, column: 29 },
              },
              79: {
                start: { line: 407, column: 8 },
                end: { line: 407, column: 21 },
              },
              80: {
                start: { line: 408, column: 8 },
                end: { line: 408, column: 56 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 4, column: 4 },
                  end: { line: 4, column: 5 },
                },
                loc: {
                  start: { line: 4, column: 45 },
                  end: { line: 25, column: 5 },
                },
                line: 4,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 26, column: 4 },
                  end: { line: 26, column: 5 },
                },
                loc: {
                  start: { line: 26, column: 30 },
                  end: { line: 64, column: 5 },
                },
                line: 26,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 35, column: 26 },
                  end: { line: 35, column: 27 },
                },
                loc: {
                  start: { line: 35, column: 41 },
                  end: { line: 49, column: 13 },
                },
                line: 35,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 65, column: 4 },
                  end: { line: 65, column: 5 },
                },
                loc: {
                  start: { line: 65, column: 45 },
                  end: { line: 106, column: 5 },
                },
                line: 65,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 107, column: 4 },
                  end: { line: 107, column: 5 },
                },
                loc: {
                  start: { line: 107, column: 40 },
                  end: { line: 128, column: 5 },
                },
                line: 107,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 129, column: 4 },
                  end: { line: 129, column: 5 },
                },
                loc: {
                  start: { line: 129, column: 31 },
                  end: { line: 147, column: 5 },
                },
                line: 129,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 148, column: 4 },
                  end: { line: 148, column: 5 },
                },
                loc: {
                  start: { line: 148, column: 34 },
                  end: { line: 175, column: 5 },
                },
                line: 148,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 162, column: 38 },
                  end: { line: 162, column: 39 },
                },
                loc: {
                  start: { line: 162, column: 57 },
                  end: { line: 165, column: 9 },
                },
                line: 162,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 176, column: 4 },
                  end: { line: 176, column: 5 },
                },
                loc: {
                  start: { line: 176, column: 40 },
                  end: { line: 187, column: 5 },
                },
                line: 176,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 177, column: 37 },
                  end: { line: 177, column: 38 },
                },
                loc: {
                  start: { line: 177, column: 56 },
                  end: { line: 177, column: 130 },
                },
                line: 177,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 188, column: 4 },
                  end: { line: 188, column: 5 },
                },
                loc: {
                  start: { line: 188, column: 35 },
                  end: { line: 208, column: 5 },
                },
                line: 188,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 209, column: 4 },
                  end: { line: 209, column: 5 },
                },
                loc: {
                  start: { line: 209, column: 37 },
                  end: { line: 221, column: 5 },
                },
                line: 209,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 222, column: 4 },
                  end: { line: 222, column: 5 },
                },
                loc: {
                  start: { line: 222, column: 49 },
                  end: { line: 383, column: 5 },
                },
                line: 222,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 384, column: 4 },
                  end: { line: 384, column: 5 },
                },
                loc: {
                  start: { line: 384, column: 23 },
                  end: { line: 400, column: 5 },
                },
                line: 384,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 401, column: 4 },
                  end: { line: 401, column: 5 },
                },
                loc: {
                  start: { line: 401, column: 21 },
                  end: { line: 405, column: 5 },
                },
                line: 401,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 406, column: 4 },
                  end: { line: 406, column: 5 },
                },
                loc: {
                  start: { line: 406, column: 17 },
                  end: { line: 409, column: 5 },
                },
                line: 406,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 15, column: 29 },
                  end: { line: 15, column: 169 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 15, column: 29 },
                    end: { line: 15, column: 45 },
                  },
                  {
                    start: { line: 15, column: 49 },
                    end: { line: 15, column: 169 },
                  },
                ],
                line: 15,
              },
              1: {
                loc: {
                  start: { line: 15, column: 71 },
                  end: { line: 15, column: 151 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 15, column: 72 },
                    end: { line: 15, column: 138 },
                  },
                  {
                    start: { line: 15, column: 143 },
                    end: { line: 15, column: 151 },
                  },
                ],
                line: 15,
              },
              2: {
                loc: {
                  start: { line: 15, column: 72 },
                  end: { line: 15, column: 138 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 15, column: 115 },
                    end: { line: 15, column: 121 },
                  },
                  {
                    start: { line: 15, column: 124 },
                    end: { line: 15, column: 138 },
                  },
                ],
                line: 15,
              },
              3: {
                loc: {
                  start: { line: 15, column: 72 },
                  end: { line: 15, column: 112 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 15, column: 72 },
                    end: { line: 15, column: 89 },
                  },
                  {
                    start: { line: 15, column: 93 },
                    end: { line: 15, column: 112 },
                  },
                ],
                line: 15,
              },
              4: {
                loc: {
                  start: { line: 29, column: 12 },
                  end: { line: 31, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 29, column: 12 },
                    end: { line: 31, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 29,
              },
              5: {
                loc: {
                  start: { line: 38, column: 30 },
                  end: { line: 38, column: 157 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 38, column: 31 },
                    end: { line: 38, column: 133 },
                  },
                  {
                    start: { line: 38, column: 138 },
                    end: { line: 38, column: 157 },
                  },
                ],
                line: 38,
              },
              6: {
                loc: {
                  start: { line: 38, column: 31 },
                  end: { line: 38, column: 133 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 38, column: 104 },
                    end: { line: 38, column: 110 },
                  },
                  {
                    start: { line: 38, column: 113 },
                    end: { line: 38, column: 133 },
                  },
                ],
                line: 38,
              },
              7: {
                loc: {
                  start: { line: 38, column: 31 },
                  end: { line: 38, column: 101 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 38, column: 31 },
                    end: { line: 38, column: 72 },
                  },
                  {
                    start: { line: 38, column: 76 },
                    end: { line: 38, column: 101 },
                  },
                ],
                line: 38,
              },
              8: {
                loc: {
                  start: { line: 66, column: 25 },
                  end: { line: 66, column: 49 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 66, column: 25 },
                    end: { line: 66, column: 41 },
                  },
                  {
                    start: { line: 66, column: 45 },
                    end: { line: 66, column: 49 },
                  },
                ],
                line: 66,
              },
              9: {
                loc: {
                  start: { line: 67, column: 28 },
                  end: { line: 67, column: 61 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 67, column: 28 },
                    end: { line: 67, column: 47 },
                  },
                  {
                    start: { line: 67, column: 51 },
                    end: { line: 67, column: 61 },
                  },
                ],
                line: 67,
              },
              10: {
                loc: {
                  start: { line: 68, column: 24 },
                  end: { line: 73, column: 9 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 68, column: 24 },
                    end: { line: 68, column: 39 },
                  },
                  {
                    start: { line: 68, column: 43 },
                    end: { line: 73, column: 9 },
                  },
                ],
                line: 68,
              },
              11: {
                loc: {
                  start: { line: 76, column: 8 },
                  end: { line: 78, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 76, column: 8 },
                    end: { line: 78, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 76,
              },
              12: {
                loc: {
                  start: { line: 76, column: 12 },
                  end: { line: 76, column: 82 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 76, column: 12 },
                    end: { line: 76, column: 30 },
                  },
                  {
                    start: { line: 76, column: 34 },
                    end: { line: 76, column: 52 },
                  },
                  {
                    start: { line: 76, column: 56 },
                    end: { line: 76, column: 82 },
                  },
                ],
                line: 76,
              },
              13: {
                loc: {
                  start: { line: 81, column: 8 },
                  end: { line: 83, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 81, column: 8 },
                    end: { line: 83, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 81,
              },
              14: {
                loc: {
                  start: { line: 86, column: 8 },
                  end: { line: 88, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 86, column: 8 },
                    end: { line: 88, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 86,
              },
              15: {
                loc: {
                  start: { line: 86, column: 12 },
                  end: { line: 86, column: 47 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 86, column: 12 },
                    end: { line: 86, column: 20 },
                  },
                  {
                    start: { line: 86, column: 24 },
                    end: { line: 86, column: 47 },
                  },
                ],
                line: 86,
              },
              16: {
                loc: {
                  start: { line: 131, column: 8 },
                  end: { line: 137, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 131, column: 8 },
                    end: { line: 137, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 131,
              },
              17: {
                loc: {
                  start: { line: 138, column: 8 },
                  end: { line: 145, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 138, column: 8 },
                    end: { line: 145, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 138,
              },
              18: {
                loc: {
                  start: { line: 138, column: 12 },
                  end: { line: 138, column: 60 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 138, column: 12 },
                    end: { line: 138, column: 30 },
                  },
                  {
                    start: { line: 138, column: 34 },
                    end: { line: 138, column: 60 },
                  },
                ],
                line: 138,
              },
              19: {
                loc: {
                  start: { line: 141, column: 12 },
                  end: { line: 141, column: 91 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 141, column: 33 },
                    end: { line: 141, column: 86 },
                  },
                  {
                    start: { line: 141, column: 89 },
                    end: { line: 141, column: 91 },
                  },
                ],
                line: 141,
              },
              20: {
                loc: {
                  start: { line: 142, column: 12 },
                  end: { line: 142, column: 81 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 142, column: 41 },
                    end: { line: 142, column: 76 },
                  },
                  {
                    start: { line: 142, column: 79 },
                    end: { line: 142, column: 81 },
                  },
                ],
                line: 142,
              },
              21: {
                loc: {
                  start: { line: 161, column: 8 },
                  end: { line: 161, column: 45 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 161, column: 8 },
                    end: { line: 161, column: 45 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 161,
              },
              22: {
                loc: {
                  start: { line: 190, column: 8 },
                  end: { line: 192, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 190, column: 8 },
                    end: { line: 192, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 190,
              },
              23: {
                loc: {
                  start: { line: 193, column: 8 },
                  end: { line: 195, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 193, column: 8 },
                    end: { line: 195, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 193,
              },
              24: {
                loc: {
                  start: { line: 196, column: 8 },
                  end: { line: 198, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 196, column: 8 },
                    end: { line: 198, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 196,
              },
              25: {
                loc: {
                  start: { line: 199, column: 8 },
                  end: { line: 201, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 199, column: 8 },
                    end: { line: 201, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 199,
              },
              26: {
                loc: {
                  start: { line: 237, column: 21 },
                  end: { line: 237, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 237, column: 21 },
                    end: { line: 237, column: 40 },
                  },
                  {
                    start: { line: 237, column: 44 },
                    end: { line: 237, column: 56 },
                  },
                ],
                line: 237,
              },
              27: {
                loc: {
                  start: { line: 238, column: 34 },
                  end: { line: 241, column: 16 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 238, column: 64 },
                    end: { line: 241, column: 9 },
                  },
                  {
                    start: { line: 241, column: 12 },
                    end: { line: 241, column: 16 },
                  },
                ],
                line: 238,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/pdf-exporter.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\nimport { BaseExporter } from './base-exporter'\nimport {\n  type BulkExportOptions,\n  type ExportMetadata,\n  type ExportOptions,\n  type ExportResult,\n  type PDFExportOptions,\n} from './types'\nimport { SlateToHTMLConverter } from './converters/slate-to-html'\n\nexport class PDFExporter extends BaseExporter {\n  private htmlConverter: SlateToHTMLConverter\n\n  constructor() {\n    super('pdf')\n    this.htmlConverter = new SlateToHTMLConverter()\n  }\n\n  async export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult> {\n    try {\n      const pdfOptions = options as PDFExportOptions\n\n      // Convert content to HTML first\n      const htmlContent = this.htmlConverter.convert(content)\n\n      // Build PDF-optimized HTML\n      const pdfHtml = this.buildPDFHTML(htmlContent, pdfOptions, metadata)\n\n      // In a real implementation, we would use Puppeteer or similar here\n      // For now, we'll return the HTML that would be converted to PDF\n      const pdfData = await this.generatePDF(pdfHtml, pdfOptions)\n\n      // Generate filename\n      const fileName =\n        options.fileName ||\n        this.generateFileName(metadata?.title || 'export', 'pdf', metadata)\n\n      return {\n        success: true,\n        data: pdfData,\n        fileName,\n        mimeType: 'application/pdf',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  async bulkExport(options: BulkExportOptions): Promise<ExportResult> {\n    try {\n      const { notes, format } = options\n\n      if (format !== 'pdf') {\n        throw new Error('Invalid format for PDF exporter')\n      }\n\n      // Build multi-page PDF content\n      const pages: string[] = []\n      const tocEntries: Array<{ title: string; page: number }> = []\n\n      notes.forEach((note, index) => {\n        const htmlContent = this.htmlConverter.convert(note.content)\n        const title = note.metadata?.title || `Note ${index + 1}`\n\n        tocEntries.push({ title, page: index + 1 })\n\n        pages.push(`\n          <div class=\"pdf-page\">\n            <h1>${this.escapeHtml(title)}</h1>\n            ${htmlContent}\n          </div>\n        `)\n      })\n\n      const pdfHtml = this.buildBulkPDFHTML(pages, tocEntries)\n      const pdfData = await this.generatePDF(pdfHtml, {\n        format: 'pdf',\n      } as PDFExportOptions)\n\n      const fileName = this.generateFileName('bulk-export', 'pdf')\n\n      return {\n        success: true,\n        data: pdfData,\n        fileName,\n        mimeType: 'application/pdf',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  private buildPDFHTML(\n    content: string,\n    options: PDFExportOptions,\n    metadata?: ExportMetadata\n  ): string {\n    const pageSize = options.pageSize || 'A4'\n    const orientation = options.orientation || 'portrait'\n    const margins = options.margins || {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20,\n    }\n\n    // Add header/footer if specified\n    let headerFooter = ''\n    if (\n      options.headerText ||\n      options.footerText ||\n      options.includePageNumbers\n    ) {\n      headerFooter = this.buildHeaderFooter(options)\n    }\n\n    // Add table of contents if requested\n    let toc = ''\n    if (options.includeTableOfContents) {\n      toc = this.buildTableOfContents(content)\n    }\n\n    // Add metadata section\n    let metadataSection = ''\n    if (metadata && options.includeMetadata) {\n      metadataSection = this.buildMetadataSection(metadata)\n    }\n\n    return `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        ${this.getPDFStyles(pageSize, orientation, margins)}\n    </style>\n</head>\n<body>\n    ${headerFooter}\n    ${metadataSection}\n    ${toc}\n    <div class=\"content\">\n        ${content}\n    </div>\n</body>\n</html>`\n  }\n\n  private buildBulkPDFHTML(\n    pages: string[],\n    tocEntries: Array<{ title: string; page: number }>\n  ): string {\n    const toc = this.buildCustomTableOfContents(tocEntries)\n\n    return `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        ${this.getPDFStyles('A4', 'portrait', { top: 20, right: 20, bottom: 20, left: 20 })}\n        ${this.getBulkPDFStyles()}\n    </style>\n</head>\n<body>\n    ${toc}\n    ${pages.join('\\n')}\n</body>\n</html>`\n  }\n\n  private buildHeaderFooter(options: PDFExportOptions): string {\n    const elements: string[] = []\n\n    if (options.headerText) {\n      elements.push(`\n        <div class=\"pdf-header\">\n          ${this.escapeHtml(options.headerText)}\n        </div>\n      `)\n    }\n\n    if (options.footerText || options.includePageNumbers) {\n      elements.push(`\n        <div class=\"pdf-footer\">\n          ${options.footerText ? `<span>${this.escapeHtml(options.footerText)}</span>` : ''}\n          ${options.includePageNumbers ? '<span class=\"page-number\"></span>' : ''}\n        </div>\n      `)\n    }\n\n    return elements.join('\\n')\n  }\n\n  private buildTableOfContents(content: string): string {\n    // Extract headings\n    const headingRegex = /<h([1-3])>(.*?)<\\/h\\1>/g\n    const headings: Array<{ level: number; text: string }> = []\n    let match\n\n    while ((match = headingRegex.exec(content)) !== null) {\n      const level = parseInt(match[1])\n      const text = match[2].replace(/<[^>]*>/g, '')\n      headings.push({ level, text })\n    }\n\n    if (headings.length === 0) return ''\n\n    const tocItems = headings\n      .map(({ level, text }) => {\n        const indent = '  '.repeat(level - 1)\n        return `${indent}<li>${this.escapeHtml(text)}</li>`\n      })\n      .join('\\n')\n\n    return `\n      <div class=\"table-of-contents\">\n        <h2>Table of Contents</h2>\n        <ol>\n          ${tocItems}\n        </ol>\n      </div>\n      <div class=\"page-break\"></div>\n    `\n  }\n\n  private buildCustomTableOfContents(\n    entries: Array<{ title: string; page: number }>\n  ): string {\n    const tocItems = entries\n      .map(\n        ({ title, page }) =>\n          `<li>${this.escapeHtml(title)} <span class=\"toc-page\">${page}</span></li>`\n      )\n      .join('\\n')\n\n    return `\n      <div class=\"table-of-contents\">\n        <h1>Table of Contents</h1>\n        <ol>\n          ${tocItems}\n        </ol>\n      </div>\n      <div class=\"page-break\"></div>\n    `\n  }\n\n  private buildMetadataSection(metadata: ExportMetadata): string {\n    const items: string[] = []\n\n    if (metadata.title) {\n      items.push(`<h1>${this.escapeHtml(metadata.title)}</h1>`)\n    }\n    if (metadata.author) {\n      items.push(`<p class=\"author\">By ${this.escapeHtml(metadata.author)}</p>`)\n    }\n    if (metadata.createdAt) {\n      items.push(\n        `<p class=\"date\">${metadata.createdAt.toLocaleDateString()}</p>`\n      )\n    }\n    if (metadata.description) {\n      items.push(\n        `<p class=\"description\">${this.escapeHtml(metadata.description)}</p>`\n      )\n    }\n\n    return `\n      <div class=\"title-page\">\n        ${items.join('\\n')}\n      </div>\n      <div class=\"page-break\"></div>\n    `\n  }\n\n  private async generatePDF(\n    html: string,\n    options: PDFExportOptions\n  ): Promise<Blob> {\n    // In a real implementation, this would use Puppeteer or similar\n    // For now, we'll return a blob containing the HTML\n    // The actual PDF generation would happen on the server or using a client-side library\n\n    // TODO: Implement actual PDF generation using Puppeteer or similar\n\n    // Simulating PDF generation by returning HTML as a blob\n    // In production, this would be actual PDF binary data\n    return new Blob([html], { type: 'application/pdf' })\n  }\n\n  private getPDFStyles(\n    pageSize: string,\n    orientation: string,\n    margins: { top: number; right: number; bottom: number; left: number }\n  ): string {\n    const pageSizes = {\n      A4: { width: '210mm', height: '297mm' },\n      Letter: { width: '8.5in', height: '11in' },\n      Legal: { width: '8.5in', height: '14in' },\n    }\n\n    const size = pageSizes[pageSize as keyof typeof pageSizes] || pageSizes.A4\n    const { width, height } =\n      orientation === 'landscape'\n        ? { width: size.height, height: size.width }\n        : size\n\n    return `\n      @page {\n        size: ${width} ${height};\n        margin: ${margins.top}mm ${margins.right}mm ${margins.bottom}mm ${margins.left}mm;\n      }\n      \n      body {\n        font-family: Georgia, 'Times New Roman', serif;\n        font-size: 12pt;\n        line-height: 1.6;\n        color: #000;\n        margin: 0;\n        padding: 0;\n      }\n      \n      h1 { font-size: 24pt; margin: 20pt 0 10pt 0; }\n      h2 { font-size: 18pt; margin: 16pt 0 8pt 0; }\n      h3 { font-size: 14pt; margin: 12pt 0 6pt 0; }\n      \n      p {\n        margin: 0 0 10pt 0;\n        text-align: justify;\n      }\n      \n      .page-break {\n        page-break-after: always;\n      }\n      \n      .pdf-header {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 30pt;\n        text-align: center;\n        font-size: 10pt;\n        color: #666;\n        border-bottom: 1pt solid #ccc;\n      }\n      \n      .pdf-footer {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 30pt;\n        text-align: center;\n        font-size: 10pt;\n        color: #666;\n        border-top: 1pt solid #ccc;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0 20pt;\n      }\n      \n      .page-number:after {\n        content: counter(page);\n      }\n      \n      .table-of-contents {\n        page-break-after: always;\n      }\n      \n      .table-of-contents h2 {\n        text-align: center;\n        margin-bottom: 20pt;\n      }\n      \n      .table-of-contents ol {\n        list-style: none;\n        padding: 0;\n      }\n      \n      .table-of-contents li {\n        margin: 8pt 0;\n        padding-left: 20pt;\n      }\n      \n      .title-page {\n        text-align: center;\n        padding-top: 100pt;\n      }\n      \n      .title-page h1 {\n        font-size: 36pt;\n        margin-bottom: 20pt;\n      }\n      \n      .title-page .author {\n        font-size: 18pt;\n        margin: 10pt 0;\n      }\n      \n      .title-page .date {\n        font-size: 14pt;\n        color: #666;\n      }\n      \n      .title-page .description {\n        font-style: italic;\n        margin-top: 40pt;\n        font-size: 14pt;\n      }\n      \n      blockquote {\n        margin: 10pt 0;\n        padding-left: 20pt;\n        border-left: 3pt solid #ccc;\n        font-style: italic;\n      }\n      \n      code {\n        font-family: 'Courier New', Courier, monospace;\n        font-size: 10pt;\n        background-color: #f0f0f0;\n        padding: 1pt 3pt;\n      }\n      \n      ul, ol {\n        margin: 10pt 0;\n        padding-left: 30pt;\n      }\n      \n      table {\n        width: 100%;\n        border-collapse: collapse;\n        margin: 10pt 0;\n      }\n      \n      th, td {\n        border: 1pt solid #ccc;\n        padding: 5pt;\n        text-align: left;\n      }\n      \n      th {\n        background-color: #f0f0f0;\n        font-weight: bold;\n      }\n    `\n  }\n\n  private getBulkPDFStyles(): string {\n    return `\n      .pdf-page {\n        page-break-after: always;\n        min-height: 100vh;\n      }\n      \n      .pdf-page:last-child {\n        page-break-after: auto;\n      }\n      \n      .toc-page {\n        float: right;\n        color: #666;\n      }\n    `\n  }\n\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div')\n    div.textContent = text\n    return div.innerHTML\n  }\n}\n",
              ],
              names: [
                'BaseExporter',
                'SlateToHTMLConverter',
                'PDFExporter',
                'export',
                'content',
                'options',
                'metadata',
                'pdfOptions',
                'htmlContent',
                'htmlConverter',
                'convert',
                'pdfHtml',
                'buildPDFHTML',
                'pdfData',
                'generatePDF',
                'fileName',
                'generateFileName',
                'title',
                'success',
                'data',
                'mimeType',
                'error',
                'handleError',
                'bulkExport',
                'notes',
                'format',
                'Error',
                'pages',
                'tocEntries',
                'forEach',
                'note',
                'index',
                'push',
                'page',
                'escapeHtml',
                'buildBulkPDFHTML',
                'pageSize',
                'orientation',
                'margins',
                'top',
                'right',
                'bottom',
                'left',
                'headerFooter',
                'headerText',
                'footerText',
                'includePageNumbers',
                'buildHeaderFooter',
                'toc',
                'includeTableOfContents',
                'buildTableOfContents',
                'metadataSection',
                'includeMetadata',
                'buildMetadataSection',
                'getPDFStyles',
                'buildCustomTableOfContents',
                'getBulkPDFStyles',
                'join',
                'elements',
                'headingRegex',
                'headings',
                'match',
                'exec',
                'level',
                'parseInt',
                'text',
                'replace',
                'length',
                'tocItems',
                'map',
                'indent',
                'repeat',
                'entries',
                'items',
                'author',
                'createdAt',
                'toLocaleDateString',
                'description',
                'html',
                'Blob',
                'type',
                'pageSizes',
                'A4',
                'width',
                'height',
                'Letter',
                'Legal',
                'size',
                'div',
                'document',
                'createElement',
                'textContent',
                'innerHTML',
                'constructor',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '14057bf13b68163887889346573f161c76a85eae',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '14057bf13b68163887889346573f161c76a85eae' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_1iz79yavf8 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_1iz79yavf8()
      class PDFExporter extends BaseExporter {
        async export(content, options, metadata) {
          ;(cov_1iz79yavf8().f[0]++, cov_1iz79yavf8().s[0]++)
          try {
            const pdfOptions = (cov_1iz79yavf8().s[1]++, options),
              htmlContent =
                (cov_1iz79yavf8().s[2]++, this.htmlConverter.convert(content)),
              pdfHtml =
                (cov_1iz79yavf8().s[3]++,
                this.buildPDFHTML(htmlContent, pdfOptions, metadata)),
              pdfData =
                (cov_1iz79yavf8().s[4]++,
                await this.generatePDF(pdfHtml, pdfOptions)),
              fileName =
                (cov_1iz79yavf8().s[5]++,
                cov_1iz79yavf8().b[0][0]++,
                options.fileName ||
                  (cov_1iz79yavf8().b[0][1]++,
                  this.generateFileName(
                    (cov_1iz79yavf8().b[1][0]++,
                    cov_1iz79yavf8().b[3][0]++,
                    (null === metadata ||
                    (cov_1iz79yavf8().b[3][1]++, void 0 === metadata)
                      ? void cov_1iz79yavf8().b[2][0]++
                      : (cov_1iz79yavf8().b[2][1]++, metadata.title)) ||
                      (cov_1iz79yavf8().b[1][1]++, 'export')),
                    'pdf',
                    metadata
                  )))
            return (
              cov_1iz79yavf8().s[6]++,
              {
                success: !0,
                data: pdfData,
                fileName,
                mimeType: 'application/pdf',
              }
            )
          } catch (error) {
            return (cov_1iz79yavf8().s[7]++, this.handleError(error))
          }
        }
        async bulkExport(options) {
          ;(cov_1iz79yavf8().f[1]++, cov_1iz79yavf8().s[8]++)
          try {
            const { notes, format } = (cov_1iz79yavf8().s[9]++, options)
            if ((cov_1iz79yavf8().s[10]++, 'pdf' !== format))
              throw (
                cov_1iz79yavf8().b[4][0]++,
                cov_1iz79yavf8().s[11]++,
                new Error('Invalid format for PDF exporter')
              )
            cov_1iz79yavf8().b[4][1]++
            const pages = (cov_1iz79yavf8().s[12]++, []),
              tocEntries = (cov_1iz79yavf8().s[13]++, [])
            ;(cov_1iz79yavf8().s[14]++,
              notes.forEach((note, index) => {
                var _note_metadata
                cov_1iz79yavf8().f[2]++
                const htmlContent =
                    (cov_1iz79yavf8().s[15]++,
                    this.htmlConverter.convert(note.content)),
                  title =
                    (cov_1iz79yavf8().s[16]++,
                    cov_1iz79yavf8().b[5][0]++,
                    cov_1iz79yavf8().b[7][0]++,
                    (null === (_note_metadata = note.metadata) ||
                    (cov_1iz79yavf8().b[7][1]++, void 0 === _note_metadata)
                      ? void cov_1iz79yavf8().b[6][0]++
                      : (cov_1iz79yavf8().b[6][1]++, _note_metadata.title)) ||
                      (cov_1iz79yavf8().b[5][1]++, `Note ${index + 1}`))
                ;(cov_1iz79yavf8().s[17]++,
                  tocEntries.push({ title, page: index + 1 }),
                  cov_1iz79yavf8().s[18]++,
                  pages.push(
                    `\n          <div class="pdf-page">\n            <h1>${this.escapeHtml(title)}</h1>\n            ${htmlContent}\n          </div>\n        `
                  ))
              }))
            const pdfHtml =
                (cov_1iz79yavf8().s[19]++,
                this.buildBulkPDFHTML(pages, tocEntries)),
              pdfData =
                (cov_1iz79yavf8().s[20]++,
                await this.generatePDF(pdfHtml, { format: 'pdf' })),
              fileName =
                (cov_1iz79yavf8().s[21]++,
                this.generateFileName('bulk-export', 'pdf'))
            return (
              cov_1iz79yavf8().s[22]++,
              {
                success: !0,
                data: pdfData,
                fileName,
                mimeType: 'application/pdf',
              }
            )
          } catch (error) {
            return (cov_1iz79yavf8().s[23]++, this.handleError(error))
          }
        }
        buildPDFHTML(content, options, metadata) {
          cov_1iz79yavf8().f[3]++
          const pageSize =
              (cov_1iz79yavf8().s[24]++,
              cov_1iz79yavf8().b[8][0]++,
              options.pageSize || (cov_1iz79yavf8().b[8][1]++, 'A4')),
            orientation =
              (cov_1iz79yavf8().s[25]++,
              cov_1iz79yavf8().b[9][0]++,
              options.orientation || (cov_1iz79yavf8().b[9][1]++, 'portrait')),
            margins =
              (cov_1iz79yavf8().s[26]++,
              cov_1iz79yavf8().b[10][0]++,
              options.margins ||
                (cov_1iz79yavf8().b[10][1]++,
                { top: 20, right: 20, bottom: 20, left: 20 }))
          let headerFooter = (cov_1iz79yavf8().s[27]++, '')
          ;(cov_1iz79yavf8().s[28]++,
            cov_1iz79yavf8().b[12][0]++,
            options.headerText ||
            (cov_1iz79yavf8().b[12][1]++, options.footerText) ||
            (cov_1iz79yavf8().b[12][2]++, options.includePageNumbers)
              ? (cov_1iz79yavf8().b[11][0]++,
                cov_1iz79yavf8().s[29]++,
                (headerFooter = this.buildHeaderFooter(options)))
              : cov_1iz79yavf8().b[11][1]++)
          let toc = (cov_1iz79yavf8().s[30]++, '')
          ;(cov_1iz79yavf8().s[31]++,
            options.includeTableOfContents
              ? (cov_1iz79yavf8().b[13][0]++,
                cov_1iz79yavf8().s[32]++,
                (toc = this.buildTableOfContents(content)))
              : cov_1iz79yavf8().b[13][1]++)
          let metadataSection = (cov_1iz79yavf8().s[33]++, '')
          return (
            cov_1iz79yavf8().s[34]++,
            cov_1iz79yavf8().b[15][0]++,
            metadata && (cov_1iz79yavf8().b[15][1]++, options.includeMetadata)
              ? (cov_1iz79yavf8().b[14][0]++,
                cov_1iz79yavf8().s[35]++,
                (metadataSection = this.buildMetadataSection(metadata)))
              : cov_1iz79yavf8().b[14][1]++,
            cov_1iz79yavf8().s[36]++,
            `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <style>\n        ${this.getPDFStyles(pageSize, orientation, margins)}\n    </style>\n</head>\n<body>\n    ${headerFooter}\n    ${metadataSection}\n    ${toc}\n    <div class="content">\n        ${content}\n    </div>\n</body>\n</html>`
          )
        }
        buildBulkPDFHTML(pages, tocEntries) {
          cov_1iz79yavf8().f[4]++
          const toc =
            (cov_1iz79yavf8().s[37]++,
            this.buildCustomTableOfContents(tocEntries))
          return (
            cov_1iz79yavf8().s[38]++,
            `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="UTF-8">\n    <style>\n        ${this.getPDFStyles('A4', 'portrait', { top: 20, right: 20, bottom: 20, left: 20 })}\n        ${this.getBulkPDFStyles()}\n    </style>\n</head>\n<body>\n    ${toc}\n    ${pages.join('\n')}\n</body>\n</html>`
          )
        }
        buildHeaderFooter(options) {
          cov_1iz79yavf8().f[5]++
          const elements = (cov_1iz79yavf8().s[39]++, [])
          return (
            cov_1iz79yavf8().s[40]++,
            options.headerText
              ? (cov_1iz79yavf8().b[16][0]++,
                cov_1iz79yavf8().s[41]++,
                elements.push(
                  `\n        <div class="pdf-header">\n          ${this.escapeHtml(options.headerText)}\n        </div>\n      `
                ))
              : cov_1iz79yavf8().b[16][1]++,
            cov_1iz79yavf8().s[42]++,
            cov_1iz79yavf8().b[18][0]++,
            options.footerText ||
            (cov_1iz79yavf8().b[18][1]++, options.includePageNumbers)
              ? (cov_1iz79yavf8().b[17][0]++,
                cov_1iz79yavf8().s[43]++,
                elements.push(
                  `\n        <div class="pdf-footer">\n          ${options.footerText ? (cov_1iz79yavf8().b[19][0]++, `<span>${this.escapeHtml(options.footerText)}</span>`) : (cov_1iz79yavf8().b[19][1]++, '')}\n          ${options.includePageNumbers ? (cov_1iz79yavf8().b[20][0]++, '<span class="page-number"></span>') : (cov_1iz79yavf8().b[20][1]++, '')}\n        </div>\n      `
                ))
              : cov_1iz79yavf8().b[17][1]++,
            cov_1iz79yavf8().s[44]++,
            elements.join('\n')
          )
        }
        buildTableOfContents(content) {
          cov_1iz79yavf8().f[6]++
          const headingRegex =
              (cov_1iz79yavf8().s[45]++, /<h([1-3])>(.*?)<\/h\1>/g),
            headings = (cov_1iz79yavf8().s[46]++, [])
          let match
          for (
            cov_1iz79yavf8().s[47]++;
            null !== (match = headingRegex.exec(content));

          ) {
            const level = (cov_1iz79yavf8().s[48]++, parseInt(match[1])),
              text =
                (cov_1iz79yavf8().s[49]++, match[2].replace(/<[^>]*>/g, ''))
            ;(cov_1iz79yavf8().s[50]++, headings.push({ level, text }))
          }
          if ((cov_1iz79yavf8().s[51]++, 0 === headings.length))
            return (cov_1iz79yavf8().b[21][0]++, cov_1iz79yavf8().s[52]++, '')
          cov_1iz79yavf8().b[21][1]++
          const tocItems =
            (cov_1iz79yavf8().s[53]++,
            headings
              .map(({ level, text }) => {
                cov_1iz79yavf8().f[7]++
                const indent =
                  (cov_1iz79yavf8().s[54]++, '  '.repeat(level - 1))
                return (
                  cov_1iz79yavf8().s[55]++,
                  `${indent}<li>${this.escapeHtml(text)}</li>`
                )
              })
              .join('\n'))
          return (
            cov_1iz79yavf8().s[56]++,
            `\n      <div class="table-of-contents">\n        <h2>Table of Contents</h2>\n        <ol>\n          ${tocItems}\n        </ol>\n      </div>\n      <div class="page-break"></div>\n    `
          )
        }
        buildCustomTableOfContents(entries) {
          cov_1iz79yavf8().f[8]++
          const tocItems =
            (cov_1iz79yavf8().s[57]++,
            entries
              .map(
                ({ title, page }) => (
                  cov_1iz79yavf8().f[9]++,
                  cov_1iz79yavf8().s[58]++,
                  `<li>${this.escapeHtml(title)} <span class="toc-page">${page}</span></li>`
                )
              )
              .join('\n'))
          return (
            cov_1iz79yavf8().s[59]++,
            `\n      <div class="table-of-contents">\n        <h1>Table of Contents</h1>\n        <ol>\n          ${tocItems}\n        </ol>\n      </div>\n      <div class="page-break"></div>\n    `
          )
        }
        buildMetadataSection(metadata) {
          cov_1iz79yavf8().f[10]++
          const items = (cov_1iz79yavf8().s[60]++, [])
          return (
            cov_1iz79yavf8().s[61]++,
            metadata.title
              ? (cov_1iz79yavf8().b[22][0]++,
                cov_1iz79yavf8().s[62]++,
                items.push(`<h1>${this.escapeHtml(metadata.title)}</h1>`))
              : cov_1iz79yavf8().b[22][1]++,
            cov_1iz79yavf8().s[63]++,
            metadata.author
              ? (cov_1iz79yavf8().b[23][0]++,
                cov_1iz79yavf8().s[64]++,
                items.push(
                  `<p class="author">By ${this.escapeHtml(metadata.author)}</p>`
                ))
              : cov_1iz79yavf8().b[23][1]++,
            cov_1iz79yavf8().s[65]++,
            metadata.createdAt
              ? (cov_1iz79yavf8().b[24][0]++,
                cov_1iz79yavf8().s[66]++,
                items.push(
                  `<p class="date">${metadata.createdAt.toLocaleDateString()}</p>`
                ))
              : cov_1iz79yavf8().b[24][1]++,
            cov_1iz79yavf8().s[67]++,
            metadata.description
              ? (cov_1iz79yavf8().b[25][0]++,
                cov_1iz79yavf8().s[68]++,
                items.push(
                  `<p class="description">${this.escapeHtml(metadata.description)}</p>`
                ))
              : cov_1iz79yavf8().b[25][1]++,
            cov_1iz79yavf8().s[69]++,
            `\n      <div class="title-page">\n        ${items.join('\n')}\n      </div>\n      <div class="page-break"></div>\n    `
          )
        }
        async generatePDF(html, options) {
          return (
            cov_1iz79yavf8().f[11]++,
            cov_1iz79yavf8().s[70]++,
            new Blob([html], { type: 'application/pdf' })
          )
        }
        getPDFStyles(pageSize, orientation, margins) {
          cov_1iz79yavf8().f[12]++
          const pageSizes =
              (cov_1iz79yavf8().s[71]++,
              {
                A4: { width: '210mm', height: '297mm' },
                Letter: { width: '8.5in', height: '11in' },
                Legal: { width: '8.5in', height: '14in' },
              }),
            size =
              (cov_1iz79yavf8().s[72]++,
              cov_1iz79yavf8().b[26][0]++,
              pageSizes[pageSize] ||
                (cov_1iz79yavf8().b[26][1]++, pageSizes.A4)),
            { width, height } =
              (cov_1iz79yavf8().s[73]++,
              'landscape' === orientation
                ? (cov_1iz79yavf8().b[27][0]++,
                  { width: size.height, height: size.width })
                : (cov_1iz79yavf8().b[27][1]++, size))
          return (
            cov_1iz79yavf8().s[74]++,
            `\n      @page {\n        size: ${width} ${height};\n        margin: ${margins.top}mm ${margins.right}mm ${margins.bottom}mm ${margins.left}mm;\n      }\n      \n      body {\n        font-family: Georgia, 'Times New Roman', serif;\n        font-size: 12pt;\n        line-height: 1.6;\n        color: #000;\n        margin: 0;\n        padding: 0;\n      }\n      \n      h1 { font-size: 24pt; margin: 20pt 0 10pt 0; }\n      h2 { font-size: 18pt; margin: 16pt 0 8pt 0; }\n      h3 { font-size: 14pt; margin: 12pt 0 6pt 0; }\n      \n      p {\n        margin: 0 0 10pt 0;\n        text-align: justify;\n      }\n      \n      .page-break {\n        page-break-after: always;\n      }\n      \n      .pdf-header {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 30pt;\n        text-align: center;\n        font-size: 10pt;\n        color: #666;\n        border-bottom: 1pt solid #ccc;\n      }\n      \n      .pdf-footer {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 30pt;\n        text-align: center;\n        font-size: 10pt;\n        color: #666;\n        border-top: 1pt solid #ccc;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0 20pt;\n      }\n      \n      .page-number:after {\n        content: counter(page);\n      }\n      \n      .table-of-contents {\n        page-break-after: always;\n      }\n      \n      .table-of-contents h2 {\n        text-align: center;\n        margin-bottom: 20pt;\n      }\n      \n      .table-of-contents ol {\n        list-style: none;\n        padding: 0;\n      }\n      \n      .table-of-contents li {\n        margin: 8pt 0;\n        padding-left: 20pt;\n      }\n      \n      .title-page {\n        text-align: center;\n        padding-top: 100pt;\n      }\n      \n      .title-page h1 {\n        font-size: 36pt;\n        margin-bottom: 20pt;\n      }\n      \n      .title-page .author {\n        font-size: 18pt;\n        margin: 10pt 0;\n      }\n      \n      .title-page .date {\n        font-size: 14pt;\n        color: #666;\n      }\n      \n      .title-page .description {\n        font-style: italic;\n        margin-top: 40pt;\n        font-size: 14pt;\n      }\n      \n      blockquote {\n        margin: 10pt 0;\n        padding-left: 20pt;\n        border-left: 3pt solid #ccc;\n        font-style: italic;\n      }\n      \n      code {\n        font-family: 'Courier New', Courier, monospace;\n        font-size: 10pt;\n        background-color: #f0f0f0;\n        padding: 1pt 3pt;\n      }\n      \n      ul, ol {\n        margin: 10pt 0;\n        padding-left: 30pt;\n      }\n      \n      table {\n        width: 100%;\n        border-collapse: collapse;\n        margin: 10pt 0;\n      }\n      \n      th, td {\n        border: 1pt solid #ccc;\n        padding: 5pt;\n        text-align: left;\n      }\n      \n      th {\n        background-color: #f0f0f0;\n        font-weight: bold;\n      }\n    `
          )
        }
        getBulkPDFStyles() {
          return (
            cov_1iz79yavf8().f[13]++,
            cov_1iz79yavf8().s[75]++,
            '\n      .pdf-page {\n        page-break-after: always;\n        min-height: 100vh;\n      }\n      \n      .pdf-page:last-child {\n        page-break-after: auto;\n      }\n      \n      .toc-page {\n        float: right;\n        color: #666;\n      }\n    '
          )
        }
        escapeHtml(text) {
          cov_1iz79yavf8().f[14]++
          const div = (cov_1iz79yavf8().s[76]++, document.createElement('div'))
          return (
            cov_1iz79yavf8().s[77]++,
            (div.textContent = text),
            cov_1iz79yavf8().s[78]++,
            div.innerHTML
          )
        }
        constructor() {
          ;(cov_1iz79yavf8().f[15]++,
            cov_1iz79yavf8().s[79]++,
            super('pdf'),
            cov_1iz79yavf8().s[80]++,
            (this.htmlConverter = new SlateToHTMLConverter()))
        }
      }
      function cov_10tcsoylsl() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-react.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-react.ts',
            statementMap: {
              0: {
                start: { line: 4, column: 27 },
                end: { line: 4, column: 49 },
              },
              1: {
                start: { line: 5, column: 8 },
                end: { line: 5, column: 63 },
              },
              2: {
                start: { line: 8, column: 27 },
                end: { line: 8, column: 49 },
              },
              3: {
                start: { line: 9, column: 26 },
                end: { line: 9, column: 83 },
              },
              4: {
                start: { line: 10, column: 22 },
                end: { line: 10, column: 65 },
              },
              5: {
                start: { line: 11, column: 8 },
                end: { line: 14, column: 10 },
              },
              6: {
                start: { line: 17, column: 8 },
                end: { line: 17, column: 66 },
              },
              7: {
                start: { line: 17, column: 33 },
                end: { line: 17, column: 53 },
              },
              8: {
                start: { line: 20, column: 26 },
                end: { line: 20, column: 44 },
              },
              9: {
                start: { line: 21, column: 8 },
                end: { line: 23, column: 9 },
              },
              10: {
                start: { line: 22, column: 12 },
                end: { line: 22, column: 40 },
              },
              11: {
                start: { line: 24, column: 8 },
                end: { line: 26, column: 9 },
              },
              12: {
                start: { line: 25, column: 12 },
                end: { line: 25, column: 51 },
              },
              13: {
                start: { line: 27, column: 8 },
                end: { line: 27, column: 18 },
              },
              14: {
                start: { line: 30, column: 19 },
                end: { line: 30, column: 44 },
              },
              15: {
                start: { line: 32, column: 8 },
                end: { line: 32, column: 57 },
              },
              16: {
                start: { line: 32, column: 23 },
                end: { line: 32, column: 57 },
              },
              17: {
                start: { line: 33, column: 8 },
                end: { line: 33, column: 51 },
              },
              18: {
                start: { line: 33, column: 25 },
                end: { line: 33, column: 51 },
              },
              19: {
                start: { line: 34, column: 8 },
                end: { line: 34, column: 52 },
              },
              20: {
                start: { line: 34, column: 28 },
                end: { line: 34, column: 52 },
              },
              21: {
                start: { line: 35, column: 8 },
                end: { line: 35, column: 56 },
              },
              22: {
                start: { line: 35, column: 32 },
                end: { line: 35, column: 56 },
              },
              23: {
                start: { line: 36, column: 8 },
                end: { line: 36, column: 53 },
              },
              24: {
                start: { line: 36, column: 23 },
                end: { line: 36, column: 53 },
              },
              25: {
                start: { line: 37, column: 8 },
                end: { line: 37, column: 20 },
              },
              26: {
                start: { line: 40, column: 26 },
                end: { line: 40, column: 44 },
              },
              27: {
                start: { line: 41, column: 28 },
                end: { line: 41, column: 38 },
              },
              28: {
                start: { line: 42, column: 25 },
                end: { line: 42, column: 99 },
              },
              29: {
                start: { line: 42, column: 55 },
                end: { line: 42, column: 89 },
              },
              30: {
                start: { line: 43, column: 8 },
                end: { line: 62, column: 9 },
              },
              31: {
                start: { line: 45, column: 16 },
                end: { line: 45, column: 68 },
              },
              32: {
                start: { line: 47, column: 16 },
                end: { line: 47, column: 58 },
              },
              33: {
                start: { line: 49, column: 16 },
                end: { line: 49, column: 58 },
              },
              34: {
                start: { line: 51, column: 16 },
                end: { line: 51, column: 58 },
              },
              35: {
                start: { line: 53, column: 16 },
                end: { line: 53, column: 116 },
              },
              36: {
                start: { line: 55, column: 16 },
                end: { line: 55, column: 107 },
              },
              37: {
                start: { line: 57, column: 16 },
                end: { line: 57, column: 107 },
              },
              38: {
                start: { line: 59, column: 16 },
                end: { line: 59, column: 58 },
              },
              39: {
                start: { line: 61, column: 16 },
                end: { line: 61, column: 60 },
              },
              40: {
                start: { line: 65, column: 8 },
                end: { line: 70, column: 38 },
              },
              41: {
                start: { line: 66, column: 12 },
                end: { line: 68, column: 13 },
              },
              42: {
                start: { line: 67, column: 16 },
                end: { line: 67, column: 53 },
              },
              43: {
                start: { line: 69, column: 12 },
                end: { line: 69, column: 22 },
              },
              44: {
                start: { line: 73, column: 8 },
                end: { line: 73, column: 114 },
              },
              45: {
                start: { line: 76, column: 8 },
                end: { line: 86, column: 34 },
              },
              46: {
                start: { line: 89, column: 8 },
                end: { line: 108, column: 34 },
              },
              47: {
                start: { line: 111, column: 8 },
                end: { line: 117, column: 3 },
              },
              48: {
                start: { line: 120, column: 27 },
                end: { line: 120, column: 49 },
              },
              49: {
                start: { line: 121, column: 8 },
                end: { line: 129, column: 9 },
              },
              50: {
                start: { line: 123, column: 16 },
                end: { line: 123, column: 87 },
              },
              51: {
                start: { line: 125, column: 16 },
                end: { line: 125, column: 81 },
              },
              52: {
                start: { line: 128, column: 16 },
                end: { line: 128, column: 83 },
              },
              53: {
                start: { line: 132, column: 8 },
                end: { line: 179, column: 10 },
              },
              54: {
                start: { line: 182, column: 26 },
                end: { line: 193, column: 33 },
              },
              55: {
                start: { line: 194, column: 23 },
                end: { line: 242, column: 2 },
              },
              56: {
                start: { line: 243, column: 8 },
                end: { line: 246, column: 10 },
              },
              57: {
                start: { line: 249, column: 23 },
                end: { line: 255, column: 9 },
              },
              58: {
                start: { line: 256, column: 8 },
                end: { line: 270, column: 10 },
              },
              59: {
                start: { line: 273, column: 8 },
                end: { line: 273, column: 34 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 3, column: 4 },
                  end: { line: 3, column: 5 },
                },
                loc: {
                  start: { line: 3, column: 51 },
                  end: { line: 6, column: 5 },
                },
                line: 3,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 7, column: 4 },
                  end: { line: 7, column: 5 },
                },
                loc: {
                  start: { line: 7, column: 65 },
                  end: { line: 15, column: 5 },
                },
                line: 7,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 16, column: 4 },
                  end: { line: 16, column: 5 },
                },
                loc: {
                  start: { line: 16, column: 22 },
                  end: { line: 18, column: 5 },
                },
                line: 16,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 17, column: 25 },
                  end: { line: 17, column: 26 },
                },
                loc: {
                  start: { line: 17, column: 33 },
                  end: { line: 17, column: 53 },
                },
                line: 17,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 19, column: 4 },
                  end: { line: 19, column: 5 },
                },
                loc: {
                  start: { line: 19, column: 32 },
                  end: { line: 28, column: 5 },
                },
                line: 19,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 29, column: 4 },
                  end: { line: 29, column: 5 },
                },
                loc: {
                  start: { line: 29, column: 20 },
                  end: { line: 38, column: 5 },
                },
                line: 29,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 39, column: 4 },
                  end: { line: 39, column: 5 },
                },
                loc: {
                  start: { line: 39, column: 34 },
                  end: { line: 63, column: 5 },
                },
                line: 39,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 42, column: 46 },
                  end: { line: 42, column: 47 },
                },
                loc: {
                  start: { line: 42, column: 55 },
                  end: { line: 42, column: 89 },
                },
                line: 42,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 64, column: 4 },
                  end: { line: 64, column: 5 },
                },
                loc: {
                  start: { line: 64, column: 36 },
                  end: { line: 71, column: 5 },
                },
                line: 64,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 65, column: 36 },
                  end: { line: 65, column: 37 },
                },
                loc: {
                  start: { line: 65, column: 45 },
                  end: { line: 70, column: 9 },
                },
                line: 65,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 72, column: 4 },
                  end: { line: 72, column: 5 },
                },
                loc: {
                  start: { line: 72, column: 20 },
                  end: { line: 74, column: 5 },
                },
                line: 72,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 75, column: 4 },
                  end: { line: 75, column: 5 },
                },
                loc: {
                  start: { line: 75, column: 44 },
                  end: { line: 87, column: 5 },
                },
                line: 75,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 88, column: 4 },
                  end: { line: 88, column: 5 },
                },
                loc: {
                  start: { line: 88, column: 54 },
                  end: { line: 109, column: 5 },
                },
                line: 88,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 110, column: 4 },
                  end: { line: 110, column: 5 },
                },
                loc: {
                  start: { line: 110, column: 43 },
                  end: { line: 118, column: 5 },
                },
                line: 110,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 119, column: 4 },
                  end: { line: 119, column: 5 },
                },
                loc: {
                  start: { line: 119, column: 78 },
                  end: { line: 130, column: 5 },
                },
                line: 119,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 131, column: 4 },
                  end: { line: 131, column: 5 },
                },
                loc: {
                  start: { line: 131, column: 60 },
                  end: { line: 180, column: 5 },
                },
                line: 131,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 181, column: 4 },
                  end: { line: 181, column: 5 },
                },
                loc: {
                  start: { line: 181, column: 54 },
                  end: { line: 247, column: 5 },
                },
                line: 181,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 248, column: 4 },
                  end: { line: 248, column: 5 },
                },
                loc: {
                  start: { line: 248, column: 56 },
                  end: { line: 271, column: 5 },
                },
                line: 248,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 272, column: 4 },
                  end: { line: 272, column: 5 },
                },
                loc: {
                  start: { line: 272, column: 17 },
                  end: { line: 274, column: 5 },
                },
                line: 272,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 3, column: 19 },
                  end: { line: 3, column: 49 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 3, column: 35 },
                    end: { line: 3, column: 49 },
                  },
                ],
                line: 3,
              },
              1: {
                loc: {
                  start: { line: 7, column: 33 },
                  end: { line: 7, column: 63 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 7, column: 49 },
                    end: { line: 7, column: 63 },
                  },
                ],
                line: 7,
              },
              2: {
                loc: {
                  start: { line: 19, column: 20 },
                  end: { line: 19, column: 30 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 19, column: 29 },
                    end: { line: 19, column: 30 },
                  },
                ],
                line: 19,
              },
              3: {
                loc: {
                  start: { line: 21, column: 8 },
                  end: { line: 23, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 21, column: 8 },
                    end: { line: 23, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 21,
              },
              4: {
                loc: {
                  start: { line: 24, column: 8 },
                  end: { line: 26, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 24, column: 8 },
                    end: { line: 26, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 24,
              },
              5: {
                loc: {
                  start: { line: 32, column: 8 },
                  end: { line: 32, column: 57 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 32, column: 8 },
                    end: { line: 32, column: 57 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 32,
              },
              6: {
                loc: {
                  start: { line: 33, column: 8 },
                  end: { line: 33, column: 51 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 33, column: 8 },
                    end: { line: 33, column: 51 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 33,
              },
              7: {
                loc: {
                  start: { line: 34, column: 8 },
                  end: { line: 34, column: 52 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 34, column: 8 },
                    end: { line: 34, column: 52 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 34,
              },
              8: {
                loc: {
                  start: { line: 35, column: 8 },
                  end: { line: 35, column: 56 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 35, column: 8 },
                    end: { line: 35, column: 56 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 35,
              },
              9: {
                loc: {
                  start: { line: 36, column: 8 },
                  end: { line: 36, column: 53 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 36, column: 8 },
                    end: { line: 36, column: 53 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 36,
              },
              10: {
                loc: {
                  start: { line: 43, column: 8 },
                  end: { line: 62, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 44, column: 12 },
                    end: { line: 45, column: 68 },
                  },
                  {
                    start: { line: 46, column: 12 },
                    end: { line: 47, column: 58 },
                  },
                  {
                    start: { line: 48, column: 12 },
                    end: { line: 49, column: 58 },
                  },
                  {
                    start: { line: 50, column: 12 },
                    end: { line: 51, column: 58 },
                  },
                  {
                    start: { line: 52, column: 12 },
                    end: { line: 53, column: 116 },
                  },
                  {
                    start: { line: 54, column: 12 },
                    end: { line: 55, column: 107 },
                  },
                  {
                    start: { line: 56, column: 12 },
                    end: { line: 57, column: 107 },
                  },
                  {
                    start: { line: 58, column: 12 },
                    end: { line: 59, column: 58 },
                  },
                  {
                    start: { line: 60, column: 12 },
                    end: { line: 61, column: 60 },
                  },
                ],
                line: 43,
              },
              11: {
                loc: {
                  start: { line: 45, column: 41 },
                  end: { line: 45, column: 61 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 45, column: 41 },
                    end: { line: 45, column: 49 },
                  },
                  {
                    start: { line: 45, column: 53 },
                    end: { line: 45, column: 61 },
                  },
                ],
                line: 45,
              },
              12: {
                loc: {
                  start: { line: 66, column: 12 },
                  end: { line: 68, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 66, column: 12 },
                    end: { line: 68, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 66,
              },
              13: {
                loc: {
                  start: { line: 66, column: 16 },
                  end: { line: 66, column: 70 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 66, column: 16 },
                    end: { line: 66, column: 40 },
                  },
                  {
                    start: { line: 66, column: 44 },
                    end: { line: 66, column: 70 },
                  },
                ],
                line: 66,
              },
              14: {
                loc: {
                  start: { line: 119, column: 35 },
                  end: { line: 119, column: 65 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 119, column: 51 },
                    end: { line: 119, column: 65 },
                  },
                ],
                line: 119,
              },
              15: {
                loc: {
                  start: { line: 121, column: 8 },
                  end: { line: 129, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 122, column: 12 },
                    end: { line: 123, column: 87 },
                  },
                  {
                    start: { line: 124, column: 12 },
                    end: { line: 125, column: 81 },
                  },
                  {
                    start: { line: 126, column: 12 },
                    end: { line: 126, column: 26 },
                  },
                  {
                    start: { line: 127, column: 12 },
                    end: { line: 128, column: 83 },
                  },
                ],
                line: 121,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
            },
            b: {
              0: [0],
              1: [0],
              2: [0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0, 0, 0, 0, 0, 0, 0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0],
              15: [0, 0, 0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/converters/slate-to-react.ts',
              ],
              sourcesContent: [
                "import { type Descendant, Element, Text } from 'slate'\n\nexport class SlateToReactConverter {\n  private componentCounter = 0\n\n  convert(nodes: Descendant[], componentName: string = 'ExportedNote'): string {\n    const jsxContent = this.nodesToJSX(nodes)\n    return this.wrapInComponent(jsxContent, componentName)\n  }\n\n  convertWithTypeScript(\n    nodes: Descendant[],\n    componentName: string = 'ExportedNote'\n  ): { component: string; types: string } {\n    const jsxContent = this.nodesToJSX(nodes)\n    const component = this.wrapInTypescriptComponent(jsxContent, componentName)\n    const types = this.generateTypeDefinitions(componentName)\n\n    return { component, types }\n  }\n\n  private nodesToJSX(nodes: Descendant[]): string {\n    return nodes.map((node) => this.nodeToJSX(node)).join('\\n')\n  }\n\n  private nodeToJSX(node: Descendant, indent: number = 2): string {\n    const indentStr = ' '.repeat(indent)\n\n    if (Text.isText(node)) {\n      return this.textToJSX(node)\n    }\n\n    if (Element.isElement(node)) {\n      return this.elementToJSX(node, indent)\n    }\n\n    return ''\n  }\n\n  private textToJSX(node: Text): string {\n    let text = this.escapeJSX(node.text)\n\n    // Apply inline formatting\n    if (node.bold) text = `<strong>${text}</strong>`\n    if (node.italic) text = `<em>${text}</em>`\n    if (node.underline) text = `<u>${text}</u>`\n    if (node.strikethrough) text = `<s>${text}</s>`\n    if (node.code) text = `<code>${text}</code>`\n\n    return text\n  }\n\n  private elementToJSX(element: Element, indent: number): string {\n    const indentStr = ' '.repeat(indent)\n    const childIndent = indent + 2\n    const children = element.children\n      .map((child) => this.nodeToJSX(child, childIndent))\n      .join('')\n\n    switch (element.type) {\n      case 'paragraph':\n        return `${indentStr}<p>${children || '\\u00A0'}</p>`\n\n      case 'heading-one':\n        return `${indentStr}<h1>${children}</h1>`\n\n      case 'heading-two':\n        return `${indentStr}<h2>${children}</h2>`\n\n      case 'heading-three':\n        return `${indentStr}<h3>${children}</h3>`\n\n      case 'block-quote':\n        return `${indentStr}<blockquote>\\n${' '.repeat(childIndent)}${children}\\n${indentStr}</blockquote>`\n\n      case 'bulleted-list':\n        return `${indentStr}<ul>\\n${this.listItemsToJSX(element, childIndent)}\\n${indentStr}</ul>`\n\n      case 'numbered-list':\n        return `${indentStr}<ol>\\n${this.listItemsToJSX(element, childIndent)}\\n${indentStr}</ol>`\n\n      case 'list-item':\n        return `${indentStr}<li>${children}</li>`\n\n      default:\n        return `${indentStr}<div>${children}</div>`\n    }\n  }\n\n  private listItemsToJSX(element: Element, indent: number): string {\n    return element.children\n      .map((child) => {\n        if (Element.isElement(child) && child.type === 'list-item') {\n          return this.nodeToJSX(child, indent)\n        }\n        return ''\n      })\n      .filter(Boolean)\n      .join('\\n')\n  }\n\n  private escapeJSX(text: string): string {\n    return text\n      .replace(/\\{/g, '&#123;')\n      .replace(/\\}/g, '&#125;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n  }\n\n  private wrapInComponent(content: string, componentName: string): string {\n    return `import React from 'react';\n\nconst ${componentName} = () => {\n  return (\n    <div className=\"exported-note\">\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`\n  }\n\n  private wrapInTypescriptComponent(\n    content: string,\n    componentName: string\n  ): string {\n    return `import React from 'react';\nimport type { ${componentName}Props } from './${componentName}.types';\n\nconst ${componentName}: React.FC<${componentName}Props> = ({\n  className,\n  style,\n  onContentClick,\n}) => {\n  return (\n    <div \n      className={\\`exported-note \\${className || ''}\\`}\n      style={style}\n      onClick={onContentClick}\n    >\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`\n  }\n\n  private generateTypeDefinitions(componentName: string): string {\n    return `import { CSSProperties, MouseEventHandler } from 'react';\n\nexport interface ${componentName}Props {\n  className?: string;\n  style?: CSSProperties;\n  onContentClick?: MouseEventHandler<HTMLDivElement>;\n}`\n  }\n\n  generateStyledComponent(\n    nodes: Descendant[],\n    componentName: string = 'ExportedNote',\n    styleType: 'css-in-js' | 'css-modules' | 'inline'\n  ): { component: string; styles?: string } {\n    const jsxContent = this.nodesToJSX(nodes)\n\n    switch (styleType) {\n      case 'css-in-js':\n        return this.generateStyledComponentsVersion(jsxContent, componentName)\n\n      case 'css-modules':\n        return this.generateCSSModulesVersion(jsxContent, componentName)\n\n      case 'inline':\n      default:\n        return this.generateInlineStylesVersion(jsxContent, componentName)\n    }\n  }\n\n  private generateStyledComponentsVersion(\n    content: string,\n    componentName: string\n  ): { component: string } {\n    return {\n      component: `import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledNote = styled.div\\`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  line-height: 1.6;\n  color: #333;\n  \n  h1 { font-size: 2.5rem; margin: 1.5em 0 0.5em; }\n  h2 { font-size: 2rem; margin: 1.5em 0 0.5em; }\n  h3 { font-size: 1.5rem; margin: 1.5em 0 0.5em; }\n  \n  p { margin: 1em 0; }\n  \n  blockquote {\n    margin: 1em 0;\n    padding-left: 1em;\n    border-left: 4px solid #e2e8f0;\n    color: #64748b;\n  }\n  \n  code {\n    padding: 0.2em 0.4em;\n    background-color: #f7fafc;\n    color: #e53e3e;\n    border-radius: 3px;\n    font-family: monospace;\n  }\n  \n  ul, ol {\n    margin: 1em 0;\n    padding-left: 2em;\n  }\n  \n  li { margin: 0.25em 0; }\n\\`;\n\nconst ${componentName} = () => {\n  return (\n    <StyledNote>\n${content}\n    </StyledNote>\n  );\n};\n\nexport default ${componentName};`,\n    }\n  }\n\n  private generateCSSModulesVersion(\n    content: string,\n    componentName: string\n  ): { component: string; styles: string } {\n    const component = `import React from 'react';\nimport styles from './${componentName}.module.css';\n\nconst ${componentName} = () => {\n  return (\n    <div className={styles.exportedNote}>\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`\n\n    const styles = `.exportedNote {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  line-height: 1.6;\n  color: #333;\n}\n\n.exportedNote h1 {\n  font-size: 2.5rem;\n  margin: 1.5em 0 0.5em;\n}\n\n.exportedNote h2 {\n  font-size: 2rem;\n  margin: 1.5em 0 0.5em;\n}\n\n.exportedNote h3 {\n  font-size: 1.5rem;\n  margin: 1.5em 0 0.5em;\n}\n\n.exportedNote p {\n  margin: 1em 0;\n}\n\n.exportedNote blockquote {\n  margin: 1em 0;\n  padding-left: 1em;\n  border-left: 4px solid #e2e8f0;\n  color: #64748b;\n}\n\n.exportedNote code {\n  padding: 0.2em 0.4em;\n  background-color: #f7fafc;\n  color: #e53e3e;\n  border-radius: 3px;\n  font-family: monospace;\n}\n\n.exportedNote ul,\n.exportedNote ol {\n  margin: 1em 0;\n  padding-left: 2em;\n}\n\n.exportedNote li {\n  margin: 0.25em 0;\n}`\n\n    return { component, styles }\n  }\n\n  private generateInlineStylesVersion(\n    content: string,\n    componentName: string\n  ): { component: string } {\n    const styles = {\n      container: {\n        fontFamily:\n          \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif\",\n        lineHeight: 1.6,\n        color: '#333',\n      },\n    }\n\n    return {\n      component: `import React from 'react';\n\nconst styles = ${JSON.stringify(styles, null, 2)};\n\nconst ${componentName} = () => {\n  return (\n    <div style={styles.container}>\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`,\n    }\n  }\n}\n",
              ],
              names: [
                'Element',
                'Text',
                'SlateToReactConverter',
                'convert',
                'nodes',
                'componentName',
                'jsxContent',
                'nodesToJSX',
                'wrapInComponent',
                'convertWithTypeScript',
                'component',
                'wrapInTypescriptComponent',
                'types',
                'generateTypeDefinitions',
                'map',
                'node',
                'nodeToJSX',
                'join',
                'indent',
                'indentStr',
                'repeat',
                'isText',
                'textToJSX',
                'isElement',
                'elementToJSX',
                'text',
                'escapeJSX',
                'bold',
                'italic',
                'underline',
                'strikethrough',
                'code',
                'element',
                'childIndent',
                'children',
                'child',
                'type',
                'listItemsToJSX',
                'filter',
                'Boolean',
                'replace',
                'content',
                'generateStyledComponent',
                'styleType',
                'generateStyledComponentsVersion',
                'generateCSSModulesVersion',
                'generateInlineStylesVersion',
                'styles',
                'container',
                'fontFamily',
                'lineHeight',
                'color',
                'JSON',
                'stringify',
                'componentCounter',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: 'e5c96e2698d4fbfe4f7defc890bd0c4f7e9333db',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          'e5c96e2698d4fbfe4f7defc890bd0c4f7e9333db' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_10tcsoylsl = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_10tcsoylsl()
      class SlateToReactConverter {
        convert(
          nodes,
          componentName = (cov_10tcsoylsl().b[0][0]++, 'ExportedNote')
        ) {
          cov_10tcsoylsl().f[0]++
          const jsxContent = (cov_10tcsoylsl().s[0]++, this.nodesToJSX(nodes))
          return (
            cov_10tcsoylsl().s[1]++,
            this.wrapInComponent(jsxContent, componentName)
          )
        }
        convertWithTypeScript(
          nodes,
          componentName = (cov_10tcsoylsl().b[1][0]++, 'ExportedNote')
        ) {
          cov_10tcsoylsl().f[1]++
          const jsxContent = (cov_10tcsoylsl().s[2]++, this.nodesToJSX(nodes)),
            component =
              (cov_10tcsoylsl().s[3]++,
              this.wrapInTypescriptComponent(jsxContent, componentName)),
            types =
              (cov_10tcsoylsl().s[4]++,
              this.generateTypeDefinitions(componentName))
          return (cov_10tcsoylsl().s[5]++, { component, types })
        }
        nodesToJSX(nodes) {
          return (
            cov_10tcsoylsl().f[2]++,
            cov_10tcsoylsl().s[6]++,
            nodes
              .map(
                (node) => (
                  cov_10tcsoylsl().f[3]++,
                  cov_10tcsoylsl().s[7]++,
                  this.nodeToJSX(node)
                )
              )
              .join('\n')
          )
        }
        nodeToJSX(node, indent = (cov_10tcsoylsl().b[2][0]++, 2)) {
          cov_10tcsoylsl().f[4]++
          ;(cov_10tcsoylsl().s[8]++, ' '.repeat(indent))
          return (
            cov_10tcsoylsl().s[9]++,
            index_es.EY.isText(node)
              ? (cov_10tcsoylsl().b[3][0]++,
                cov_10tcsoylsl().s[10]++,
                this.textToJSX(node))
              : (cov_10tcsoylsl().b[3][1]++,
                cov_10tcsoylsl().s[11]++,
                index_es.Hg.isElement(node)
                  ? (cov_10tcsoylsl().b[4][0]++,
                    cov_10tcsoylsl().s[12]++,
                    this.elementToJSX(node, indent))
                  : (cov_10tcsoylsl().b[4][1]++, cov_10tcsoylsl().s[13]++, ''))
          )
        }
        textToJSX(node) {
          cov_10tcsoylsl().f[5]++
          let text = (cov_10tcsoylsl().s[14]++, this.escapeJSX(node.text))
          return (
            cov_10tcsoylsl().s[15]++,
            node.bold
              ? (cov_10tcsoylsl().b[5][0]++,
                cov_10tcsoylsl().s[16]++,
                (text = `<strong>${text}</strong>`))
              : cov_10tcsoylsl().b[5][1]++,
            cov_10tcsoylsl().s[17]++,
            node.italic
              ? (cov_10tcsoylsl().b[6][0]++,
                cov_10tcsoylsl().s[18]++,
                (text = `<em>${text}</em>`))
              : cov_10tcsoylsl().b[6][1]++,
            cov_10tcsoylsl().s[19]++,
            node.underline
              ? (cov_10tcsoylsl().b[7][0]++,
                cov_10tcsoylsl().s[20]++,
                (text = `<u>${text}</u>`))
              : cov_10tcsoylsl().b[7][1]++,
            cov_10tcsoylsl().s[21]++,
            node.strikethrough
              ? (cov_10tcsoylsl().b[8][0]++,
                cov_10tcsoylsl().s[22]++,
                (text = `<s>${text}</s>`))
              : cov_10tcsoylsl().b[8][1]++,
            cov_10tcsoylsl().s[23]++,
            node.code
              ? (cov_10tcsoylsl().b[9][0]++,
                cov_10tcsoylsl().s[24]++,
                (text = `<code>${text}</code>`))
              : cov_10tcsoylsl().b[9][1]++,
            cov_10tcsoylsl().s[25]++,
            text
          )
        }
        elementToJSX(element, indent) {
          cov_10tcsoylsl().f[6]++
          const indentStr = (cov_10tcsoylsl().s[26]++, ' '.repeat(indent)),
            childIndent = (cov_10tcsoylsl().s[27]++, indent + 2),
            children =
              (cov_10tcsoylsl().s[28]++,
              element.children
                .map(
                  (child) => (
                    cov_10tcsoylsl().f[7]++,
                    cov_10tcsoylsl().s[29]++,
                    this.nodeToJSX(child, childIndent)
                  )
                )
                .join(''))
          switch ((cov_10tcsoylsl().s[30]++, element.type)) {
            case 'paragraph':
              return (
                cov_10tcsoylsl().b[10][0]++,
                cov_10tcsoylsl().s[31]++,
                `${indentStr}<p>${(cov_10tcsoylsl().b[11][0]++, children || (cov_10tcsoylsl().b[11][1]++, ' '))}</p>`
              )
            case 'heading-one':
              return (
                cov_10tcsoylsl().b[10][1]++,
                cov_10tcsoylsl().s[32]++,
                `${indentStr}<h1>${children}</h1>`
              )
            case 'heading-two':
              return (
                cov_10tcsoylsl().b[10][2]++,
                cov_10tcsoylsl().s[33]++,
                `${indentStr}<h2>${children}</h2>`
              )
            case 'heading-three':
              return (
                cov_10tcsoylsl().b[10][3]++,
                cov_10tcsoylsl().s[34]++,
                `${indentStr}<h3>${children}</h3>`
              )
            case 'block-quote':
              return (
                cov_10tcsoylsl().b[10][4]++,
                cov_10tcsoylsl().s[35]++,
                `${indentStr}<blockquote>\n${' '.repeat(childIndent)}${children}\n${indentStr}</blockquote>`
              )
            case 'bulleted-list':
              return (
                cov_10tcsoylsl().b[10][5]++,
                cov_10tcsoylsl().s[36]++,
                `${indentStr}<ul>\n${this.listItemsToJSX(element, childIndent)}\n${indentStr}</ul>`
              )
            case 'numbered-list':
              return (
                cov_10tcsoylsl().b[10][6]++,
                cov_10tcsoylsl().s[37]++,
                `${indentStr}<ol>\n${this.listItemsToJSX(element, childIndent)}\n${indentStr}</ol>`
              )
            case 'list-item':
              return (
                cov_10tcsoylsl().b[10][7]++,
                cov_10tcsoylsl().s[38]++,
                `${indentStr}<li>${children}</li>`
              )
            default:
              return (
                cov_10tcsoylsl().b[10][8]++,
                cov_10tcsoylsl().s[39]++,
                `${indentStr}<div>${children}</div>`
              )
          }
        }
        listItemsToJSX(element, indent) {
          return (
            cov_10tcsoylsl().f[8]++,
            cov_10tcsoylsl().s[40]++,
            element.children
              .map(
                (child) => (
                  cov_10tcsoylsl().f[9]++,
                  cov_10tcsoylsl().s[41]++,
                  cov_10tcsoylsl().b[13][0]++,
                  index_es.Hg.isElement(child) &&
                  (cov_10tcsoylsl().b[13][1]++, 'list-item' === child.type)
                    ? (cov_10tcsoylsl().b[12][0]++,
                      cov_10tcsoylsl().s[42]++,
                      this.nodeToJSX(child, indent))
                    : (cov_10tcsoylsl().b[12][1]++,
                      cov_10tcsoylsl().s[43]++,
                      '')
                )
              )
              .filter(Boolean)
              .join('\n')
          )
        }
        escapeJSX(text) {
          return (
            cov_10tcsoylsl().f[10]++,
            cov_10tcsoylsl().s[44]++,
            text
              .replace(/\{/g, '&#123;')
              .replace(/\}/g, '&#125;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
          )
        }
        wrapInComponent(content, componentName) {
          return (
            cov_10tcsoylsl().f[11]++,
            cov_10tcsoylsl().s[45]++,
            `import React from 'react';\n\nconst ${componentName} = () => {\n  return (\n    <div className="exported-note">\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`
          )
        }
        wrapInTypescriptComponent(content, componentName) {
          return (
            cov_10tcsoylsl().f[12]++,
            cov_10tcsoylsl().s[46]++,
            `import React from 'react';\nimport type { ${componentName}Props } from './${componentName}.types';\n\nconst ${componentName}: React.FC<${componentName}Props> = ({\n  className,\n  style,\n  onContentClick,\n}) => {\n  return (\n    <div \n      className={\`exported-note \${className || ''}\`}\n      style={style}\n      onClick={onContentClick}\n    >\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`
          )
        }
        generateTypeDefinitions(componentName) {
          return (
            cov_10tcsoylsl().f[13]++,
            cov_10tcsoylsl().s[47]++,
            `import { CSSProperties, MouseEventHandler } from 'react';\n\nexport interface ${componentName}Props {\n  className?: string;\n  style?: CSSProperties;\n  onContentClick?: MouseEventHandler<HTMLDivElement>;\n}`
          )
        }
        generateStyledComponent(
          nodes,
          componentName = (cov_10tcsoylsl().b[14][0]++, 'ExportedNote'),
          styleType
        ) {
          cov_10tcsoylsl().f[14]++
          const jsxContent = (cov_10tcsoylsl().s[48]++, this.nodesToJSX(nodes))
          switch ((cov_10tcsoylsl().s[49]++, styleType)) {
            case 'css-in-js':
              return (
                cov_10tcsoylsl().b[15][0]++,
                cov_10tcsoylsl().s[50]++,
                this.generateStyledComponentsVersion(jsxContent, componentName)
              )
            case 'css-modules':
              return (
                cov_10tcsoylsl().b[15][1]++,
                cov_10tcsoylsl().s[51]++,
                this.generateCSSModulesVersion(jsxContent, componentName)
              )
            case 'inline':
              cov_10tcsoylsl().b[15][2]++
            default:
              return (
                cov_10tcsoylsl().b[15][3]++,
                cov_10tcsoylsl().s[52]++,
                this.generateInlineStylesVersion(jsxContent, componentName)
              )
          }
        }
        generateStyledComponentsVersion(content, componentName) {
          return (
            cov_10tcsoylsl().f[15]++,
            cov_10tcsoylsl().s[53]++,
            {
              component: `import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledNote = styled.div\`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  line-height: 1.6;\n  color: #333;\n  \n  h1 { font-size: 2.5rem; margin: 1.5em 0 0.5em; }\n  h2 { font-size: 2rem; margin: 1.5em 0 0.5em; }\n  h3 { font-size: 1.5rem; margin: 1.5em 0 0.5em; }\n  \n  p { margin: 1em 0; }\n  \n  blockquote {\n    margin: 1em 0;\n    padding-left: 1em;\n    border-left: 4px solid #e2e8f0;\n    color: #64748b;\n  }\n  \n  code {\n    padding: 0.2em 0.4em;\n    background-color: #f7fafc;\n    color: #e53e3e;\n    border-radius: 3px;\n    font-family: monospace;\n  }\n  \n  ul, ol {\n    margin: 1em 0;\n    padding-left: 2em;\n  }\n  \n  li { margin: 0.25em 0; }\n\`;\n\nconst ${componentName} = () => {\n  return (\n    <StyledNote>\n${content}\n    </StyledNote>\n  );\n};\n\nexport default ${componentName};`,
            }
          )
        }
        generateCSSModulesVersion(content, componentName) {
          cov_10tcsoylsl().f[16]++
          const component =
              (cov_10tcsoylsl().s[54]++,
              `import React from 'react';\nimport styles from './${componentName}.module.css';\n\nconst ${componentName} = () => {\n  return (\n    <div className={styles.exportedNote}>\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`),
            styles =
              (cov_10tcsoylsl().s[55]++,
              ".exportedNote {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  line-height: 1.6;\n  color: #333;\n}\n\n.exportedNote h1 {\n  font-size: 2.5rem;\n  margin: 1.5em 0 0.5em;\n}\n\n.exportedNote h2 {\n  font-size: 2rem;\n  margin: 1.5em 0 0.5em;\n}\n\n.exportedNote h3 {\n  font-size: 1.5rem;\n  margin: 1.5em 0 0.5em;\n}\n\n.exportedNote p {\n  margin: 1em 0;\n}\n\n.exportedNote blockquote {\n  margin: 1em 0;\n  padding-left: 1em;\n  border-left: 4px solid #e2e8f0;\n  color: #64748b;\n}\n\n.exportedNote code {\n  padding: 0.2em 0.4em;\n  background-color: #f7fafc;\n  color: #e53e3e;\n  border-radius: 3px;\n  font-family: monospace;\n}\n\n.exportedNote ul,\n.exportedNote ol {\n  margin: 1em 0;\n  padding-left: 2em;\n}\n\n.exportedNote li {\n  margin: 0.25em 0;\n}")
          return (cov_10tcsoylsl().s[56]++, { component, styles })
        }
        generateInlineStylesVersion(content, componentName) {
          cov_10tcsoylsl().f[17]++
          const styles =
            (cov_10tcsoylsl().s[57]++,
            {
              container: {
                fontFamily:
                  "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
                lineHeight: 1.6,
                color: '#333',
              },
            })
          return (
            cov_10tcsoylsl().s[58]++,
            {
              component: `import React from 'react';\n\nconst styles = ${JSON.stringify(styles, null, 2)};\n\nconst ${componentName} = () => {\n  return (\n    <div style={styles.container}>\n${content}\n    </div>\n  );\n};\n\nexport default ${componentName};`,
            }
          )
        }
        constructor() {
          ;(cov_10tcsoylsl().f[18]++,
            cov_10tcsoylsl().s[59]++,
            (this.componentCounter = 0))
        }
      }
      function cov_1w6qoj43k2() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/react-exporter.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/react-exporter.ts',
            statementMap: {
              0: {
                start: { line: 5, column: 8 },
                end: { line: 70, column: 9 },
              },
              1: {
                start: { line: 6, column: 33 },
                end: { line: 6, column: 40 },
              },
              2: {
                start: { line: 7, column: 34 },
                end: { line: 7, column: 158 },
              },
              3: {
                start: { line: 9, column: 36 },
                end: { line: 9, column: 38 },
              },
              4: {
                start: { line: 11, column: 12 },
                end: { line: 20, column: 13 },
              },
              5: {
                start: { line: 12, column: 45 },
                end: { line: 12, column: 105 },
              },
              6: {
                start: { line: 13, column: 16 },
                end: { line: 13, column: 42 },
              },
              7: {
                start: { line: 14, column: 16 },
                end: { line: 17, column: 19 },
              },
              8: {
                start: { line: 19, column: 16 },
                end: { line: 19, column: 79 },
              },
              9: {
                start: { line: 22, column: 12 },
                end: { line: 31, column: 13 },
              },
              10: {
                start: { line: 23, column: 46 },
                end: { line: 23, column: 132 },
              },
              11: {
                start: { line: 24, column: 16 },
                end: { line: 24, column: 42 },
              },
              12: {
                start: { line: 25, column: 16 },
                end: { line: 30, column: 17 },
              },
              13: {
                start: { line: 26, column: 20 },
                end: { line: 29, column: 23 },
              },
              14: {
                start: { line: 33, column: 12 },
                end: { line: 38, column: 13 },
              },
              15: {
                start: { line: 34, column: 16 },
                end: { line: 37, column: 19 },
              },
              16: {
                start: { line: 40, column: 12 },
                end: { line: 50, column: 13 },
              },
              17: {
                start: { line: 41, column: 33 },
                end: { line: 41, column: 114 },
              },
              18: {
                start: { line: 42, column: 33 },
                end: { line: 42, column: 96 },
              },
              19: {
                start: { line: 43, column: 29 },
                end: { line: 43, column: 69 },
              },
              20: {
                start: { line: 44, column: 16 },
                end: { line: 49, column: 18 },
              },
              21: {
                start: { line: 52, column: 29 },
                end: { line: 58, column: 13 },
              },
              22: {
                start: { line: 59, column: 35 },
                end: { line: 59, column: 69 },
              },
              23: {
                start: { line: 60, column: 29 },
                end: { line: 60, column: 78 },
              },
              24: {
                start: { line: 61, column: 25 },
                end: { line: 61, column: 77 },
              },
              25: {
                start: { line: 62, column: 12 },
                end: { line: 67, column: 14 },
              },
              26: {
                start: { line: 69, column: 12 },
                end: { line: 69, column: 43 },
              },
              27: {
                start: { line: 73, column: 8 },
                end: { line: 111, column: 9 },
              },
              28: {
                start: { line: 74, column: 38 },
                end: { line: 74, column: 45 },
              },
              29: {
                start: { line: 75, column: 12 },
                end: { line: 77, column: 13 },
              },
              30: {
                start: { line: 76, column: 16 },
                end: { line: 76, column: 69 },
              },
              31: {
                start: { line: 79, column: 31 },
                end: { line: 79, column: 33 },
              },
              32: {
                start: { line: 80, column: 12 },
                end: { line: 88, column: 15 },
              },
              33: {
                start: { line: 82, column: 38 },
                end: { line: 82, column: 192 },
              },
              34: {
                start: { line: 83, column: 38 },
                end: { line: 83, column: 89 },
              },
              35: {
                start: { line: 84, column: 16 },
                end: { line: 87, column: 19 },
              },
              36: {
                start: { line: 90, column: 33 },
                end: { line: 90, column: 67 },
              },
              37: {
                start: { line: 91, column: 12 },
                end: { line: 94, column: 15 },
              },
              38: {
                start: { line: 96, column: 12 },
                end: { line: 99, column: 15 },
              },
              39: {
                start: { line: 100, column: 35 },
                end: { line: 100, column: 71 },
              },
              40: {
                start: { line: 101, column: 29 },
                end: { line: 101, column: 77 },
              },
              41: {
                start: { line: 102, column: 25 },
                end: { line: 102, column: 77 },
              },
              42: {
                start: { line: 103, column: 12 },
                end: { line: 108, column: 14 },
              },
              43: {
                start: { line: 110, column: 12 },
                end: { line: 110, column: 43 },
              },
              44: {
                start: { line: 114, column: 8 },
                end: { line: 114, column: 42 },
              },
              45: {
                start: { line: 114, column: 20 },
                end: { line: 114, column: 42 },
              },
              46: {
                start: { line: 116, column: 8 },
                end: { line: 117, column: 103 },
              },
              47: {
                start: { line: 117, column: 34 },
                end: { line: 117, column: 92 },
              },
              48: {
                start: { line: 120, column: 25 },
                end: { line: 120, column: 27 },
              },
              49: {
                start: { line: 121, column: 8 },
                end: { line: 121, column: 44 },
              },
              50: {
                start: { line: 122, column: 8 },
                end: { line: 122, column: 26 },
              },
              51: {
                start: { line: 123, column: 8 },
                end: { line: 126, column: 9 },
              },
              52: {
                start: { line: 124, column: 12 },
                end: { line: 124, column: 48 },
              },
              53: {
                start: { line: 125, column: 12 },
                end: { line: 125, column: 30 },
              },
              54: {
                start: { line: 127, column: 8 },
                end: { line: 127, column: 41 },
              },
              55: {
                start: { line: 128, column: 8 },
                end: { line: 128, column: 26 },
              },
              56: {
                start: { line: 129, column: 8 },
                end: { line: 129, column: 33 },
              },
              57: {
                start: { line: 130, column: 8 },
                end: { line: 130, column: 68 },
              },
              58: {
                start: { line: 131, column: 8 },
                end: { line: 131, column: 109 },
              },
              59: {
                start: { line: 132, column: 8 },
                end: { line: 134, column: 9 },
              },
              60: {
                start: { line: 133, column: 12 },
                end: { line: 133, column: 86 },
              },
              61: {
                start: { line: 135, column: 8 },
                end: { line: 135, column: 29 },
              },
              62: {
                start: { line: 136, column: 8 },
                end: { line: 136, column: 26 },
              },
              63: {
                start: { line: 137, column: 8 },
                end: { line: 137, column: 34 },
              },
              64: {
                start: { line: 138, column: 8 },
                end: { line: 138, column: 26 },
              },
              65: {
                start: { line: 139, column: 8 },
                end: { line: 139, column: 32 },
              },
              66: {
                start: { line: 140, column: 8 },
                end: { line: 140, column: 87 },
              },
              67: {
                start: { line: 141, column: 8 },
                end: { line: 141, column: 26 },
              },
              68: {
                start: { line: 142, column: 8 },
                end: { line: 142, column: 42 },
              },
              69: {
                start: { line: 143, column: 8 },
                end: { line: 143, column: 36 },
              },
              70: {
                start: { line: 144, column: 8 },
                end: { line: 144, column: 35 },
              },
              71: {
                start: { line: 145, column: 8 },
                end: { line: 145, column: 52 },
              },
              72: {
                start: { line: 146, column: 8 },
                end: { line: 146, column: 36 },
              },
              73: {
                start: { line: 147, column: 8 },
                end: { line: 147, column: 30 },
              },
              74: {
                start: { line: 148, column: 8 },
                end: { line: 148, column: 27 },
              },
              75: {
                start: { line: 149, column: 8 },
                end: { line: 149, column: 29 },
              },
              76: {
                start: { line: 150, column: 8 },
                end: { line: 150, column: 26 },
              },
              77: {
                start: { line: 151, column: 8 },
                end: { line: 160, column: 9 },
              },
              78: {
                start: { line: 152, column: 12 },
                end: { line: 152, column: 38 },
              },
              79: {
                start: { line: 153, column: 12 },
                end: { line: 153, column: 30 },
              },
              80: {
                start: { line: 154, column: 12 },
                end: { line: 154, column: 59 },
              },
              81: {
                start: { line: 155, column: 12 },
                end: { line: 155, column: 59 },
              },
              82: {
                start: { line: 156, column: 12 },
                end: { line: 156, column: 78 },
              },
              83: {
                start: { line: 157, column: 12 },
                end: { line: 157, column: 80 },
              },
              84: {
                start: { line: 158, column: 12 },
                end: { line: 158, column: 96 },
              },
              85: {
                start: { line: 159, column: 12 },
                end: { line: 159, column: 30 },
              },
              86: {
                start: { line: 161, column: 8 },
                end: { line: 183, column: 9 },
              },
              87: {
                start: { line: 162, column: 12 },
                end: { line: 162, column: 40 },
              },
              88: {
                start: { line: 163, column: 12 },
                end: { line: 163, column: 30 },
              },
              89: {
                start: { line: 164, column: 12 },
                end: { line: 181, column: 13 },
              },
              90: {
                start: { line: 166, column: 20 },
                end: { line: 166, column: 88 },
              },
              91: {
                start: { line: 167, column: 20 },
                end: { line: 167, column: 85 },
              },
              92: {
                start: { line: 168, column: 20 },
                end: { line: 168, column: 38 },
              },
              93: {
                start: { line: 169, column: 20 },
                end: { line: 169, column: 45 },
              },
              94: {
                start: { line: 170, column: 20 },
                end: { line: 170, column: 67 },
              },
              95: {
                start: { line: 171, column: 20 },
                end: { line: 171, column: 41 },
              },
              96: {
                start: { line: 172, column: 20 },
                end: { line: 172, column: 26 },
              },
              97: {
                start: { line: 174, column: 20 },
                end: { line: 174, column: 82 },
              },
              98: {
                start: { line: 175, column: 20 },
                end: { line: 175, column: 87 },
              },
              99: {
                start: { line: 176, column: 20 },
                end: { line: 176, column: 26 },
              },
              100: {
                start: { line: 178, column: 20 },
                end: { line: 178, column: 72 },
              },
              101: {
                start: { line: 179, column: 20 },
                end: { line: 179, column: 98 },
              },
              102: {
                start: { line: 180, column: 20 },
                end: { line: 180, column: 26 },
              },
              103: {
                start: { line: 182, column: 12 },
                end: { line: 182, column: 30 },
              },
              104: {
                start: { line: 184, column: 8 },
                end: { line: 193, column: 9 },
              },
              105: {
                start: { line: 186, column: 12 },
                end: { line: 186, column: 41 },
              },
              106: {
                start: { line: 187, column: 12 },
                end: { line: 187, column: 30 },
              },
              107: {
                start: { line: 188, column: 12 },
                end: { line: 188, column: 80 },
              },
              108: {
                start: { line: 188, column: 32 },
                end: { line: 188, column: 80 },
              },
              109: {
                start: { line: 189, column: 12 },
                end: { line: 189, column: 83 },
              },
              110: {
                start: { line: 189, column: 33 },
                end: { line: 189, column: 83 },
              },
              111: {
                start: { line: 190, column: 12 },
                end: { line: 190, column: 111 },
              },
              112: {
                start: { line: 190, column: 36 },
                end: { line: 190, column: 111 },
              },
              113: {
                start: { line: 191, column: 12 },
                end: { line: 191, column: 178 },
              },
              114: {
                start: { line: 191, column: 121 },
                end: { line: 191, column: 178 },
              },
              115: {
                start: { line: 192, column: 12 },
                end: { line: 192, column: 30 },
              },
              116: {
                start: { line: 194, column: 8 },
                end: { line: 194, column: 36 },
              },
              117: {
                start: { line: 195, column: 8 },
                end: { line: 195, column: 26 },
              },
              118: {
                start: { line: 196, column: 8 },
                end: { line: 196, column: 66 },
              },
              119: {
                start: { line: 197, column: 8 },
                end: { line: 197, column: 26 },
              },
              120: {
                start: { line: 198, column: 8 },
                end: { line: 198, column: 35 },
              },
              121: {
                start: { line: 201, column: 25 },
                end: { line: 201, column: 27 },
              },
              122: {
                start: { line: 202, column: 8 },
                end: { line: 202, column: 53 },
              },
              123: {
                start: { line: 203, column: 8 },
                end: { line: 203, column: 26 },
              },
              124: {
                start: { line: 204, column: 8 },
                end: { line: 204, column: 87 },
              },
              125: {
                start: { line: 205, column: 8 },
                end: { line: 205, column: 26 },
              },
              126: {
                start: { line: 206, column: 8 },
                end: { line: 206, column: 39 },
              },
              127: {
                start: { line: 207, column: 8 },
                end: { line: 207, column: 26 },
              },
              128: {
                start: { line: 208, column: 8 },
                end: { line: 212, column: 11 },
              },
              129: {
                start: { line: 210, column: 34 },
                end: { line: 210, column: 188 },
              },
              130: {
                start: { line: 211, column: 12 },
                end: { line: 211, column: 183 },
              },
              131: {
                start: { line: 213, column: 8 },
                end: { line: 213, column: 26 },
              },
              132: {
                start: { line: 214, column: 8 },
                end: { line: 214, column: 34 },
              },
              133: {
                start: { line: 215, column: 8 },
                end: { line: 215, column: 26 },
              },
              134: {
                start: { line: 216, column: 8 },
                end: { line: 216, column: 82 },
              },
              135: {
                start: { line: 217, column: 8 },
                end: { line: 217, column: 26 },
              },
              136: {
                start: { line: 218, column: 8 },
                end: { line: 218, column: 32 },
              },
              137: {
                start: { line: 219, column: 8 },
                end: { line: 219, column: 89 },
              },
              138: {
                start: { line: 220, column: 8 },
                end: { line: 220, column: 29 },
              },
              139: {
                start: { line: 221, column: 8 },
                end: { line: 221, column: 26 },
              },
              140: {
                start: { line: 222, column: 8 },
                end: { line: 222, column: 38 },
              },
              141: {
                start: { line: 223, column: 8 },
                end: { line: 223, column: 26 },
              },
              142: {
                start: { line: 224, column: 8 },
                end: { line: 224, column: 78 },
              },
              143: {
                start: { line: 225, column: 8 },
                end: { line: 225, column: 80 },
              },
              144: {
                start: { line: 226, column: 8 },
                end: { line: 226, column: 83 },
              },
              145: {
                start: { line: 227, column: 8 },
                end: { line: 227, column: 26 },
              },
              146: {
                start: { line: 228, column: 8 },
                end: { line: 228, column: 35 },
              },
              147: {
                start: { line: 231, column: 24 },
                end: { line: 231, column: 26 },
              },
              148: {
                start: { line: 232, column: 30 },
                end: { line: 232, column: 39 },
              },
              149: {
                start: { line: 233, column: 8 },
                end: { line: 240, column: 11 },
              },
              150: {
                start: { line: 234, column: 12 },
                end: { line: 234, column: 68 },
              },
              151: {
                start: { line: 234, column: 61 },
                end: { line: 234, column: 68 },
              },
              152: {
                start: { line: 235, column: 34 },
                end: { line: 235, column: 66 },
              },
              153: {
                start: { line: 237, column: 12 },
                end: { line: 237, column: 57 },
              },
              154: {
                start: { line: 237, column: 50 },
                end: { line: 237, column: 57 },
              },
              155: {
                start: { line: 238, column: 12 },
                end: { line: 238, column: 45 },
              },
              156: {
                start: { line: 239, column: 12 },
                end: { line: 239, column: 94 },
              },
              157: {
                start: { line: 241, column: 8 },
                end: { line: 241, column: 34 },
              },
              158: {
                start: { line: 246, column: 22 },
                end: { line: 246, column: 59 },
              },
              159: {
                start: { line: 247, column: 8 },
                end: { line: 251, column: 11 },
              },
              160: {
                start: { line: 248, column: 12 },
                end: { line: 248, column: 49 },
              },
              161: {
                start: { line: 249, column: 12 },
                end: { line: 249, column: 31 },
              },
              162: {
                start: { line: 250, column: 12 },
                end: { line: 250, column: 30 },
              },
              163: {
                start: { line: 252, column: 8 },
                end: { line: 252, column: 23 },
              },
              164: {
                start: { line: 255, column: 8 },
                end: { line: 255, column: 23 },
              },
              165: {
                start: { line: 256, column: 8 },
                end: { line: 256, column: 53 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 4, column: 4 },
                  end: { line: 4, column: 5 },
                },
                loc: {
                  start: { line: 4, column: 45 },
                  end: { line: 71, column: 5 },
                },
                line: 4,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 72, column: 4 },
                  end: { line: 72, column: 5 },
                },
                loc: {
                  start: { line: 72, column: 30 },
                  end: { line: 112, column: 5 },
                },
                line: 72,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 80, column: 26 },
                  end: { line: 80, column: 27 },
                },
                loc: {
                  start: { line: 80, column: 41 },
                  end: { line: 88, column: 13 },
                },
                line: 80,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 113, column: 4 },
                  end: { line: 113, column: 5 },
                },
                loc: {
                  start: { line: 113, column: 33 },
                  end: { line: 118, column: 5 },
                },
                line: 113,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 117, column: 26 },
                  end: { line: 117, column: 27 },
                },
                loc: {
                  start: { line: 117, column: 34 },
                  end: { line: 117, column: 92 },
                },
                line: 117,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 119, column: 4 },
                  end: { line: 119, column: 5 },
                },
                loc: {
                  start: { line: 119, column: 60 },
                  end: { line: 199, column: 5 },
                },
                line: 119,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 200, column: 4 },
                  end: { line: 200, column: 5 },
                },
                loc: {
                  start: { line: 200, column: 37 },
                  end: { line: 229, column: 5 },
                },
                line: 200,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 208, column: 22 },
                  end: { line: 208, column: 23 },
                },
                loc: {
                  start: { line: 208, column: 37 },
                  end: { line: 212, column: 9 },
                },
                line: 208,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 230, column: 4 },
                  end: { line: 230, column: 5 },
                },
                loc: {
                  start: { line: 230, column: 34 },
                  end: { line: 242, column: 5 },
                },
                line: 230,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 233, column: 27 },
                  end: { line: 233, column: 28 },
                },
                loc: {
                  start: { line: 233, column: 39 },
                  end: { line: 240, column: 9 },
                },
                line: 233,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 243, column: 4 },
                  end: { line: 243, column: 5 },
                },
                loc: {
                  start: { line: 243, column: 31 },
                  end: { line: 253, column: 5 },
                },
                line: 243,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 247, column: 22 },
                  end: { line: 247, column: 23 },
                },
                loc: {
                  start: { line: 247, column: 43 },
                  end: { line: 251, column: 9 },
                },
                line: 247,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 254, column: 4 },
                  end: { line: 254, column: 5 },
                },
                loc: {
                  start: { line: 254, column: 17 },
                  end: { line: 257, column: 5 },
                },
                line: 254,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 7, column: 34 },
                  end: { line: 7, column: 158 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 7, column: 34 },
                    end: { line: 7, column: 60 },
                  },
                  {
                    start: { line: 7, column: 64 },
                    end: { line: 7, column: 158 },
                  },
                ],
                line: 7,
              },
              1: {
                loc: {
                  start: { line: 7, column: 91 },
                  end: { line: 7, column: 157 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 7, column: 134 },
                    end: { line: 7, column: 140 },
                  },
                  {
                    start: { line: 7, column: 143 },
                    end: { line: 7, column: 157 },
                  },
                ],
                line: 7,
              },
              2: {
                loc: {
                  start: { line: 7, column: 91 },
                  end: { line: 7, column: 131 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 7, column: 91 },
                    end: { line: 7, column: 108 },
                  },
                  {
                    start: { line: 7, column: 112 },
                    end: { line: 7, column: 131 },
                  },
                ],
                line: 7,
              },
              3: {
                loc: {
                  start: { line: 11, column: 12 },
                  end: { line: 20, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 11, column: 12 },
                    end: { line: 20, column: 13 },
                  },
                  {
                    start: { line: 18, column: 19 },
                    end: { line: 20, column: 13 },
                  },
                ],
                line: 11,
              },
              4: {
                loc: {
                  start: { line: 22, column: 12 },
                  end: { line: 31, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 22, column: 12 },
                    end: { line: 31, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 22,
              },
              5: {
                loc: {
                  start: { line: 25, column: 16 },
                  end: { line: 30, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 25, column: 16 },
                    end: { line: 30, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 25,
              },
              6: {
                loc: {
                  start: { line: 25, column: 20 },
                  end: { line: 25, column: 70 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 25, column: 20 },
                    end: { line: 25, column: 26 },
                  },
                  {
                    start: { line: 25, column: 30 },
                    end: { line: 25, column: 70 },
                  },
                ],
                line: 25,
              },
              7: {
                loc: {
                  start: { line: 33, column: 12 },
                  end: { line: 38, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 33, column: 12 },
                    end: { line: 38, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 33,
              },
              8: {
                loc: {
                  start: { line: 40, column: 12 },
                  end: { line: 50, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 40, column: 12 },
                    end: { line: 50, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 40,
              },
              9: {
                loc: {
                  start: { line: 41, column: 33 },
                  end: { line: 41, column: 114 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 41, column: 33 },
                    end: { line: 41, column: 49 },
                  },
                  {
                    start: { line: 41, column: 53 },
                    end: { line: 41, column: 114 },
                  },
                ],
                line: 41,
              },
              10: {
                loc: {
                  start: { line: 41, column: 73 },
                  end: { line: 41, column: 112 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 41, column: 99 },
                    end: { line: 41, column: 104 },
                  },
                  {
                    start: { line: 41, column: 107 },
                    end: { line: 41, column: 112 },
                  },
                ],
                line: 41,
              },
              11: {
                loc: {
                  start: { line: 42, column: 33 },
                  end: { line: 42, column: 96 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 42, column: 59 },
                    end: { line: 42, column: 76 },
                  },
                  {
                    start: { line: 42, column: 79 },
                    end: { line: 42, column: 96 },
                  },
                ],
                line: 42,
              },
              12: {
                loc: {
                  start: { line: 54, column: 46 },
                  end: { line: 54, column: 85 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 54, column: 72 },
                    end: { line: 54, column: 77 },
                  },
                  {
                    start: { line: 54, column: 80 },
                    end: { line: 54, column: 85 },
                  },
                ],
                line: 54,
              },
              13: {
                loc: {
                  start: { line: 60, column: 29 },
                  end: { line: 60, column: 78 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 60, column: 29 },
                    end: { line: 60, column: 45 },
                  },
                  {
                    start: { line: 60, column: 49 },
                    end: { line: 60, column: 78 },
                  },
                ],
                line: 60,
              },
              14: {
                loc: {
                  start: { line: 75, column: 12 },
                  end: { line: 77, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 75, column: 12 },
                    end: { line: 77, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 75,
              },
              15: {
                loc: {
                  start: { line: 82, column: 65 },
                  end: { line: 82, column: 191 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 82, column: 66 },
                    end: { line: 82, column: 168 },
                  },
                  {
                    start: { line: 82, column: 173 },
                    end: { line: 82, column: 191 },
                  },
                ],
                line: 82,
              },
              16: {
                loc: {
                  start: { line: 82, column: 66 },
                  end: { line: 82, column: 168 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 82, column: 139 },
                    end: { line: 82, column: 145 },
                  },
                  {
                    start: { line: 82, column: 148 },
                    end: { line: 82, column: 168 },
                  },
                ],
                line: 82,
              },
              17: {
                loc: {
                  start: { line: 82, column: 66 },
                  end: { line: 82, column: 136 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 82, column: 66 },
                    end: { line: 82, column: 107 },
                  },
                  {
                    start: { line: 82, column: 111 },
                    end: { line: 82, column: 136 },
                  },
                ],
                line: 82,
              },
              18: {
                loc: {
                  start: { line: 114, column: 8 },
                  end: { line: 114, column: 42 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 114, column: 8 },
                    end: { line: 114, column: 42 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 114,
              },
              19: {
                loc: {
                  start: { line: 123, column: 8 },
                  end: { line: 126, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 123, column: 8 },
                    end: { line: 126, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 123,
              },
              20: {
                loc: {
                  start: { line: 123, column: 12 },
                  end: { line: 123, column: 84 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 123, column: 55 },
                    end: { line: 123, column: 61 },
                  },
                  {
                    start: { line: 123, column: 64 },
                    end: { line: 123, column: 84 },
                  },
                ],
                line: 123,
              },
              21: {
                loc: {
                  start: { line: 123, column: 12 },
                  end: { line: 123, column: 52 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 123, column: 12 },
                    end: { line: 123, column: 29 },
                  },
                  {
                    start: { line: 123, column: 33 },
                    end: { line: 123, column: 52 },
                  },
                ],
                line: 123,
              },
              22: {
                loc: {
                  start: { line: 131, column: 45 },
                  end: { line: 131, column: 79 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 131, column: 66 },
                    end: { line: 131, column: 71 },
                  },
                  {
                    start: { line: 131, column: 74 },
                    end: { line: 131, column: 79 },
                  },
                ],
                line: 131,
              },
              23: {
                loc: {
                  start: { line: 132, column: 8 },
                  end: { line: 134, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 132, column: 8 },
                    end: { line: 134, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 132,
              },
              24: {
                loc: {
                  start: { line: 151, column: 8 },
                  end: { line: 160, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 151, column: 8 },
                    end: { line: 160, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 151,
              },
              25: {
                loc: {
                  start: { line: 151, column: 12 },
                  end: { line: 151, column: 54 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 151, column: 12 },
                    end: { line: 151, column: 32 },
                  },
                  {
                    start: { line: 151, column: 36 },
                    end: { line: 151, column: 54 },
                  },
                ],
                line: 151,
              },
              26: {
                loc: {
                  start: { line: 161, column: 8 },
                  end: { line: 183, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 161, column: 8 },
                    end: { line: 183, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 161,
              },
              27: {
                loc: {
                  start: { line: 164, column: 12 },
                  end: { line: 181, column: 13 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 165, column: 16 },
                    end: { line: 172, column: 26 },
                  },
                  {
                    start: { line: 173, column: 16 },
                    end: { line: 176, column: 26 },
                  },
                  {
                    start: { line: 177, column: 16 },
                    end: { line: 180, column: 26 },
                  },
                ],
                line: 164,
              },
              28: {
                loc: {
                  start: { line: 184, column: 8 },
                  end: { line: 193, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 184, column: 8 },
                    end: { line: 193, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 184,
              },
              29: {
                loc: {
                  start: { line: 188, column: 12 },
                  end: { line: 188, column: 80 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 188, column: 12 },
                    end: { line: 188, column: 80 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 188,
              },
              30: {
                loc: {
                  start: { line: 189, column: 12 },
                  end: { line: 189, column: 83 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 189, column: 12 },
                    end: { line: 189, column: 83 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 189,
              },
              31: {
                loc: {
                  start: { line: 190, column: 12 },
                  end: { line: 190, column: 111 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 190, column: 12 },
                    end: { line: 190, column: 111 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 190,
              },
              32: {
                loc: {
                  start: { line: 191, column: 12 },
                  end: { line: 191, column: 178 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 191, column: 12 },
                    end: { line: 191, column: 178 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 191,
              },
              33: {
                loc: {
                  start: { line: 191, column: 16 },
                  end: { line: 191, column: 119 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 191, column: 89 },
                    end: { line: 191, column: 95 },
                  },
                  {
                    start: { line: 191, column: 98 },
                    end: { line: 191, column: 119 },
                  },
                ],
                line: 191,
              },
              34: {
                loc: {
                  start: { line: 191, column: 16 },
                  end: { line: 191, column: 86 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 191, column: 16 },
                    end: { line: 191, column: 57 },
                  },
                  {
                    start: { line: 191, column: 61 },
                    end: { line: 191, column: 86 },
                  },
                ],
                line: 191,
              },
              35: {
                loc: {
                  start: { line: 210, column: 61 },
                  end: { line: 210, column: 187 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 210, column: 62 },
                    end: { line: 210, column: 164 },
                  },
                  {
                    start: { line: 210, column: 169 },
                    end: { line: 210, column: 187 },
                  },
                ],
                line: 210,
              },
              36: {
                loc: {
                  start: { line: 210, column: 62 },
                  end: { line: 210, column: 164 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 210, column: 135 },
                    end: { line: 210, column: 141 },
                  },
                  {
                    start: { line: 210, column: 144 },
                    end: { line: 210, column: 164 },
                  },
                ],
                line: 210,
              },
              37: {
                loc: {
                  start: { line: 210, column: 62 },
                  end: { line: 210, column: 132 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 210, column: 62 },
                    end: { line: 210, column: 103 },
                  },
                  {
                    start: { line: 210, column: 107 },
                    end: { line: 210, column: 132 },
                  },
                ],
                line: 210,
              },
              38: {
                loc: {
                  start: { line: 211, column: 53 },
                  end: { line: 211, column: 179 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 211, column: 54 },
                    end: { line: 211, column: 159 },
                  },
                  {
                    start: { line: 211, column: 164 },
                    end: { line: 211, column: 179 },
                  },
                ],
                line: 211,
              },
              39: {
                loc: {
                  start: { line: 211, column: 54 },
                  end: { line: 211, column: 159 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 211, column: 129 },
                    end: { line: 211, column: 135 },
                  },
                  {
                    start: { line: 211, column: 138 },
                    end: { line: 211, column: 159 },
                  },
                ],
                line: 211,
              },
              40: {
                loc: {
                  start: { line: 211, column: 54 },
                  end: { line: 211, column: 126 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 211, column: 54 },
                    end: { line: 211, column: 96 },
                  },
                  {
                    start: { line: 211, column: 100 },
                    end: { line: 211, column: 126 },
                  },
                ],
                line: 211,
              },
              41: {
                loc: {
                  start: { line: 234, column: 12 },
                  end: { line: 234, column: 68 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 234, column: 12 },
                    end: { line: 234, column: 68 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 234,
              },
              42: {
                loc: {
                  start: { line: 234, column: 16 },
                  end: { line: 234, column: 59 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 234, column: 16 },
                    end: { line: 234, column: 35 },
                  },
                  {
                    start: { line: 234, column: 39 },
                    end: { line: 234, column: 59 },
                  },
                ],
                line: 234,
              },
              43: {
                loc: {
                  start: { line: 237, column: 12 },
                  end: { line: 237, column: 57 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 237, column: 12 },
                    end: { line: 237, column: 57 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 237,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
              94: 0,
              95: 0,
              96: 0,
              97: 0,
              98: 0,
              99: 0,
              100: 0,
              101: 0,
              102: 0,
              103: 0,
              104: 0,
              105: 0,
              106: 0,
              107: 0,
              108: 0,
              109: 0,
              110: 0,
              111: 0,
              112: 0,
              113: 0,
              114: 0,
              115: 0,
              116: 0,
              117: 0,
              118: 0,
              119: 0,
              120: 0,
              121: 0,
              122: 0,
              123: 0,
              124: 0,
              125: 0,
              126: 0,
              127: 0,
              128: 0,
              129: 0,
              130: 0,
              131: 0,
              132: 0,
              133: 0,
              134: 0,
              135: 0,
              136: 0,
              137: 0,
              138: 0,
              139: 0,
              140: 0,
              141: 0,
              142: 0,
              143: 0,
              144: 0,
              145: 0,
              146: 0,
              147: 0,
              148: 0,
              149: 0,
              150: 0,
              151: 0,
              152: 0,
              153: 0,
              154: 0,
              155: 0,
              156: 0,
              157: 0,
              158: 0,
              159: 0,
              160: 0,
              161: 0,
              162: 0,
              163: 0,
              164: 0,
              165: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
            },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0, 0],
              28: [0, 0],
              29: [0, 0],
              30: [0, 0],
              31: [0, 0],
              32: [0, 0],
              33: [0, 0],
              34: [0, 0],
              35: [0, 0],
              36: [0, 0],
              37: [0, 0],
              38: [0, 0],
              39: [0, 0],
              40: [0, 0],
              41: [0, 0],
              42: [0, 0],
              43: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/react-exporter.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\nimport { BaseExporter } from './base-exporter'\nimport {\n  type BulkExportOptions,\n  type ExportMetadata,\n  type ExportOptions,\n  type ExportResult,\n  type ReactExportOptions,\n} from './types'\nimport { SlateToReactConverter } from './converters/slate-to-react'\n\nexport class ReactExporter extends BaseExporter {\n  private converter: SlateToReactConverter\n\n  constructor() {\n    super('react')\n    this.converter = new SlateToReactConverter()\n  }\n\n  async export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult> {\n    try {\n      const reactOptions = options as ReactExportOptions\n      const componentName =\n        reactOptions.componentName ||\n        this.generateComponentName(metadata?.title)\n\n      let componentCode: string\n      const additionalFiles: Array<{ name: string; content: string }> = []\n\n      // Generate component based on options\n      if (reactOptions.typescript) {\n        const { component, types } = this.converter.convertWithTypeScript(\n          content,\n          componentName\n        )\n        componentCode = component\n        additionalFiles.push({\n          name: `${componentName}.types.ts`,\n          content: types,\n        })\n      } else {\n        componentCode = this.converter.convert(content, componentName)\n      }\n\n      // Add styled version if requested\n      if (reactOptions.styleType) {\n        const { component, styles } = this.converter.generateStyledComponent(\n          content,\n          componentName,\n          reactOptions.styleType\n        )\n        componentCode = component\n\n        if (styles && reactOptions.styleType === 'css-modules') {\n          additionalFiles.push({\n            name: `${componentName}.module.css`,\n            content: styles,\n          })\n        }\n      }\n\n      // Add documentation if requested\n      if (reactOptions.includeDocs) {\n        additionalFiles.push({\n          name: 'README.md',\n          content: this.generateDocumentation(\n            componentName,\n            reactOptions,\n            metadata\n          ),\n        })\n      }\n\n      // For single file export, return just the component\n      if (additionalFiles.length === 0) {\n        const fileName =\n          options.fileName ||\n          `${componentName}.${reactOptions.typescript ? 'tsx' : 'jsx'}`\n        const mimeType = reactOptions.typescript\n          ? 'text/typescript'\n          : 'text/javascript'\n        const blob = this.createBlob(componentCode, mimeType)\n\n        return {\n          success: true,\n          data: blob,\n          fileName,\n          mimeType,\n        }\n      }\n\n      // For multiple files, create a simple archive (in real implementation, use JSZip)\n      const allFiles = [\n        {\n          name: `${componentName}.${reactOptions.typescript ? 'tsx' : 'jsx'}`,\n          content: componentCode,\n        },\n        ...additionalFiles,\n      ]\n\n      const archiveContent = this.createSimpleArchive(allFiles)\n      const fileName = options.fileName || `${componentName}-export.tar`\n      const blob = this.createBlob(archiveContent, 'application/x-tar')\n\n      return {\n        success: true,\n        data: blob,\n        fileName,\n        mimeType: 'application/x-tar',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  async bulkExport(options: BulkExportOptions): Promise<ExportResult> {\n    try {\n      const { notes, format } = options\n\n      if (format !== 'react') {\n        throw new Error('Invalid format for React exporter')\n      }\n\n      // Generate a component for each note\n      const components: Array<{ name: string; content: string }> = []\n\n      notes.forEach((note, index) => {\n        const componentName = this.generateComponentName(\n          note.metadata?.title || `Note${index + 1}`\n        )\n        const componentCode = this.converter.convert(\n          note.content,\n          componentName\n        )\n\n        components.push({\n          name: `${componentName}.jsx`,\n          content: componentCode,\n        })\n      })\n\n      // Create an index file that exports all components\n      const indexContent = this.generateIndexFile(components)\n      components.push({\n        name: 'index.js',\n        content: indexContent,\n      })\n\n      // Create documentation\n      components.push({\n        name: 'README.md',\n        content: this.generateBulkDocumentation(notes),\n      })\n\n      const archiveContent = this.createSimpleArchive(components)\n      const fileName = this.generateFileName('react-components', 'tar')\n      const blob = this.createBlob(archiveContent, 'application/x-tar')\n\n      return {\n        success: true,\n        data: blob,\n        fileName,\n        mimeType: 'application/x-tar',\n      }\n    } catch (error) {\n      return this.handleError(error)\n    }\n  }\n\n  private generateComponentName(title?: string): string {\n    if (!title) return 'ExportedNote'\n\n    // Convert title to PascalCase component name\n    return title\n      .replace(/[^a-zA-Z0-9\\s]/g, '') // Remove special characters\n      .split(/\\s+/)\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join('')\n  }\n\n  private generateDocumentation(\n    componentName: string,\n    options: ReactExportOptions,\n    metadata?: ExportMetadata\n  ): string {\n    const sections: string[] = []\n\n    sections.push(`# ${componentName}`)\n    sections.push('')\n\n    if (metadata?.description) {\n      sections.push(metadata.description)\n      sections.push('')\n    }\n\n    sections.push('## Installation')\n    sections.push('')\n    sections.push('```bash')\n    sections.push(`# Copy the component files to your project`)\n    sections.push(\n      `cp ${componentName}.${options.typescript ? 'tsx' : 'jsx'} /path/to/your/components/`\n    )\n\n    if (options.styleType === 'css-modules') {\n      sections.push(`cp ${componentName}.module.css /path/to/your/components/`)\n    }\n\n    sections.push('```')\n    sections.push('')\n\n    sections.push('## Usage')\n    sections.push('')\n    sections.push('```jsx')\n    sections.push(\n      `import ${componentName} from './components/${componentName}';`\n    )\n    sections.push('')\n    sections.push('function App() {')\n    sections.push('  return (')\n    sections.push('    <div>')\n    sections.push(`      <${componentName} />`)\n    sections.push('    </div>')\n    sections.push('  );')\n    sections.push('}')\n    sections.push('```')\n    sections.push('')\n\n    if (options.includeProps && options.typescript) {\n      sections.push('## Props')\n      sections.push('')\n      sections.push('| Prop | Type | Description |')\n      sections.push('|------|------|-------------|')\n      sections.push('| className | string | Optional CSS class name |')\n      sections.push('| style | CSSProperties | Optional inline styles |')\n      sections.push(\n        '| onContentClick | MouseEventHandler | Click handler for content |'\n      )\n      sections.push('')\n    }\n\n    if (options.styleType) {\n      sections.push('## Styling')\n      sections.push('')\n\n      switch (options.styleType) {\n        case 'css-in-js':\n          sections.push('This component uses styled-components for styling.')\n          sections.push('Make sure you have styled-components installed:')\n          sections.push('')\n          sections.push('```bash')\n          sections.push('npm install styled-components')\n          sections.push('```')\n          break\n\n        case 'css-modules':\n          sections.push('This component uses CSS Modules for styling.')\n          sections.push('Make sure your build system supports CSS Modules.')\n          break\n\n        case 'inline':\n          sections.push('This component uses inline styles.')\n          sections.push(\n            'You can customize the styles by modifying the styles object.'\n          )\n          break\n      }\n      sections.push('')\n    }\n\n    if (metadata) {\n      sections.push('## Metadata')\n      sections.push('')\n      if (metadata.title) sections.push(`- **Title**: ${metadata.title}`)\n      if (metadata.author) sections.push(`- **Author**: ${metadata.author}`)\n      if (metadata.createdAt)\n        sections.push(\n          `- **Created**: ${metadata.createdAt.toLocaleDateString()}`\n        )\n      if (metadata.tags?.length)\n        sections.push(`- **Tags**: ${metadata.tags.join(', ')}`)\n      sections.push('')\n    }\n\n    sections.push('## License')\n    sections.push('')\n    sections.push('This component is exported from Notable.')\n    sections.push('')\n\n    return sections.join('\\n')\n  }\n\n  private generateBulkDocumentation(\n    notes: Array<{\n      id: string\n      content: Descendant[]\n      metadata?: ExportMetadata\n    }>\n  ): string {\n    const sections: string[] = []\n\n    sections.push('# Exported React Components')\n    sections.push('')\n    sections.push(\n      'This archive contains React components exported from Notable.'\n    )\n    sections.push('')\n\n    sections.push('## Components')\n    sections.push('')\n\n    notes.forEach((note, index) => {\n      const componentName = this.generateComponentName(\n        note.metadata?.title || `Note${index + 1}`\n      )\n      sections.push(\n        `- **${componentName}**: ${note.metadata?.title || 'Untitled Note'}`\n      )\n    })\n\n    sections.push('')\n    sections.push('## Usage')\n    sections.push('')\n    sections.push('Import and use the components in your React application:')\n    sections.push('')\n    sections.push('```jsx')\n    sections.push(\n      \"import { Component1, Component2 } from './exported-components';\"\n    )\n    sections.push('```')\n    sections.push('')\n\n    sections.push('## Structure')\n    sections.push('')\n    sections.push('- Each `.jsx` file contains a single React component')\n    sections.push('- `index.js` exports all components for easy importing')\n    sections.push('- Components are functional and use modern React patterns')\n    sections.push('')\n\n    return sections.join('\\n')\n  }\n\n  private generateIndexFile(\n    components: Array<{ name: string; content: string }>\n  ): string {\n    const exports: string[] = []\n    const exportedNames = new Set<string>()\n\n    components.forEach(({ name }) => {\n      if (name === 'index.js' || name === 'README.md') return\n\n      const componentName = name.replace(/\\.(jsx|tsx)$/, '')\n\n      // Skip if already exported (duplicate name)\n      if (exportedNames.has(componentName)) return\n\n      exportedNames.add(componentName)\n      exports.push(\n        `export { default as ${componentName} } from './${componentName}';`\n      )\n    })\n\n    return exports.join('\\n')\n  }\n\n  private createSimpleArchive(\n    files: Array<{ name: string; content: string }>\n  ): string {\n    // In a real implementation, use JSZip or similar\n    // For now, create a simple text representation\n    let archive = '=== React Component Archive ===\\n\\n'\n\n    files.forEach(({ name, content }) => {\n      archive += `--- File: ${name} ---\\n`\n      archive += content\n      archive += '\\n\\n'\n    })\n\n    return archive\n  }\n}\n",
              ],
              names: [
                'BaseExporter',
                'SlateToReactConverter',
                'ReactExporter',
                'export',
                'content',
                'options',
                'metadata',
                'reactOptions',
                'componentName',
                'generateComponentName',
                'title',
                'componentCode',
                'additionalFiles',
                'typescript',
                'component',
                'types',
                'converter',
                'convertWithTypeScript',
                'push',
                'name',
                'convert',
                'styleType',
                'styles',
                'generateStyledComponent',
                'includeDocs',
                'generateDocumentation',
                'length',
                'fileName',
                'mimeType',
                'blob',
                'createBlob',
                'success',
                'data',
                'allFiles',
                'archiveContent',
                'createSimpleArchive',
                'error',
                'handleError',
                'bulkExport',
                'notes',
                'format',
                'Error',
                'components',
                'forEach',
                'note',
                'index',
                'indexContent',
                'generateIndexFile',
                'generateBulkDocumentation',
                'generateFileName',
                'replace',
                'split',
                'map',
                'word',
                'charAt',
                'toUpperCase',
                'slice',
                'toLowerCase',
                'join',
                'sections',
                'description',
                'includeProps',
                'author',
                'createdAt',
                'toLocaleDateString',
                'tags',
                'exports',
                'exportedNames',
                'Set',
                'has',
                'add',
                'files',
                'archive',
                'constructor',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '99f9d5387e195a4376a44f4b396efb7ed8c0e428',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '99f9d5387e195a4376a44f4b396efb7ed8c0e428' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_1w6qoj43k2 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_1w6qoj43k2()
      class ReactExporter extends BaseExporter {
        async export(content, options, metadata) {
          ;(cov_1w6qoj43k2().f[0]++, cov_1w6qoj43k2().s[0]++)
          try {
            const reactOptions = (cov_1w6qoj43k2().s[1]++, options),
              componentName =
                (cov_1w6qoj43k2().s[2]++,
                cov_1w6qoj43k2().b[0][0]++,
                reactOptions.componentName ||
                  (cov_1w6qoj43k2().b[0][1]++,
                  this.generateComponentName(
                    (cov_1w6qoj43k2().b[2][0]++,
                    null === metadata ||
                    (cov_1w6qoj43k2().b[2][1]++, void 0 === metadata)
                      ? void cov_1w6qoj43k2().b[1][0]++
                      : (cov_1w6qoj43k2().b[1][1]++, metadata.title))
                  )))
            let componentCode
            const additionalFiles = (cov_1w6qoj43k2().s[3]++, [])
            if ((cov_1w6qoj43k2().s[4]++, reactOptions.typescript)) {
              cov_1w6qoj43k2().b[3][0]++
              const { component, types } =
                (cov_1w6qoj43k2().s[5]++,
                this.converter.convertWithTypeScript(content, componentName))
              ;(cov_1w6qoj43k2().s[6]++,
                (componentCode = component),
                cov_1w6qoj43k2().s[7]++,
                additionalFiles.push({
                  name: `${componentName}.types.ts`,
                  content: types,
                }))
            } else
              (cov_1w6qoj43k2().b[3][1]++,
                cov_1w6qoj43k2().s[8]++,
                (componentCode = this.converter.convert(
                  content,
                  componentName
                )))
            if ((cov_1w6qoj43k2().s[9]++, reactOptions.styleType)) {
              cov_1w6qoj43k2().b[4][0]++
              const { component, styles } =
                (cov_1w6qoj43k2().s[10]++,
                this.converter.generateStyledComponent(
                  content,
                  componentName,
                  reactOptions.styleType
                ))
              ;(cov_1w6qoj43k2().s[11]++,
                (componentCode = component),
                cov_1w6qoj43k2().s[12]++,
                cov_1w6qoj43k2().b[6][0]++,
                styles &&
                (cov_1w6qoj43k2().b[6][1]++,
                'css-modules' === reactOptions.styleType)
                  ? (cov_1w6qoj43k2().b[5][0]++,
                    cov_1w6qoj43k2().s[13]++,
                    additionalFiles.push({
                      name: `${componentName}.module.css`,
                      content: styles,
                    }))
                  : cov_1w6qoj43k2().b[5][1]++)
            } else cov_1w6qoj43k2().b[4][1]++
            if (
              (cov_1w6qoj43k2().s[14]++,
              reactOptions.includeDocs
                ? (cov_1w6qoj43k2().b[7][0]++,
                  cov_1w6qoj43k2().s[15]++,
                  additionalFiles.push({
                    name: 'README.md',
                    content: this.generateDocumentation(
                      componentName,
                      reactOptions,
                      metadata
                    ),
                  }))
                : cov_1w6qoj43k2().b[7][1]++,
              cov_1w6qoj43k2().s[16]++,
              0 === additionalFiles.length)
            ) {
              cov_1w6qoj43k2().b[8][0]++
              const fileName =
                  (cov_1w6qoj43k2().s[17]++,
                  cov_1w6qoj43k2().b[9][0]++,
                  options.fileName ||
                    (cov_1w6qoj43k2().b[9][1]++,
                    `${componentName}.${reactOptions.typescript ? (cov_1w6qoj43k2().b[10][0]++, 'tsx') : (cov_1w6qoj43k2().b[10][1]++, 'jsx')}`)),
                mimeType =
                  (cov_1w6qoj43k2().s[18]++,
                  reactOptions.typescript
                    ? (cov_1w6qoj43k2().b[11][0]++, 'text/typescript')
                    : (cov_1w6qoj43k2().b[11][1]++, 'text/javascript')),
                blob =
                  (cov_1w6qoj43k2().s[19]++,
                  this.createBlob(componentCode, mimeType))
              return (
                cov_1w6qoj43k2().s[20]++,
                { success: !0, data: blob, fileName, mimeType }
              )
            }
            cov_1w6qoj43k2().b[8][1]++
            const allFiles =
                (cov_1w6qoj43k2().s[21]++,
                [
                  {
                    name: `${componentName}.${reactOptions.typescript ? (cov_1w6qoj43k2().b[12][0]++, 'tsx') : (cov_1w6qoj43k2().b[12][1]++, 'jsx')}`,
                    content: componentCode,
                  },
                  ...additionalFiles,
                ]),
              archiveContent =
                (cov_1w6qoj43k2().s[22]++, this.createSimpleArchive(allFiles)),
              fileName =
                (cov_1w6qoj43k2().s[23]++,
                cov_1w6qoj43k2().b[13][0]++,
                options.fileName ||
                  (cov_1w6qoj43k2().b[13][1]++, `${componentName}-export.tar`)),
              blob =
                (cov_1w6qoj43k2().s[24]++,
                this.createBlob(archiveContent, 'application/x-tar'))
            return (
              cov_1w6qoj43k2().s[25]++,
              {
                success: !0,
                data: blob,
                fileName,
                mimeType: 'application/x-tar',
              }
            )
          } catch (error) {
            return (cov_1w6qoj43k2().s[26]++, this.handleError(error))
          }
        }
        async bulkExport(options) {
          ;(cov_1w6qoj43k2().f[1]++, cov_1w6qoj43k2().s[27]++)
          try {
            const { notes, format } = (cov_1w6qoj43k2().s[28]++, options)
            if ((cov_1w6qoj43k2().s[29]++, 'react' !== format))
              throw (
                cov_1w6qoj43k2().b[14][0]++,
                cov_1w6qoj43k2().s[30]++,
                new Error('Invalid format for React exporter')
              )
            cov_1w6qoj43k2().b[14][1]++
            const components = (cov_1w6qoj43k2().s[31]++, [])
            ;(cov_1w6qoj43k2().s[32]++,
              notes.forEach((note, index) => {
                var _note_metadata
                cov_1w6qoj43k2().f[2]++
                const componentName =
                    (cov_1w6qoj43k2().s[33]++,
                    this.generateComponentName(
                      (cov_1w6qoj43k2().b[15][0]++,
                      cov_1w6qoj43k2().b[17][0]++,
                      (null === (_note_metadata = note.metadata) ||
                      (cov_1w6qoj43k2().b[17][1]++, void 0 === _note_metadata)
                        ? void cov_1w6qoj43k2().b[16][0]++
                        : (cov_1w6qoj43k2().b[16][1]++,
                          _note_metadata.title)) ||
                        (cov_1w6qoj43k2().b[15][1]++, `Note${index + 1}`))
                    )),
                  componentCode =
                    (cov_1w6qoj43k2().s[34]++,
                    this.converter.convert(note.content, componentName))
                ;(cov_1w6qoj43k2().s[35]++,
                  components.push({
                    name: `${componentName}.jsx`,
                    content: componentCode,
                  }))
              }))
            const indexContent =
              (cov_1w6qoj43k2().s[36]++, this.generateIndexFile(components))
            ;(cov_1w6qoj43k2().s[37]++,
              components.push({ name: 'index.js', content: indexContent }),
              cov_1w6qoj43k2().s[38]++,
              components.push({
                name: 'README.md',
                content: this.generateBulkDocumentation(notes),
              }))
            const archiveContent =
                (cov_1w6qoj43k2().s[39]++,
                this.createSimpleArchive(components)),
              fileName =
                (cov_1w6qoj43k2().s[40]++,
                this.generateFileName('react-components', 'tar')),
              blob =
                (cov_1w6qoj43k2().s[41]++,
                this.createBlob(archiveContent, 'application/x-tar'))
            return (
              cov_1w6qoj43k2().s[42]++,
              {
                success: !0,
                data: blob,
                fileName,
                mimeType: 'application/x-tar',
              }
            )
          } catch (error) {
            return (cov_1w6qoj43k2().s[43]++, this.handleError(error))
          }
        }
        generateComponentName(title) {
          return (
            cov_1w6qoj43k2().f[3]++,
            cov_1w6qoj43k2().s[44]++,
            title
              ? (cov_1w6qoj43k2().b[18][1]++,
                cov_1w6qoj43k2().s[46]++,
                title
                  .replace(/[^a-zA-Z0-9\s]/g, '')
                  .split(/\s+/)
                  .map(
                    (word) => (
                      cov_1w6qoj43k2().f[4]++,
                      cov_1w6qoj43k2().s[47]++,
                      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                    )
                  )
                  .join(''))
              : (cov_1w6qoj43k2().b[18][0]++,
                cov_1w6qoj43k2().s[45]++,
                'ExportedNote')
          )
        }
        generateDocumentation(componentName, options, metadata) {
          cov_1w6qoj43k2().f[5]++
          const sections = (cov_1w6qoj43k2().s[48]++, [])
          if (
            (cov_1w6qoj43k2().s[49]++,
            sections.push(`# ${componentName}`),
            cov_1w6qoj43k2().s[50]++,
            sections.push(''),
            cov_1w6qoj43k2().s[51]++,
            cov_1w6qoj43k2().b[21][0]++,
            (
              null === metadata ||
              (cov_1w6qoj43k2().b[21][1]++, void 0 === metadata)
                ? void cov_1w6qoj43k2().b[20][0]++
                : (cov_1w6qoj43k2().b[20][1]++, metadata.description)
            )
              ? (cov_1w6qoj43k2().b[19][0]++,
                cov_1w6qoj43k2().s[52]++,
                sections.push(metadata.description),
                cov_1w6qoj43k2().s[53]++,
                sections.push(''))
              : cov_1w6qoj43k2().b[19][1]++,
            cov_1w6qoj43k2().s[54]++,
            sections.push('## Installation'),
            cov_1w6qoj43k2().s[55]++,
            sections.push(''),
            cov_1w6qoj43k2().s[56]++,
            sections.push('```bash'),
            cov_1w6qoj43k2().s[57]++,
            sections.push('# Copy the component files to your project'),
            cov_1w6qoj43k2().s[58]++,
            sections.push(
              `cp ${componentName}.${options.typescript ? (cov_1w6qoj43k2().b[22][0]++, 'tsx') : (cov_1w6qoj43k2().b[22][1]++, 'jsx')} /path/to/your/components/`
            ),
            cov_1w6qoj43k2().s[59]++,
            'css-modules' === options.styleType
              ? (cov_1w6qoj43k2().b[23][0]++,
                cov_1w6qoj43k2().s[60]++,
                sections.push(
                  `cp ${componentName}.module.css /path/to/your/components/`
                ))
              : cov_1w6qoj43k2().b[23][1]++,
            cov_1w6qoj43k2().s[61]++,
            sections.push('```'),
            cov_1w6qoj43k2().s[62]++,
            sections.push(''),
            cov_1w6qoj43k2().s[63]++,
            sections.push('## Usage'),
            cov_1w6qoj43k2().s[64]++,
            sections.push(''),
            cov_1w6qoj43k2().s[65]++,
            sections.push('```jsx'),
            cov_1w6qoj43k2().s[66]++,
            sections.push(
              `import ${componentName} from './components/${componentName}';`
            ),
            cov_1w6qoj43k2().s[67]++,
            sections.push(''),
            cov_1w6qoj43k2().s[68]++,
            sections.push('function App() {'),
            cov_1w6qoj43k2().s[69]++,
            sections.push('  return ('),
            cov_1w6qoj43k2().s[70]++,
            sections.push('    <div>'),
            cov_1w6qoj43k2().s[71]++,
            sections.push(`      <${componentName} />`),
            cov_1w6qoj43k2().s[72]++,
            sections.push('    </div>'),
            cov_1w6qoj43k2().s[73]++,
            sections.push('  );'),
            cov_1w6qoj43k2().s[74]++,
            sections.push('}'),
            cov_1w6qoj43k2().s[75]++,
            sections.push('```'),
            cov_1w6qoj43k2().s[76]++,
            sections.push(''),
            cov_1w6qoj43k2().s[77]++,
            cov_1w6qoj43k2().b[25][0]++,
            options.includeProps &&
            (cov_1w6qoj43k2().b[25][1]++, options.typescript)
              ? (cov_1w6qoj43k2().b[24][0]++,
                cov_1w6qoj43k2().s[78]++,
                sections.push('## Props'),
                cov_1w6qoj43k2().s[79]++,
                sections.push(''),
                cov_1w6qoj43k2().s[80]++,
                sections.push('| Prop | Type | Description |'),
                cov_1w6qoj43k2().s[81]++,
                sections.push('|------|------|-------------|'),
                cov_1w6qoj43k2().s[82]++,
                sections.push(
                  '| className | string | Optional CSS class name |'
                ),
                cov_1w6qoj43k2().s[83]++,
                sections.push(
                  '| style | CSSProperties | Optional inline styles |'
                ),
                cov_1w6qoj43k2().s[84]++,
                sections.push(
                  '| onContentClick | MouseEventHandler | Click handler for content |'
                ),
                cov_1w6qoj43k2().s[85]++,
                sections.push(''))
              : cov_1w6qoj43k2().b[24][1]++,
            cov_1w6qoj43k2().s[86]++,
            options.styleType)
          ) {
            switch (
              (cov_1w6qoj43k2().b[26][0]++,
              cov_1w6qoj43k2().s[87]++,
              sections.push('## Styling'),
              cov_1w6qoj43k2().s[88]++,
              sections.push(''),
              cov_1w6qoj43k2().s[89]++,
              options.styleType)
            ) {
              case 'css-in-js':
                ;(cov_1w6qoj43k2().b[27][0]++,
                  cov_1w6qoj43k2().s[90]++,
                  sections.push(
                    'This component uses styled-components for styling.'
                  ),
                  cov_1w6qoj43k2().s[91]++,
                  sections.push(
                    'Make sure you have styled-components installed:'
                  ),
                  cov_1w6qoj43k2().s[92]++,
                  sections.push(''),
                  cov_1w6qoj43k2().s[93]++,
                  sections.push('```bash'),
                  cov_1w6qoj43k2().s[94]++,
                  sections.push('npm install styled-components'),
                  cov_1w6qoj43k2().s[95]++,
                  sections.push('```'),
                  cov_1w6qoj43k2().s[96]++)
                break
              case 'css-modules':
                ;(cov_1w6qoj43k2().b[27][1]++,
                  cov_1w6qoj43k2().s[97]++,
                  sections.push('This component uses CSS Modules for styling.'),
                  cov_1w6qoj43k2().s[98]++,
                  sections.push(
                    'Make sure your build system supports CSS Modules.'
                  ),
                  cov_1w6qoj43k2().s[99]++)
                break
              case 'inline':
                ;(cov_1w6qoj43k2().b[27][2]++,
                  cov_1w6qoj43k2().s[100]++,
                  sections.push('This component uses inline styles.'),
                  cov_1w6qoj43k2().s[101]++,
                  sections.push(
                    'You can customize the styles by modifying the styles object.'
                  ),
                  cov_1w6qoj43k2().s[102]++)
            }
            ;(cov_1w6qoj43k2().s[103]++, sections.push(''))
          } else cov_1w6qoj43k2().b[26][1]++
          var _metadata_tags
          ;(cov_1w6qoj43k2().s[104]++, metadata)
            ? (cov_1w6qoj43k2().b[28][0]++,
              cov_1w6qoj43k2().s[105]++,
              sections.push('## Metadata'),
              cov_1w6qoj43k2().s[106]++,
              sections.push(''),
              cov_1w6qoj43k2().s[107]++,
              metadata.title
                ? (cov_1w6qoj43k2().b[29][0]++,
                  cov_1w6qoj43k2().s[108]++,
                  sections.push(`- **Title**: ${metadata.title}`))
                : cov_1w6qoj43k2().b[29][1]++,
              cov_1w6qoj43k2().s[109]++,
              metadata.author
                ? (cov_1w6qoj43k2().b[30][0]++,
                  cov_1w6qoj43k2().s[110]++,
                  sections.push(`- **Author**: ${metadata.author}`))
                : cov_1w6qoj43k2().b[30][1]++,
              cov_1w6qoj43k2().s[111]++,
              metadata.createdAt
                ? (cov_1w6qoj43k2().b[31][0]++,
                  cov_1w6qoj43k2().s[112]++,
                  sections.push(
                    `- **Created**: ${metadata.createdAt.toLocaleDateString()}`
                  ))
                : cov_1w6qoj43k2().b[31][1]++,
              cov_1w6qoj43k2().s[113]++,
              cov_1w6qoj43k2().b[34][0]++,
              (
                null === (_metadata_tags = metadata.tags) ||
                (cov_1w6qoj43k2().b[34][1]++, void 0 === _metadata_tags)
                  ? void cov_1w6qoj43k2().b[33][0]++
                  : (cov_1w6qoj43k2().b[33][1]++, _metadata_tags.length)
              )
                ? (cov_1w6qoj43k2().b[32][0]++,
                  cov_1w6qoj43k2().s[114]++,
                  sections.push(`- **Tags**: ${metadata.tags.join(', ')}`))
                : cov_1w6qoj43k2().b[32][1]++,
              cov_1w6qoj43k2().s[115]++,
              sections.push(''))
            : cov_1w6qoj43k2().b[28][1]++
          return (
            cov_1w6qoj43k2().s[116]++,
            sections.push('## License'),
            cov_1w6qoj43k2().s[117]++,
            sections.push(''),
            cov_1w6qoj43k2().s[118]++,
            sections.push('This component is exported from Notable.'),
            cov_1w6qoj43k2().s[119]++,
            sections.push(''),
            cov_1w6qoj43k2().s[120]++,
            sections.join('\n')
          )
        }
        generateBulkDocumentation(notes) {
          cov_1w6qoj43k2().f[6]++
          const sections = (cov_1w6qoj43k2().s[121]++, [])
          return (
            cov_1w6qoj43k2().s[122]++,
            sections.push('# Exported React Components'),
            cov_1w6qoj43k2().s[123]++,
            sections.push(''),
            cov_1w6qoj43k2().s[124]++,
            sections.push(
              'This archive contains React components exported from Notable.'
            ),
            cov_1w6qoj43k2().s[125]++,
            sections.push(''),
            cov_1w6qoj43k2().s[126]++,
            sections.push('## Components'),
            cov_1w6qoj43k2().s[127]++,
            sections.push(''),
            cov_1w6qoj43k2().s[128]++,
            notes.forEach((note, index) => {
              var _note_metadata, _note_metadata1
              cov_1w6qoj43k2().f[7]++
              const componentName =
                (cov_1w6qoj43k2().s[129]++,
                this.generateComponentName(
                  (cov_1w6qoj43k2().b[35][0]++,
                  cov_1w6qoj43k2().b[37][0]++,
                  (null === (_note_metadata = note.metadata) ||
                  (cov_1w6qoj43k2().b[37][1]++, void 0 === _note_metadata)
                    ? void cov_1w6qoj43k2().b[36][0]++
                    : (cov_1w6qoj43k2().b[36][1]++, _note_metadata.title)) ||
                    (cov_1w6qoj43k2().b[35][1]++, `Note${index + 1}`))
                ))
              ;(cov_1w6qoj43k2().s[130]++,
                sections.push(
                  `- **${componentName}**: ${(cov_1w6qoj43k2().b[38][0]++, cov_1w6qoj43k2().b[40][0]++, (null === (_note_metadata1 = note.metadata) || (cov_1w6qoj43k2().b[40][1]++, void 0 === _note_metadata1) ? void cov_1w6qoj43k2().b[39][0]++ : (cov_1w6qoj43k2().b[39][1]++, _note_metadata1.title)) || (cov_1w6qoj43k2().b[38][1]++, 'Untitled Note'))}`
                ))
            }),
            cov_1w6qoj43k2().s[131]++,
            sections.push(''),
            cov_1w6qoj43k2().s[132]++,
            sections.push('## Usage'),
            cov_1w6qoj43k2().s[133]++,
            sections.push(''),
            cov_1w6qoj43k2().s[134]++,
            sections.push(
              'Import and use the components in your React application:'
            ),
            cov_1w6qoj43k2().s[135]++,
            sections.push(''),
            cov_1w6qoj43k2().s[136]++,
            sections.push('```jsx'),
            cov_1w6qoj43k2().s[137]++,
            sections.push(
              "import { Component1, Component2 } from './exported-components';"
            ),
            cov_1w6qoj43k2().s[138]++,
            sections.push('```'),
            cov_1w6qoj43k2().s[139]++,
            sections.push(''),
            cov_1w6qoj43k2().s[140]++,
            sections.push('## Structure'),
            cov_1w6qoj43k2().s[141]++,
            sections.push(''),
            cov_1w6qoj43k2().s[142]++,
            sections.push(
              '- Each `.jsx` file contains a single React component'
            ),
            cov_1w6qoj43k2().s[143]++,
            sections.push(
              '- `index.js` exports all components for easy importing'
            ),
            cov_1w6qoj43k2().s[144]++,
            sections.push(
              '- Components are functional and use modern React patterns'
            ),
            cov_1w6qoj43k2().s[145]++,
            sections.push(''),
            cov_1w6qoj43k2().s[146]++,
            sections.join('\n')
          )
        }
        generateIndexFile(components) {
          cov_1w6qoj43k2().f[8]++
          const exports = (cov_1w6qoj43k2().s[147]++, []),
            exportedNames = (cov_1w6qoj43k2().s[148]++, new Set())
          return (
            cov_1w6qoj43k2().s[149]++,
            components.forEach(({ name }) => {
              if (
                (cov_1w6qoj43k2().f[9]++,
                cov_1w6qoj43k2().s[150]++,
                cov_1w6qoj43k2().b[42][0]++,
                'index.js' === name ||
                  (cov_1w6qoj43k2().b[42][1]++, 'README.md' === name))
              )
                return (
                  cov_1w6qoj43k2().b[41][0]++,
                  void cov_1w6qoj43k2().s[151]++
                )
              cov_1w6qoj43k2().b[41][1]++
              const componentName =
                (cov_1w6qoj43k2().s[152]++, name.replace(/\.(jsx|tsx)$/, ''))
              if ((cov_1w6qoj43k2().s[153]++, exportedNames.has(componentName)))
                return (
                  cov_1w6qoj43k2().b[43][0]++,
                  void cov_1w6qoj43k2().s[154]++
                )
              ;(cov_1w6qoj43k2().b[43][1]++,
                cov_1w6qoj43k2().s[155]++,
                exportedNames.add(componentName),
                cov_1w6qoj43k2().s[156]++,
                exports.push(
                  `export { default as ${componentName} } from './${componentName}';`
                ))
            }),
            cov_1w6qoj43k2().s[157]++,
            exports.join('\n')
          )
        }
        createSimpleArchive(files) {
          cov_1w6qoj43k2().f[10]++
          let archive =
            (cov_1w6qoj43k2().s[158]++, '=== React Component Archive ===\n\n')
          return (
            cov_1w6qoj43k2().s[159]++,
            files.forEach(({ name, content }) => {
              ;(cov_1w6qoj43k2().f[11]++,
                cov_1w6qoj43k2().s[160]++,
                (archive += `--- File: ${name} ---\n`),
                cov_1w6qoj43k2().s[161]++,
                (archive += content),
                cov_1w6qoj43k2().s[162]++,
                (archive += '\n\n'))
            }),
            cov_1w6qoj43k2().s[163]++,
            archive
          )
        }
        constructor() {
          ;(cov_1w6qoj43k2().f[12]++,
            cov_1w6qoj43k2().s[164]++,
            super('react'),
            cov_1w6qoj43k2().s[165]++,
            (this.converter = new SlateToReactConverter()))
        }
      }
      function cov_10xws9xtog() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/types.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '3067f8e26cb4a7f9db2cd7ba0fdbf9d843e624a3' === coverage[path].hash) ||
          (coverage[path] = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/types.ts',
            statementMap: {},
            fnMap: {},
            branchMap: {},
            s: {},
            f: {},
            b: {},
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/types.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\n\nexport type ExportFormat = 'markdown' | 'pdf' | 'html' | 'react'\n\nexport interface ExportOptions {\n  format: ExportFormat\n  includeMetadata?: boolean\n  theme?: 'light' | 'dark' | 'custom'\n  customCSS?: string\n  fileName?: string\n}\n\nexport interface MarkdownExportOptions extends ExportOptions {\n  format: 'markdown'\n  flavor?: 'standard' | 'gfm' // GitHub Flavored Markdown\n  includeImages?: boolean\n  imageHandling?: 'embed' | 'link'\n}\n\nexport interface PDFExportOptions extends ExportOptions {\n  format: 'pdf'\n  pageSize?: 'A4' | 'Letter' | 'Legal'\n  orientation?: 'portrait' | 'landscape'\n  margins?: {\n    top: number\n    right: number\n    bottom: number\n    left: number\n  }\n  includePageNumbers?: boolean\n  includeTableOfContents?: boolean\n  headerText?: string\n  footerText?: string\n}\n\nexport interface HTMLExportOptions extends ExportOptions {\n  format: 'html'\n  selfContained?: boolean // Embed CSS/JS or link externally\n  includeSearch?: boolean\n  includeNavigation?: boolean\n  responsiveDesign?: boolean\n}\n\nexport interface ReactExportOptions extends ExportOptions {\n  format: 'react'\n  typescript?: boolean\n  componentName?: string\n  styleType?: 'css-in-js' | 'css-modules' | 'inline'\n  includeProps?: boolean\n  includeDocs?: boolean\n}\n\nexport interface ExportMetadata {\n  title?: string\n  author?: string\n  createdAt?: Date\n  updatedAt?: Date\n  tags?: string[]\n  description?: string\n}\n\nexport interface ExportResult {\n  success: boolean\n  data?: Blob | string\n  fileName: string\n  mimeType: string\n  error?: string\n}\n\nexport interface BulkExportOptions {\n  notes: Array<{\n    id: string\n    content: Descendant[]\n    metadata?: ExportMetadata\n  }>\n  format: ExportFormat\n  archiveType?: 'zip' | 'tar'\n  folderStructure?: boolean\n}\n\nexport interface ExportService {\n  export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult>\n\n  bulkExport(options: BulkExportOptions): Promise<ExportResult>\n\n  getSupportedFormats(): ExportFormat[]\n}\n",
              ],
              names: [],
              mappings: 'AAgFA,WAUC',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '3067f8e26cb4a7f9db2cd7ba0fdbf9d843e624a3',
          })
        var actualCoverage = coverage[path]
        return (
          (cov_10xws9xtog = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_10xws9xtog()
      var export_service_console = __webpack_require__(
        '../../node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js'
      )
      function cov_2p5y8ylbj9() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/export-service.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/export-service.ts',
            statementMap: {
              0: {
                start: { line: 7, column: 25 },
                end: { line: 7, column: 59 },
              },
              1: {
                start: { line: 8, column: 8 },
                end: { line: 15, column: 9 },
              },
              2: {
                start: { line: 9, column: 12 },
                end: { line: 14, column: 14 },
              },
              3: {
                start: { line: 16, column: 8 },
                end: { line: 16, column: 59 },
              },
              4: {
                start: { line: 19, column: 25 },
                end: { line: 19, column: 59 },
              },
              5: {
                start: { line: 20, column: 8 },
                end: { line: 27, column: 9 },
              },
              6: {
                start: { line: 21, column: 12 },
                end: { line: 26, column: 14 },
              },
              7: {
                start: { line: 28, column: 8 },
                end: { line: 28, column: 44 },
              },
              8: {
                start: { line: 31, column: 8 },
                end: { line: 31, column: 49 },
              },
              9: {
                start: { line: 35, column: 8 },
                end: { line: 38, column: 9 },
              },
              10: {
                start: { line: 36, column: 12 },
                end: { line: 36, column: 58 },
              },
              11: {
                start: { line: 37, column: 12 },
                end: { line: 37, column: 19 },
              },
              12: {
                start: { line: 39, column: 21 },
                end: { line: 41, column: 10 },
              },
              13: {
                start: { line: 42, column: 20 },
                end: { line: 42, column: 45 },
              },
              14: {
                start: { line: 43, column: 21 },
                end: { line: 43, column: 48 },
              },
              15: {
                start: { line: 44, column: 8 },
                end: { line: 44, column: 24 },
              },
              16: {
                start: { line: 45, column: 8 },
                end: { line: 45, column: 40 },
              },
              17: {
                start: { line: 46, column: 8 },
                end: { line: 46, column: 36 },
              },
              18: {
                start: { line: 47, column: 8 },
                end: { line: 47, column: 40 },
              },
              19: {
                start: { line: 48, column: 8 },
                end: { line: 48, column: 21 },
              },
              20: {
                start: { line: 50, column: 8 },
                end: { line: 53, column: 16 },
              },
              21: {
                start: { line: 51, column: 12 },
                end: { line: 51, column: 44 },
              },
              22: {
                start: { line: 52, column: 12 },
                end: { line: 52, column: 37 },
              },
              23: {
                start: { line: 57, column: 30 },
                end: { line: 82, column: 9 },
              },
              24: {
                start: { line: 83, column: 8 },
                end: { line: 87, column: 10 },
              },
              25: {
                start: { line: 91, column: 23 },
                end: { line: 91, column: 25 },
              },
              26: {
                start: { line: 92, column: 8 },
                end: { line: 96, column: 9 },
              },
              27: {
                start: { line: 93, column: 12 },
                end: { line: 93, column: 53 },
              },
              28: {
                start: { line: 94, column: 15 },
                end: { line: 96, column: 9 },
              },
              29: {
                start: { line: 95, column: 12 },
                end: { line: 95, column: 65 },
              },
              30: {
                start: { line: 98, column: 8 },
                end: { line: 119, column: 9 },
              },
              31: {
                start: { line: 100, column: 35 },
                end: { line: 100, column: 42 },
              },
              32: {
                start: { line: 101, column: 16 },
                end: { line: 107, column: 17 },
              },
              33: {
                start: { line: 106, column: 20 },
                end: { line: 106, column: 53 },
              },
              34: {
                start: { line: 108, column: 16 },
                end: { line: 108, column: 22 },
              },
              35: {
                start: { line: 110, column: 37 },
                end: { line: 110, column: 44 },
              },
              36: {
                start: { line: 111, column: 16 },
                end: { line: 117, column: 17 },
              },
              37: {
                start: { line: 116, column: 20 },
                end: { line: 116, column: 54 },
              },
              38: {
                start: { line: 118, column: 16 },
                end: { line: 118, column: 22 },
              },
              39: {
                start: { line: 120, column: 8 },
                end: { line: 123, column: 10 },
              },
              40: {
                start: { line: 126, column: 8 },
                end: { line: 126, column: 35 },
              },
              41: {
                start: { line: 127, column: 8 },
                end: { line: 127, column: 63 },
              },
              42: {
                start: { line: 128, column: 8 },
                end: { line: 128, column: 55 },
              },
              43: {
                start: { line: 129, column: 8 },
                end: { line: 129, column: 53 },
              },
              44: {
                start: { line: 130, column: 8 },
                end: { line: 130, column: 57 },
              },
              45: {
                start: { line: 134, column: 29 },
                end: { line: 134, column: 48 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 6, column: 4 },
                  end: { line: 6, column: 5 },
                },
                loc: {
                  start: { line: 6, column: 45 },
                  end: { line: 17, column: 5 },
                },
                line: 6,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 18, column: 4 },
                  end: { line: 18, column: 5 },
                },
                loc: {
                  start: { line: 18, column: 30 },
                  end: { line: 29, column: 5 },
                },
                line: 18,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 30, column: 4 },
                  end: { line: 30, column: 5 },
                },
                loc: {
                  start: { line: 30, column: 26 },
                  end: { line: 32, column: 5 },
                },
                line: 30,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 34, column: 4 },
                  end: { line: 34, column: 5 },
                },
                loc: {
                  start: { line: 34, column: 25 },
                  end: { line: 54, column: 5 },
                },
                line: 34,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 50, column: 19 },
                  end: { line: 50, column: 20 },
                },
                loc: {
                  start: { line: 50, column: 23 },
                  end: { line: 53, column: 9 },
                },
                line: 50,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 56, column: 4 },
                  end: { line: 56, column: 5 },
                },
                loc: {
                  start: { line: 56, column: 29 },
                  end: { line: 88, column: 5 },
                },
                line: 56,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 90, column: 4 },
                  end: { line: 90, column: 5 },
                },
                loc: {
                  start: { line: 90, column: 29 },
                  end: { line: 124, column: 5 },
                },
                line: 90,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 125, column: 4 },
                  end: { line: 125, column: 5 },
                },
                loc: {
                  start: { line: 125, column: 17 },
                  end: { line: 131, column: 5 },
                },
                line: 125,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 8, column: 8 },
                  end: { line: 15, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 8, column: 8 },
                    end: { line: 15, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 8,
              },
              1: {
                loc: {
                  start: { line: 20, column: 8 },
                  end: { line: 27, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 20, column: 8 },
                    end: { line: 27, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 20,
              },
              2: {
                loc: {
                  start: { line: 35, column: 8 },
                  end: { line: 38, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 35, column: 8 },
                    end: { line: 38, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 35,
              },
              3: {
                loc: {
                  start: { line: 35, column: 12 },
                  end: { line: 35, column: 43 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 35, column: 12 },
                    end: { line: 35, column: 27 },
                  },
                  {
                    start: { line: 35, column: 31 },
                    end: { line: 35, column: 43 },
                  },
                ],
                line: 35,
              },
              4: {
                loc: {
                  start: { line: 39, column: 21 },
                  end: { line: 41, column: 10 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 39, column: 51 },
                    end: { line: 39, column: 62 },
                  },
                  {
                    start: { line: 39, column: 65 },
                    end: { line: 41, column: 10 },
                  },
                ],
                line: 39,
              },
              5: {
                loc: {
                  start: { line: 83, column: 15 },
                  end: { line: 87, column: 9 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 83, column: 15 },
                    end: { line: 83, column: 36 },
                  },
                  {
                    start: { line: 83, column: 40 },
                    end: { line: 87, column: 9 },
                  },
                ],
                line: 83,
              },
              6: {
                loc: {
                  start: { line: 92, column: 8 },
                  end: { line: 96, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 92, column: 8 },
                    end: { line: 96, column: 9 },
                  },
                  {
                    start: { line: 94, column: 15 },
                    end: { line: 96, column: 9 },
                  },
                ],
                line: 92,
              },
              7: {
                loc: {
                  start: { line: 94, column: 15 },
                  end: { line: 96, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 94, column: 15 },
                    end: { line: 96, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 94,
              },
              8: {
                loc: {
                  start: { line: 98, column: 8 },
                  end: { line: 119, column: 9 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 99, column: 12 },
                    end: { line: 108, column: 22 },
                  },
                  {
                    start: { line: 109, column: 12 },
                    end: { line: 118, column: 22 },
                  },
                ],
                line: 98,
              },
              9: {
                loc: {
                  start: { line: 101, column: 16 },
                  end: { line: 107, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 101, column: 16 },
                    end: { line: 107, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 101,
              },
              10: {
                loc: {
                  start: { line: 101, column: 20 },
                  end: { line: 105, column: 47 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 101, column: 20 },
                    end: { line: 101, column: 39 },
                  },
                  {
                    start: { line: 101, column: 43 },
                    end: { line: 105, column: 47 },
                  },
                ],
                line: 101,
              },
              11: {
                loc: {
                  start: { line: 111, column: 16 },
                  end: { line: 117, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 111, column: 16 },
                    end: { line: 117, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 111,
              },
              12: {
                loc: {
                  start: { line: 111, column: 20 },
                  end: { line: 115, column: 50 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 111, column: 20 },
                    end: { line: 111, column: 42 },
                  },
                  {
                    start: { line: 111, column: 46 },
                    end: { line: 115, column: 50 },
                  },
                ],
                line: 111,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
            },
            f: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0 },
            b: {
              0: [0, 0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/export-service.ts',
              ],
              sourcesContent: [
                "import { type Descendant } from 'slate'\nimport {\n  type BulkExportOptions,\n  type ExportFormat,\n  type ExportMetadata,\n  type ExportOptions,\n  type ExportResult,\n  type ExportService as IExportService,\n} from './types'\nimport { MarkdownExporter } from './markdown-exporter'\nimport { HTMLExporter } from './html-exporter'\nimport { PDFExporter } from './pdf-exporter'\nimport { ReactExporter } from './react-exporter'\nimport { type BaseExporter } from './base-exporter'\n\nexport class ExportService implements IExportService {\n  private exporters: Map<ExportFormat, BaseExporter>\n\n  constructor() {\n    this.exporters = new Map<ExportFormat, BaseExporter>()\n    this.exporters.set('markdown', new MarkdownExporter())\n    this.exporters.set('html', new HTMLExporter())\n    this.exporters.set('pdf', new PDFExporter())\n    this.exporters.set('react', new ReactExporter())\n  }\n\n  async export(\n    content: Descendant[],\n    options: ExportOptions,\n    metadata?: ExportMetadata\n  ): Promise<ExportResult> {\n    const exporter = this.exporters.get(options.format)\n\n    if (!exporter) {\n      return {\n        success: false,\n        fileName: '',\n        mimeType: '',\n        error: `Unsupported export format: ${options.format}`,\n      }\n    }\n\n    return exporter.export(content, options, metadata)\n  }\n\n  async bulkExport(options: BulkExportOptions): Promise<ExportResult> {\n    const exporter = this.exporters.get(options.format)\n\n    if (!exporter) {\n      return {\n        success: false,\n        fileName: '',\n        mimeType: '',\n        error: `Unsupported export format: ${options.format}`,\n      }\n    }\n\n    return exporter.bulkExport(options)\n  }\n\n  getSupportedFormats(): ExportFormat[] {\n    return Array.from(this.exporters.keys())\n  }\n\n  // Utility method to download the exported file\n  downloadFile(result: ExportResult): void {\n    if (!result.success || !result.data) {\n      console.error('Export failed:', result.error)\n      return\n    }\n\n    const blob =\n      result.data instanceof Blob ? result.data : new Blob([result.data])\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n\n    link.href = url\n    link.download = result.fileName\n    link.style.display = 'none'\n\n    document.body.appendChild(link)\n    link.click()\n\n    // Cleanup\n    setTimeout(() => {\n      document.body.removeChild(link)\n      URL.revokeObjectURL(url)\n    }, 100)\n  }\n\n  // Utility method to get format details\n  getFormatDetails(format: ExportFormat): {\n    name: string\n    description: string\n    extension: string\n    icon?: string\n  } {\n    const formatDetails = {\n      markdown: {\n        name: 'Markdown',\n        description: 'Plain text format with simple syntax for formatting',\n        extension: 'md',\n        icon: '📝',\n      },\n      html: {\n        name: 'HTML',\n        description: 'Web page format that can be opened in any browser',\n        extension: 'html',\n        icon: '🌐',\n      },\n      pdf: {\n        name: 'PDF',\n        description: 'Portable Document Format for printing and sharing',\n        extension: 'pdf',\n        icon: '📄',\n      },\n      react: {\n        name: 'React Component',\n        description: 'Reusable React component for web applications',\n        extension: 'jsx',\n        icon: '⚛️',\n      },\n    }\n\n    return (\n      formatDetails[format] || {\n        name: format,\n        description: 'Unknown format',\n        extension: 'txt',\n      }\n    )\n  }\n\n  // Utility method to validate export options\n  validateOptions(options: ExportOptions): {\n    valid: boolean\n    errors: string[]\n  } {\n    const errors: string[] = []\n\n    if (!options.format) {\n      errors.push('Export format is required')\n    } else if (!this.getSupportedFormats().includes(options.format)) {\n      errors.push(`Unsupported format: ${options.format}`)\n    }\n\n    // Format-specific validation\n    switch (options.format) {\n      case 'pdf':\n        const pdfOptions = options as any\n        if (\n          pdfOptions.pageSize &&\n          !['A4', 'Letter', 'Legal'].includes(pdfOptions.pageSize)\n        ) {\n          errors.push('Invalid page size')\n        }\n        break\n\n      case 'react':\n        const reactOptions = options as any\n        if (\n          reactOptions.styleType &&\n          !['css-in-js', 'css-modules', 'inline'].includes(\n            reactOptions.styleType\n          )\n        ) {\n          errors.push('Invalid style type')\n        }\n        break\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    }\n  }\n}\n\n// Export singleton instance\nexport const exportService = new ExportService()\n\n// Export types and utilities\nexport * from './types'\n",
              ],
              names: [
                'MarkdownExporter',
                'HTMLExporter',
                'PDFExporter',
                'ReactExporter',
                'ExportService',
                'export',
                'content',
                'options',
                'metadata',
                'exporter',
                'exporters',
                'get',
                'format',
                'success',
                'fileName',
                'mimeType',
                'error',
                'bulkExport',
                'getSupportedFormats',
                'Array',
                'from',
                'keys',
                'downloadFile',
                'result',
                'data',
                'console',
                'blob',
                'Blob',
                'url',
                'URL',
                'createObjectURL',
                'link',
                'document',
                'createElement',
                'href',
                'download',
                'style',
                'display',
                'body',
                'appendChild',
                'click',
                'setTimeout',
                'removeChild',
                'revokeObjectURL',
                'getFormatDetails',
                'formatDetails',
                'markdown',
                'name',
                'description',
                'extension',
                'icon',
                'html',
                'pdf',
                'react',
                'validateOptions',
                'errors',
                'push',
                'includes',
                'pdfOptions',
                'pageSize',
                'reactOptions',
                'styleType',
                'valid',
                'length',
                'constructor',
                'Map',
                'set',
                'exportService',
              ],
              mappings:
                'AASA,SAASA,gBAAgB,QAAQ,sBAAqB;AACtD,SAASC,YAAY,QAAQ,kBAAiB;AAC9C,SAASC,WAAW,QAAQ,iBAAgB;AAC5C,SAASC,aAAa,QAAQ,mBAAkB;AAGhD,OAAO,MAAMC;IAWX,MAAMC,OACJC,OAAqB,EACrBC,OAAsB,EACtBC,QAAyB,EACF;QACvB,MAAMC,WAAW,IAAI,CAACC,SAAS,CAACC,GAAG,CAACJ,QAAQK,MAAM;QAElD,IAAI,CAACH,UAAU;YACb,OAAO;gBACLI,SAAS;gBACTC,UAAU;gBACVC,UAAU;gBACVC,OAAO,CAAC,2BAA2B,EAAET,QAAQK,MAAM,EAAE;YACvD;QACF;QAEA,OAAOH,SAASJ,MAAM,CAACC,SAASC,SAASC;IAC3C;IAEA,MAAMS,WAAWV,OAA0B,EAAyB;QAClE,MAAME,WAAW,IAAI,CAACC,SAAS,CAACC,GAAG,CAACJ,QAAQK,MAAM;QAElD,IAAI,CAACH,UAAU;YACb,OAAO;gBACLI,SAAS;gBACTC,UAAU;gBACVC,UAAU;gBACVC,OAAO,CAAC,2BAA2B,EAAET,QAAQK,MAAM,EAAE;YACvD;QACF;QAEA,OAAOH,SAASQ,UAAU,CAACV;IAC7B;IAEAW,sBAAsC;QACpC,OAAOC,MAAMC,IAAI,CAAC,IAAI,CAACV,SAAS,CAACW,IAAI;IACvC;IAEA,+CAA+C;IAC/CC,aAAaC,MAAoB,EAAQ;QACvC,IAAI,CAACA,OAAOV,OAAO,IAAI,CAACU,OAAOC,IAAI,EAAE;YACnCC,QAAQT,KAAK,CAAC,kBAAkBO,OAAOP,KAAK;YAC5C;QACF;QAEA,MAAMU,OACJH,OAAOC,IAAI,YAAYG,OAAOJ,OAAOC,IAAI,GAAG,IAAIG,KAAK;YAACJ,OAAOC,IAAI;SAAC;QACpE,MAAMI,MAAMC,IAAIC,eAAe,CAACJ;QAChC,MAAMK,OAAOC,SAASC,aAAa,CAAC;QAEpCF,KAAKG,IAAI,GAAGN;QACZG,KAAKI,QAAQ,GAAGZ,OAAOT,QAAQ;QAC/BiB,KAAKK,KAAK,CAACC,OAAO,GAAG;QAErBL,SAASM,IAAI,CAACC,WAAW,CAACR;QAC1BA,KAAKS,KAAK;QAEV,UAAU;QACVC,WAAW;YACTT,SAASM,IAAI,CAACI,WAAW,CAACX;YAC1BF,IAAIc,eAAe,CAACf;QACtB,GAAG;IACL;IAEA,uCAAuC;IACvCgB,iBAAiBhC,MAAoB,EAKnC;QACA,MAAMiC,gBAAgB;YACpBC,UAAU;gBACRC,MAAM;gBACNC,aAAa;gBACbC,WAAW;gBACXC,MAAM;YACR;YACAC,MAAM;gBACJJ,MAAM;gBACNC,aAAa;gBACbC,WAAW;gBACXC,MAAM;YACR;YACAE,KAAK;gBACHL,MAAM;gBACNC,aAAa;gBACbC,WAAW;gBACXC,MAAM;YACR;YACAG,OAAO;gBACLN,MAAM;gBACNC,aAAa;gBACbC,WAAW;gBACXC,MAAM;YACR;QACF;QAEA,OACEL,aAAa,CAACjC,OAAO,IAAI;YACvBmC,MAAMnC;YACNoC,aAAa;YACbC,WAAW;QACb;IAEJ;IAEA,4CAA4C;IAC5CK,gBAAgB/C,OAAsB,EAGpC;QACA,MAAMgD,SAAmB,EAAE;QAE3B,IAAI,CAAChD,QAAQK,MAAM,EAAE;YACnB2C,OAAOC,IAAI,CAAC;QACd,OAAO,IAAI,CAAC,IAAI,CAACtC,mBAAmB,GAAGuC,QAAQ,CAAClD,QAAQK,MAAM,GAAG;YAC/D2C,OAAOC,IAAI,CAAC,CAAC,oBAAoB,EAAEjD,QAAQK,MAAM,EAAE;QACrD;QAEA,6BAA6B;QAC7B,OAAQL,QAAQK,MAAM;YACpB,KAAK;gBACH,MAAM8C,aAAanD;gBACnB,IACEmD,WAAWC,QAAQ,IACnB,CAAC;oBAAC;oBAAM;oBAAU;iBAAQ,CAACF,QAAQ,CAACC,WAAWC,QAAQ,GACvD;oBACAJ,OAAOC,IAAI,CAAC;gBACd;gBACA;YAEF,KAAK;gBACH,MAAMI,eAAerD;gBACrB,IACEqD,aAAaC,SAAS,IACtB,CAAC;oBAAC;oBAAa;oBAAe;iBAAS,CAACJ,QAAQ,CAC9CG,aAAaC,SAAS,GAExB;oBACAN,OAAOC,IAAI,CAAC;gBACd;gBACA;QACJ;QAEA,OAAO;YACLM,OAAOP,OAAOQ,MAAM,KAAK;YACzBR;QACF;IACF;IA7JAS,aAAc;QACZ,IAAI,CAACtD,SAAS,GAAG,IAAIuD;QACrB,IAAI,CAACvD,SAAS,CAACwD,GAAG,CAAC,YAAY,IAAIlE;QACnC,IAAI,CAACU,SAAS,CAACwD,GAAG,CAAC,QAAQ,IAAIjE;QAC/B,IAAI,CAACS,SAAS,CAACwD,GAAG,CAAC,OAAO,IAAIhE;QAC9B,IAAI,CAACQ,SAAS,CAACwD,GAAG,CAAC,SAAS,IAAI/D;IAClC;AAwJF;AAEA,4BAA4B;AAC5B,OAAO,MAAMgE,gBAAgB,IAAI/D,gBAAe;AAEhD,6BAA6B;AAC7B,cAAc,UAAS',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '9a0db2132377305772b3e5f382fb22efaacb61b0',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '9a0db2132377305772b3e5f382fb22efaacb61b0' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_2p5y8ylbj9 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_2p5y8ylbj9()
      const exportService =
        (cov_2p5y8ylbj9().s[45]++,
        new (class ExportService {
          async export(content, options, metadata) {
            cov_2p5y8ylbj9().f[0]++
            const exporter =
              (cov_2p5y8ylbj9().s[0]++, this.exporters.get(options.format))
            return (
              cov_2p5y8ylbj9().s[1]++,
              exporter
                ? (cov_2p5y8ylbj9().b[0][1]++,
                  cov_2p5y8ylbj9().s[3]++,
                  exporter.export(content, options, metadata))
                : (cov_2p5y8ylbj9().b[0][0]++,
                  cov_2p5y8ylbj9().s[2]++,
                  {
                    success: !1,
                    fileName: '',
                    mimeType: '',
                    error: `Unsupported export format: ${options.format}`,
                  })
            )
          }
          async bulkExport(options) {
            cov_2p5y8ylbj9().f[1]++
            const exporter =
              (cov_2p5y8ylbj9().s[4]++, this.exporters.get(options.format))
            return (
              cov_2p5y8ylbj9().s[5]++,
              exporter
                ? (cov_2p5y8ylbj9().b[1][1]++,
                  cov_2p5y8ylbj9().s[7]++,
                  exporter.bulkExport(options))
                : (cov_2p5y8ylbj9().b[1][0]++,
                  cov_2p5y8ylbj9().s[6]++,
                  {
                    success: !1,
                    fileName: '',
                    mimeType: '',
                    error: `Unsupported export format: ${options.format}`,
                  })
            )
          }
          getSupportedFormats() {
            return (
              cov_2p5y8ylbj9().f[2]++,
              cov_2p5y8ylbj9().s[8]++,
              Array.from(this.exporters.keys())
            )
          }
          downloadFile(result) {
            if (
              (cov_2p5y8ylbj9().f[3]++,
              cov_2p5y8ylbj9().s[9]++,
              cov_2p5y8ylbj9().b[3][0]++,
              !result.success || (cov_2p5y8ylbj9().b[3][1]++, !result.data))
            )
              return (
                cov_2p5y8ylbj9().b[2][0]++,
                cov_2p5y8ylbj9().s[10]++,
                export_service_console.error('Export failed:', result.error),
                void cov_2p5y8ylbj9().s[11]++
              )
            cov_2p5y8ylbj9().b[2][1]++
            const blob =
                (cov_2p5y8ylbj9().s[12]++,
                result.data instanceof Blob
                  ? (cov_2p5y8ylbj9().b[4][0]++, result.data)
                  : (cov_2p5y8ylbj9().b[4][1]++, new Blob([result.data]))),
              url = (cov_2p5y8ylbj9().s[13]++, URL.createObjectURL(blob)),
              link = (cov_2p5y8ylbj9().s[14]++, document.createElement('a'))
            ;(cov_2p5y8ylbj9().s[15]++,
              (link.href = url),
              cov_2p5y8ylbj9().s[16]++,
              (link.download = result.fileName),
              cov_2p5y8ylbj9().s[17]++,
              (link.style.display = 'none'),
              cov_2p5y8ylbj9().s[18]++,
              document.body.appendChild(link),
              cov_2p5y8ylbj9().s[19]++,
              link.click(),
              cov_2p5y8ylbj9().s[20]++,
              setTimeout(() => {
                ;(cov_2p5y8ylbj9().f[4]++,
                  cov_2p5y8ylbj9().s[21]++,
                  document.body.removeChild(link),
                  cov_2p5y8ylbj9().s[22]++,
                  URL.revokeObjectURL(url))
              }, 100))
          }
          getFormatDetails(format) {
            cov_2p5y8ylbj9().f[5]++
            const formatDetails =
              (cov_2p5y8ylbj9().s[23]++,
              {
                markdown: {
                  name: 'Markdown',
                  description:
                    'Plain text format with simple syntax for formatting',
                  extension: 'md',
                  icon: '📝',
                },
                html: {
                  name: 'HTML',
                  description:
                    'Web page format that can be opened in any browser',
                  extension: 'html',
                  icon: '🌐',
                },
                pdf: {
                  name: 'PDF',
                  description:
                    'Portable Document Format for printing and sharing',
                  extension: 'pdf',
                  icon: '📄',
                },
                react: {
                  name: 'React Component',
                  description: 'Reusable React component for web applications',
                  extension: 'jsx',
                  icon: '⚛️',
                },
              })
            return (
              cov_2p5y8ylbj9().s[24]++,
              cov_2p5y8ylbj9().b[5][0]++,
              formatDetails[format] ||
                (cov_2p5y8ylbj9().b[5][1]++,
                {
                  name: format,
                  description: 'Unknown format',
                  extension: 'txt',
                })
            )
          }
          validateOptions(options) {
            cov_2p5y8ylbj9().f[6]++
            const errors = (cov_2p5y8ylbj9().s[25]++, [])
            switch (
              (cov_2p5y8ylbj9().s[26]++,
              options.format
                ? (cov_2p5y8ylbj9().b[6][1]++,
                  cov_2p5y8ylbj9().s[28]++,
                  this.getSupportedFormats().includes(options.format)
                    ? cov_2p5y8ylbj9().b[7][1]++
                    : (cov_2p5y8ylbj9().b[7][0]++,
                      cov_2p5y8ylbj9().s[29]++,
                      errors.push(`Unsupported format: ${options.format}`)))
                : (cov_2p5y8ylbj9().b[6][0]++,
                  cov_2p5y8ylbj9().s[27]++,
                  errors.push('Export format is required')),
              cov_2p5y8ylbj9().s[30]++,
              options.format)
            ) {
              case 'pdf':
                cov_2p5y8ylbj9().b[8][0]++
                const pdfOptions = (cov_2p5y8ylbj9().s[31]++, options)
                ;(cov_2p5y8ylbj9().s[32]++,
                  cov_2p5y8ylbj9().b[10][0]++,
                  pdfOptions.pageSize &&
                  (cov_2p5y8ylbj9().b[10][1]++,
                  !['A4', 'Letter', 'Legal'].includes(pdfOptions.pageSize))
                    ? (cov_2p5y8ylbj9().b[9][0]++,
                      cov_2p5y8ylbj9().s[33]++,
                      errors.push('Invalid page size'))
                    : cov_2p5y8ylbj9().b[9][1]++,
                  cov_2p5y8ylbj9().s[34]++)
                break
              case 'react':
                cov_2p5y8ylbj9().b[8][1]++
                const reactOptions = (cov_2p5y8ylbj9().s[35]++, options)
                ;(cov_2p5y8ylbj9().s[36]++,
                  cov_2p5y8ylbj9().b[12][0]++,
                  reactOptions.styleType &&
                  (cov_2p5y8ylbj9().b[12][1]++,
                  !['css-in-js', 'css-modules', 'inline'].includes(
                    reactOptions.styleType
                  ))
                    ? (cov_2p5y8ylbj9().b[11][0]++,
                      cov_2p5y8ylbj9().s[37]++,
                      errors.push('Invalid style type'))
                    : cov_2p5y8ylbj9().b[11][1]++,
                  cov_2p5y8ylbj9().s[38]++)
            }
            return (
              cov_2p5y8ylbj9().s[39]++,
              { valid: 0 === errors.length, errors }
            )
          }
          constructor() {
            ;(cov_2p5y8ylbj9().f[7]++,
              cov_2p5y8ylbj9().s[40]++,
              (this.exporters = new Map()),
              cov_2p5y8ylbj9().s[41]++,
              this.exporters.set('markdown', new MarkdownExporter()),
              cov_2p5y8ylbj9().s[42]++,
              this.exporters.set('html', new HTMLExporter()),
              cov_2p5y8ylbj9().s[43]++,
              this.exporters.set('pdf', new PDFExporter()),
              cov_2p5y8ylbj9().s[44]++,
              this.exporters.set('react', new ReactExporter()))
          }
        })())
      function cov_nq9marohw() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/index.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '1c14d0db5b916f3885338420fe5f3d5dfa880df8' === coverage[path].hash) ||
          (coverage[path] = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/index.ts',
            statementMap: {},
            fnMap: {},
            branchMap: {},
            s: {},
            f: {},
            b: {},
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/export/index.ts',
              ],
              sourcesContent: [
                "// Export all types\nexport * from '../../types/export'\n\n// Export services\nexport { BaseExportService, BaseContentProcessor } from './base-export-service'\nexport {\n  MarkdownExportService,\n  MarkdownContentProcessor,\n  MarkdownUtils,\n} from './markdown-export-service'\nexport { PDFExportService, PDFContentProcessor } from './pdf-export-service'\nexport { HTMLExportService, HTMLContentProcessor } from './html-export-service'\nexport {\n  ReactExportService,\n  ReactContentProcessor,\n} from './react-export-service'\nexport { ExportService, exportService } from './export-service'\n",
              ],
              names: [
                'BaseExportService',
                'BaseContentProcessor',
                'MarkdownExportService',
                'MarkdownContentProcessor',
                'MarkdownUtils',
                'PDFExportService',
                'PDFContentProcessor',
                'HTMLExportService',
                'HTMLContentProcessor',
                'ReactExportService',
                'ReactContentProcessor',
                'ExportService',
                'exportService',
              ],
              mappings:
                'AAAA,mBAAmB;AACnB,cAAc,qBAAoB;AAElC,kBAAkB;AAClB,SAASA,iBAAiB,EAAEC,oBAAoB,QAAQ,wBAAuB;AAC/E,SACEC,qBAAqB,EACrBC,wBAAwB,EACxBC,aAAa,QACR,4BAA2B;AAClC,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,uBAAsB;AAC5E,SAASC,iBAAiB,EAAEC,oBAAoB,QAAQ,wBAAuB;AAC/E,SACEC,kBAAkB,EAClBC,qBAAqB,QAChB,yBAAwB;AAC/B,SAASC,aAAa,EAAEC,aAAa,QAAQ,mBAAkB',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '1c14d0db5b916f3885338420fe5f3d5dfa880df8',
          })
        var actualCoverage = coverage[path]
        return (
          (cov_nq9marohw = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_nq9marohw()
      var sonner_dist = __webpack_require__(
        '../../node_modules/.pnpm/sonner@1.7.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/sonner/dist/index.mjs'
      )
      function cov_277mb91jn4() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/hooks/use-export.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/hooks/use-export.ts',
            statementMap: {
              0: {
                start: { line: 7, column: 87 },
                end: { line: 7, column: 94 },
              },
              1: {
                start: { line: 8, column: 30 },
                end: { line: 13, column: 6 },
              },
              2: {
                start: { line: 17, column: 25 },
                end: { line: 116, column: 6 },
              },
              3: {
                start: { line: 18, column: 8 },
                end: { line: 109, column: 9 },
              },
              4: {
                start: { line: 19, column: 12 },
                end: { line: 24, column: 20 },
              },
              5: {
                start: { line: 19, column: 30 },
                end: { line: 24, column: 17 },
              },
              6: {
                start: { line: 25, column: 12 },
                end: { line: 29, column: 13 },
              },
              7: {
                start: { line: 26, column: 16 },
                end: { line: 28, column: 19 },
              },
              8: {
                start: { line: 31, column: 12 },
                end: { line: 33, column: 13 },
              },
              9: {
                start: { line: 32, column: 16 },
                end: { line: 32, column: 73 },
              },
              10: {
                start: { line: 36, column: 12 },
                end: { line: 36, column: 83 },
              },
              11: {
                start: { line: 37, column: 12 },
                end: { line: 40, column: 20 },
              },
              12: {
                start: { line: 37, column: 30 },
                end: { line: 40, column: 17 },
              },
              13: {
                start: { line: 42, column: 28 },
                end: { line: 42, column: 52 },
              },
              14: {
                start: { line: 43, column: 29 },
                end: { line: 48, column: 13 },
              },
              15: {
                start: { line: 50, column: 27 },
                end: { line: 50, column: 87 },
              },
              16: {
                start: { line: 51, column: 12 },
                end: { line: 51, column: 83 },
              },
              17: {
                start: { line: 52, column: 12 },
                end: { line: 55, column: 20 },
              },
              18: {
                start: { line: 52, column: 30 },
                end: { line: 55, column: 17 },
              },
              19: {
                start: { line: 57, column: 12 },
                end: { line: 59, column: 13 },
              },
              20: {
                start: { line: 58, column: 16 },
                end: { line: 58, column: 51 },
              },
              21: {
                start: { line: 60, column: 12 },
                end: { line: 60, column: 84 },
              },
              22: {
                start: { line: 62, column: 32 },
                end: { line: 62, column: 34 },
              },
              23: {
                start: { line: 63, column: 12 },
                end: { line: 71, column: 13 },
              },
              24: {
                start: { line: 64, column: 16 },
                end: { line: 70, column: 17 },
              },
              25: {
                start: { line: 67, column: 20 },
                end: { line: 67, column: 55 },
              },
              26: {
                start: { line: 69, column: 20 },
                end: { line: 69, column: 48 },
              },
              27: {
                start: { line: 72, column: 33 },
                end: { line: 80, column: 13 },
              },
              28: {
                start: { line: 81, column: 12 },
                end: { line: 86, column: 20 },
              },
              29: {
                start: { line: 81, column: 30 },
                end: { line: 86, column: 17 },
              },
              30: {
                start: { line: 87, column: 12 },
                end: { line: 91, column: 13 },
              },
              31: {
                start: { line: 88, column: 16 },
                end: { line: 90, column: 19 },
              },
              32: {
                start: { line: 92, column: 12 },
                end: { line: 92, column: 90 },
              },
              33: {
                start: { line: 93, column: 12 },
                end: { line: 93, column: 32 },
              },
              34: {
                start: { line: 95, column: 33 },
                end: { line: 95, column: 89 },
              },
              35: {
                start: { line: 96, column: 12 },
                end: { line: 101, column: 20 },
              },
              36: {
                start: { line: 96, column: 30 },
                end: { line: 101, column: 17 },
              },
              37: {
                start: { line: 102, column: 12 },
                end: { line: 106, column: 13 },
              },
              38: {
                start: { line: 103, column: 16 },
                end: { line: 105, column: 19 },
              },
              39: {
                start: { line: 107, column: 12 },
                end: { line: 107, column: 128 },
              },
              40: {
                start: { line: 108, column: 12 },
                end: { line: 108, column: 24 },
              },
              41: {
                start: { line: 119, column: 26 },
                end: { line: 244, column: 6 },
              },
              42: {
                start: { line: 120, column: 8 },
                end: { line: 237, column: 9 },
              },
              43: {
                start: { line: 121, column: 12 },
                end: { line: 126, column: 20 },
              },
              44: {
                start: { line: 121, column: 30 },
                end: { line: 126, column: 17 },
              },
              45: {
                start: { line: 127, column: 12 },
                end: { line: 131, column: 13 },
              },
              46: {
                start: { line: 128, column: 16 },
                end: { line: 130, column: 19 },
              },
              47: {
                start: { line: 133, column: 12 },
                end: { line: 137, column: 13 },
              },
              48: {
                start: { line: 134, column: 16 },
                end: { line: 136, column: 17 },
              },
              49: {
                start: { line: 135, column: 20 },
                end: { line: 135, column: 93 },
              },
              50: {
                start: { line: 138, column: 12 },
                end: { line: 138, column: 83 },
              },
              51: {
                start: { line: 139, column: 12 },
                end: { line: 142, column: 20 },
              },
              52: {
                start: { line: 139, column: 30 },
                end: { line: 142, column: 17 },
              },
              53: {
                start: { line: 145, column: 28 },
                end: { line: 145, column: 30 },
              },
              54: {
                start: { line: 146, column: 12 },
                end: { line: 180, column: 13 },
              },
              55: {
                start: { line: 146, column: 24 },
                end: { line: 146, column: 25 },
              },
              56: {
                start: { line: 147, column: 29 },
                end: { line: 147, column: 37 },
              },
              57: {
                start: { line: 148, column: 32 },
                end: { line: 148, column: 56 },
              },
              58: {
                start: { line: 149, column: 33 },
                end: { line: 154, column: 17 },
              },
              59: {
                start: { line: 155, column: 37 },
                end: { line: 157, column: 28 },
              },
              60: {
                start: { line: 158, column: 16 },
                end: { line: 160, column: 17 },
              },
              61: {
                start: { line: 159, column: 20 },
                end: { line: 159, column: 75 },
              },
              62: {
                start: { line: 162, column: 36 },
                end: { line: 162, column: 38 },
              },
              63: {
                start: { line: 163, column: 16 },
                end: { line: 169, column: 17 },
              },
              64: {
                start: { line: 164, column: 20 },
                end: { line: 168, column: 21 },
              },
              65: {
                start: { line: 165, column: 24 },
                end: { line: 165, column: 59 },
              },
              66: {
                start: { line: 167, column: 24 },
                end: { line: 167, column: 58 },
              },
              67: {
                start: { line: 170, column: 37 },
                end: { line: 178, column: 17 },
              },
              68: {
                start: { line: 179, column: 16 },
                end: { line: 179, column: 43 },
              },
              69: {
                start: { line: 183, column: 27 },
                end: { line: 183, column: 37 },
              },
              70: {
                start: { line: 184, column: 12 },
                end: { line: 184, column: 83 },
              },
              71: {
                start: { line: 185, column: 12 },
                end: { line: 188, column: 20 },
              },
              72: {
                start: { line: 185, column: 30 },
                end: { line: 188, column: 17 },
              },
              73: {
                start: { line: 190, column: 12 },
                end: { line: 207, column: 13 },
              },
              74: {
                start: { line: 193, column: 16 },
                end: { line: 206, column: 17 },
              },
              75: {
                start: { line: 195, column: 33 },
                end: { line: 199, column: 22 },
              },
              76: {
                start: { line: 200, column: 32 },
                end: { line: 200, column: 57 },
              },
              77: {
                start: { line: 201, column: 33 },
                end: { line: 201, column: 60 },
              },
              78: {
                start: { line: 202, column: 20 },
                end: { line: 202, column: 36 },
              },
              79: {
                start: { line: 203, column: 20 },
                end: { line: 203, column: 49 },
              },
              80: {
                start: { line: 204, column: 20 },
                end: { line: 204, column: 33 },
              },
              81: {
                start: { line: 205, column: 20 },
                end: { line: 205, column: 45 },
              },
              82: {
                start: { line: 208, column: 12 },
                end: { line: 208, column: 84 },
              },
              83: {
                start: { line: 209, column: 12 },
                end: { line: 214, column: 20 },
              },
              84: {
                start: { line: 209, column: 30 },
                end: { line: 214, column: 17 },
              },
              85: {
                start: { line: 215, column: 12 },
                end: { line: 219, column: 13 },
              },
              86: {
                start: { line: 216, column: 16 },
                end: { line: 218, column: 19 },
              },
              87: {
                start: { line: 220, column: 12 },
                end: { line: 220, column: 84 },
              },
              88: {
                start: { line: 221, column: 12 },
                end: { line: 221, column: 26 },
              },
              89: {
                start: { line: 223, column: 33 },
                end: { line: 223, column: 94 },
              },
              90: {
                start: { line: 224, column: 12 },
                end: { line: 229, column: 20 },
              },
              91: {
                start: { line: 224, column: 30 },
                end: { line: 229, column: 17 },
              },
              92: {
                start: { line: 230, column: 12 },
                end: { line: 234, column: 13 },
              },
              93: {
                start: { line: 231, column: 16 },
                end: { line: 233, column: 19 },
              },
              94: {
                start: { line: 235, column: 12 },
                end: { line: 235, column: 128 },
              },
              95: {
                start: { line: 236, column: 12 },
                end: { line: 236, column: 24 },
              },
              96: {
                start: { line: 247, column: 31 },
                end: { line: 260, column: 6 },
              },
              97: {
                start: { line: 248, column: 31 },
                end: { line: 253, column: 9 },
              },
              98: {
                start: { line: 254, column: 8 },
                end: { line: 257, column: 11 },
              },
              99: {
                start: { line: 261, column: 24 },
                end: { line: 274, column: 6 },
              },
              100: {
                start: { line: 262, column: 31 },
                end: { line: 267, column: 9 },
              },
              101: {
                start: { line: 268, column: 8 },
                end: { line: 271, column: 11 },
              },
              102: {
                start: { line: 275, column: 25 },
                end: { line: 288, column: 6 },
              },
              103: {
                start: { line: 276, column: 31 },
                end: { line: 281, column: 9 },
              },
              104: {
                start: { line: 282, column: 8 },
                end: { line: 285, column: 11 },
              },
              105: {
                start: { line: 289, column: 26 },
                end: { line: 302, column: 6 },
              },
              106: {
                start: { line: 290, column: 31 },
                end: { line: 295, column: 9 },
              },
              107: {
                start: { line: 296, column: 8 },
                end: { line: 299, column: 11 },
              },
              108: {
                start: { line: 305, column: 28 },
                end: { line: 327, column: 10 },
              },
              109: {
                start: { line: 306, column: 8 },
                end: { line: 326, column: 9 },
              },
              110: {
                start: { line: 309, column: 28 },
                end: { line: 309, column: 52 },
              },
              111: {
                start: { line: 310, column: 30 },
                end: { line: 313, column: 17 },
              },
              112: {
                start: { line: 311, column: 29 },
                end: { line: 311, column: 44 },
              },
              113: {
                start: { line: 312, column: 16 },
                end: { line: 312, column: 105 },
              },
              114: {
                start: { line: 314, column: 12 },
                end: { line: 318, column: 14 },
              },
              115: {
                start: { line: 320, column: 33 },
                end: { line: 320, column: 90 },
              },
              116: {
                start: { line: 321, column: 12 },
                end: { line: 324, column: 20 },
              },
              117: {
                start: { line: 321, column: 30 },
                end: { line: 324, column: 17 },
              },
              118: {
                start: { line: 325, column: 12 },
                end: { line: 325, column: 24 },
              },
              119: {
                start: { line: 330, column: 26 },
                end: { line: 343, column: 6 },
              },
              120: {
                start: { line: 331, column: 8 },
                end: { line: 340, column: 9 },
              },
              121: {
                start: { line: 333, column: 12 },
                end: { line: 333, column: 60 },
              },
              122: {
                start: { line: 335, column: 33 },
                end: { line: 335, column: 90 },
              },
              123: {
                start: { line: 336, column: 12 },
                end: { line: 338, column: 13 },
              },
              124: {
                start: { line: 337, column: 16 },
                end: { line: 337, column: 63 },
              },
              125: {
                start: { line: 339, column: 12 },
                end: { line: 339, column: 24 },
              },
              126: {
                start: { line: 346, column: 25 },
                end: { line: 351, column: 10 },
              },
              127: {
                start: { line: 347, column: 8 },
                end: { line: 350, column: 16 },
              },
              128: {
                start: { line: 347, column: 26 },
                end: { line: 350, column: 13 },
              },
              129: {
                start: { line: 354, column: 20 },
                end: { line: 361, column: 10 },
              },
              130: {
                start: { line: 355, column: 8 },
                end: { line: 360, column: 11 },
              },
              131: {
                start: { line: 362, column: 4 },
                end: { line: 382, column: 6 },
              },
              132: {
                start: { line: 387, column: 34 },
                end: { line: 387, column: 46 },
              },
              133: {
                start: { line: 388, column: 38 },
                end: { line: 388, column: 53 },
              },
              134: {
                start: { line: 389, column: 30 },
                end: { line: 389, column: 44 },
              },
              135: {
                start: { line: 393, column: 26 },
                end: { line: 408, column: 6 },
              },
              136: {
                start: { line: 394, column: 8 },
                end: { line: 405, column: 9 },
              },
              137: {
                start: { line: 395, column: 12 },
                end: { line: 395, column: 31 },
              },
              138: {
                start: { line: 396, column: 12 },
                end: { line: 396, column: 27 },
              },
              139: {
                start: { line: 398, column: 28 },
                end: { line: 398, column: 30 },
              },
              140: {
                start: { line: 399, column: 12 },
                end: { line: 399, column: 32 },
              },
              141: {
                start: { line: 401, column: 33 },
                end: { line: 401, column: 98 },
              },
              142: {
                start: { line: 402, column: 12 },
                end: { line: 402, column: 35 },
              },
              143: {
                start: { line: 404, column: 12 },
                end: { line: 404, column: 32 },
              },
              144: {
                start: { line: 411, column: 27 },
                end: { line: 420, column: 10 },
              },
              145: {
                start: { line: 412, column: 8 },
                end: { line: 419, column: 9 },
              },
              146: {
                start: { line: 414, column: 12 },
                end: { line: 414, column: 68 },
              },
              147: {
                start: { line: 416, column: 33 },
                end: { line: 416, column: 99 },
              },
              148: {
                start: { line: 417, column: 12 },
                end: { line: 417, column: 58 },
              },
              149: {
                start: { line: 418, column: 12 },
                end: { line: 418, column: 24 },
              },
              150: {
                start: { line: 423, column: 23 },
                end: { line: 430, column: 10 },
              },
              151: {
                start: { line: 425, column: 8 },
                end: { line: 429, column: 10 },
              },
              152: {
                start: { line: 431, column: 4 },
                end: { line: 438, column: 6 },
              },
              153: {
                start: { line: 444, column: 20 },
                end: { line: 454, column: 10 },
              },
              154: {
                start: { line: 445, column: 8 },
                end: { line: 453, column: 16 },
              },
              155: {
                start: { line: 445, column: 66 },
                end: { line: 453, column: 13 },
              },
              156: {
                start: { line: 455, column: 4 },
                end: { line: 458, column: 6 },
              },
              157: {
                start: { line: 457, column: 33 },
                end: { line: 457, column: 70 },
              },
              158: {
                start: { line: 457, column: 51 },
                end: { line: 457, column: 69 },
              },
            },
            fnMap: {
              0: {
                name: 'useExport',
                decl: {
                  start: { line: 6, column: 20 },
                  end: { line: 6, column: 29 },
                },
                loc: {
                  start: { line: 6, column: 44 },
                  end: { line: 383, column: 1 },
                },
                line: 6,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 17, column: 37 },
                  end: { line: 17, column: 38 },
                },
                loc: {
                  start: { line: 17, column: 66 },
                  end: { line: 110, column: 5 },
                },
                line: 17,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 19, column: 21 },
                  end: { line: 19, column: 22 },
                },
                loc: {
                  start: { line: 19, column: 30 },
                  end: { line: 24, column: 17 },
                },
                line: 19,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 37, column: 21 },
                  end: { line: 37, column: 22 },
                },
                loc: {
                  start: { line: 37, column: 30 },
                  end: { line: 40, column: 17 },
                },
                line: 37,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 52, column: 21 },
                  end: { line: 52, column: 22 },
                },
                loc: {
                  start: { line: 52, column: 30 },
                  end: { line: 55, column: 17 },
                },
                line: 52,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 81, column: 21 },
                  end: { line: 81, column: 22 },
                },
                loc: {
                  start: { line: 81, column: 30 },
                  end: { line: 86, column: 17 },
                },
                line: 81,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 96, column: 21 },
                  end: { line: 96, column: 22 },
                },
                loc: {
                  start: { line: 96, column: 30 },
                  end: { line: 101, column: 17 },
                },
                line: 96,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 119, column: 38 },
                  end: { line: 119, column: 39 },
                },
                loc: {
                  start: { line: 119, column: 68 },
                  end: { line: 238, column: 5 },
                },
                line: 119,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 121, column: 21 },
                  end: { line: 121, column: 22 },
                },
                loc: {
                  start: { line: 121, column: 30 },
                  end: { line: 126, column: 17 },
                },
                line: 121,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 139, column: 21 },
                  end: { line: 139, column: 22 },
                },
                loc: {
                  start: { line: 139, column: 30 },
                  end: { line: 142, column: 17 },
                },
                line: 139,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 185, column: 21 },
                  end: { line: 185, column: 22 },
                },
                loc: {
                  start: { line: 185, column: 30 },
                  end: { line: 188, column: 17 },
                },
                line: 185,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 209, column: 21 },
                  end: { line: 209, column: 22 },
                },
                loc: {
                  start: { line: 209, column: 30 },
                  end: { line: 214, column: 17 },
                },
                line: 209,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 224, column: 21 },
                  end: { line: 224, column: 22 },
                },
                loc: {
                  start: { line: 224, column: 30 },
                  end: { line: 229, column: 17 },
                },
                line: 224,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 247, column: 43 },
                  end: { line: 247, column: 44 },
                },
                loc: {
                  start: { line: 247, column: 60 },
                  end: { line: 258, column: 5 },
                },
                line: 247,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 261, column: 36 },
                  end: { line: 261, column: 37 },
                },
                loc: {
                  start: { line: 261, column: 53 },
                  end: { line: 272, column: 5 },
                },
                line: 261,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 275, column: 37 },
                  end: { line: 275, column: 38 },
                },
                loc: {
                  start: { line: 275, column: 54 },
                  end: { line: 286, column: 5 },
                },
                line: 275,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 289, column: 38 },
                  end: { line: 289, column: 39 },
                },
                loc: {
                  start: { line: 289, column: 55 },
                  end: { line: 300, column: 5 },
                },
                line: 289,
              },
              17: {
                name: '(anonymous_17)',
                decl: {
                  start: { line: 305, column: 40 },
                  end: { line: 305, column: 41 },
                },
                loc: {
                  start: { line: 305, column: 73 },
                  end: { line: 327, column: 5 },
                },
                line: 305,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 310, column: 45 },
                  end: { line: 310, column: 46 },
                },
                loc: {
                  start: { line: 310, column: 60 },
                  end: { line: 313, column: 13 },
                },
                line: 310,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 321, column: 21 },
                  end: { line: 321, column: 22 },
                },
                loc: {
                  start: { line: 321, column: 30 },
                  end: { line: 324, column: 17 },
                },
                line: 321,
              },
              20: {
                name: '(anonymous_20)',
                decl: {
                  start: { line: 330, column: 38 },
                  end: { line: 330, column: 39 },
                },
                loc: {
                  start: { line: 330, column: 55 },
                  end: { line: 341, column: 5 },
                },
                line: 330,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 346, column: 37 },
                  end: { line: 346, column: 38 },
                },
                loc: {
                  start: { line: 346, column: 41 },
                  end: { line: 351, column: 5 },
                },
                line: 346,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 347, column: 17 },
                  end: { line: 347, column: 18 },
                },
                loc: {
                  start: { line: 347, column: 26 },
                  end: { line: 350, column: 13 },
                },
                line: 347,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 354, column: 32 },
                  end: { line: 354, column: 33 },
                },
                loc: {
                  start: { line: 354, column: 36 },
                  end: { line: 361, column: 5 },
                },
                line: 354,
              },
              24: {
                name: 'useExportHistory',
                decl: {
                  start: { line: 386, column: 20 },
                  end: { line: 386, column: 36 },
                },
                loc: {
                  start: { line: 386, column: 45 },
                  end: { line: 439, column: 1 },
                },
                line: 386,
              },
              25: {
                name: '(anonymous_25)',
                decl: {
                  start: { line: 393, column: 38 },
                  end: { line: 393, column: 39 },
                },
                loc: {
                  start: { line: 393, column: 59 },
                  end: { line: 406, column: 5 },
                },
                line: 393,
              },
              26: {
                name: '(anonymous_26)',
                decl: {
                  start: { line: 411, column: 39 },
                  end: { line: 411, column: 40 },
                },
                loc: {
                  start: { line: 411, column: 58 },
                  end: { line: 420, column: 5 },
                },
                line: 411,
              },
              27: {
                name: '(anonymous_27)',
                decl: {
                  start: { line: 423, column: 35 },
                  end: { line: 423, column: 36 },
                },
                loc: {
                  start: { line: 423, column: 45 },
                  end: { line: 430, column: 5 },
                },
                line: 423,
              },
              28: {
                name: 'useExportFormats',
                decl: {
                  start: { line: 442, column: 20 },
                  end: { line: 442, column: 36 },
                },
                loc: {
                  start: { line: 442, column: 39 },
                  end: { line: 459, column: 1 },
                },
                line: 442,
              },
              29: {
                name: '(anonymous_29)',
                decl: {
                  start: { line: 444, column: 28 },
                  end: { line: 444, column: 29 },
                },
                loc: {
                  start: { line: 444, column: 32 },
                  end: { line: 454, column: 5 },
                },
                line: 444,
              },
              30: {
                name: '(anonymous_30)',
                decl: {
                  start: { line: 445, column: 55 },
                  end: { line: 445, column: 56 },
                },
                loc: {
                  start: { line: 445, column: 66 },
                  end: { line: 453, column: 13 },
                },
                line: 445,
              },
              31: {
                name: '(anonymous_31)',
                decl: {
                  start: { line: 457, column: 23 },
                  end: { line: 457, column: 24 },
                },
                loc: {
                  start: { line: 457, column: 33 },
                  end: { line: 457, column: 70 },
                },
                line: 457,
              },
              32: {
                name: '(anonymous_32)',
                decl: {
                  start: { line: 457, column: 46 },
                  end: { line: 457, column: 47 },
                },
                loc: {
                  start: { line: 457, column: 51 },
                  end: { line: 457, column: 69 },
                },
                line: 457,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 6, column: 30 },
                  end: { line: 6, column: 42 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 6, column: 40 },
                    end: { line: 6, column: 42 },
                  },
                ],
                line: 6,
              },
              1: {
                loc: {
                  start: { line: 7, column: 44 },
                  end: { line: 7, column: 63 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 7, column: 59 },
                    end: { line: 7, column: 63 },
                  },
                ],
                line: 7,
              },
              2: {
                loc: {
                  start: { line: 7, column: 65 },
                  end: { line: 7, column: 82 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 7, column: 78 },
                    end: { line: 7, column: 82 },
                  },
                ],
                line: 7,
              },
              3: {
                loc: {
                  start: { line: 25, column: 12 },
                  end: { line: 29, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 25, column: 12 },
                    end: { line: 29, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 25,
              },
              4: {
                loc: {
                  start: { line: 31, column: 12 },
                  end: { line: 33, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 31, column: 12 },
                    end: { line: 33, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 31,
              },
              5: {
                loc: {
                  start: { line: 31, column: 16 },
                  end: { line: 31, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 31, column: 16 },
                    end: { line: 31, column: 21 },
                  },
                  {
                    start: { line: 31, column: 25 },
                    end: { line: 31, column: 38 },
                  },
                ],
                line: 31,
              },
              6: {
                loc: {
                  start: { line: 36, column: 12 },
                  end: { line: 36, column: 82 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 36, column: 59 },
                    end: { line: 36, column: 65 },
                  },
                  {
                    start: { line: 36, column: 68 },
                    end: { line: 36, column: 82 },
                  },
                ],
                line: 36,
              },
              7: {
                loc: {
                  start: { line: 36, column: 12 },
                  end: { line: 36, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 36, column: 12 },
                    end: { line: 36, column: 31 },
                  },
                  {
                    start: { line: 36, column: 35 },
                    end: { line: 36, column: 56 },
                  },
                ],
                line: 36,
              },
              8: {
                loc: {
                  start: { line: 47, column: 22 },
                  end: { line: 47, column: 37 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 47, column: 22 },
                    end: { line: 47, column: 31 },
                  },
                  {
                    start: { line: 47, column: 35 },
                    end: { line: 47, column: 37 },
                  },
                ],
                line: 47,
              },
              9: {
                loc: {
                  start: { line: 51, column: 12 },
                  end: { line: 51, column: 82 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 51, column: 59 },
                    end: { line: 51, column: 65 },
                  },
                  {
                    start: { line: 51, column: 68 },
                    end: { line: 51, column: 82 },
                  },
                ],
                line: 51,
              },
              10: {
                loc: {
                  start: { line: 51, column: 12 },
                  end: { line: 51, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 51, column: 12 },
                    end: { line: 51, column: 31 },
                  },
                  {
                    start: { line: 51, column: 35 },
                    end: { line: 51, column: 56 },
                  },
                ],
                line: 51,
              },
              11: {
                loc: {
                  start: { line: 57, column: 12 },
                  end: { line: 59, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 57, column: 12 },
                    end: { line: 59, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 57,
              },
              12: {
                loc: {
                  start: { line: 57, column: 16 },
                  end: { line: 57, column: 46 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 57, column: 16 },
                    end: { line: 57, column: 28 },
                  },
                  {
                    start: { line: 57, column: 32 },
                    end: { line: 57, column: 46 },
                  },
                ],
                line: 57,
              },
              13: {
                loc: {
                  start: { line: 60, column: 12 },
                  end: { line: 60, column: 83 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 60, column: 59 },
                    end: { line: 60, column: 65 },
                  },
                  {
                    start: { line: 60, column: 68 },
                    end: { line: 60, column: 83 },
                  },
                ],
                line: 60,
              },
              14: {
                loc: {
                  start: { line: 60, column: 12 },
                  end: { line: 60, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 60, column: 12 },
                    end: { line: 60, column: 31 },
                  },
                  {
                    start: { line: 60, column: 35 },
                    end: { line: 60, column: 56 },
                  },
                ],
                line: 60,
              },
              15: {
                loc: {
                  start: { line: 63, column: 12 },
                  end: { line: 71, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 63, column: 12 },
                    end: { line: 71, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 63,
              },
              16: {
                loc: {
                  start: { line: 64, column: 16 },
                  end: { line: 70, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 64, column: 16 },
                    end: { line: 70, column: 17 },
                  },
                  {
                    start: { line: 68, column: 23 },
                    end: { line: 70, column: 17 },
                  },
                ],
                line: 64,
              },
              17: {
                loc: {
                  start: { line: 76, column: 22 },
                  end: { line: 76, column: 107 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 76, column: 36 },
                    end: { line: 76, column: 103 },
                  },
                  {
                    start: { line: 76, column: 106 },
                    end: { line: 76, column: 107 },
                  },
                ],
                line: 76,
              },
              18: {
                loc: {
                  start: { line: 76, column: 36 },
                  end: { line: 76, column: 103 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 76, column: 66 },
                    end: { line: 76, column: 82 },
                  },
                  {
                    start: { line: 76, column: 85 },
                    end: { line: 76, column: 103 },
                  },
                ],
                line: 76,
              },
              19: {
                loc: {
                  start: { line: 87, column: 12 },
                  end: { line: 91, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 87, column: 12 },
                    end: { line: 91, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 87,
              },
              20: {
                loc: {
                  start: { line: 92, column: 12 },
                  end: { line: 92, column: 89 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 92, column: 57 },
                    end: { line: 92, column: 63 },
                  },
                  {
                    start: { line: 92, column: 66 },
                    end: { line: 92, column: 89 },
                  },
                ],
                line: 92,
              },
              21: {
                loc: {
                  start: { line: 92, column: 12 },
                  end: { line: 92, column: 54 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 92, column: 12 },
                    end: { line: 92, column: 30 },
                  },
                  {
                    start: { line: 92, column: 34 },
                    end: { line: 92, column: 54 },
                  },
                ],
                line: 92,
              },
              22: {
                loc: {
                  start: { line: 95, column: 33 },
                  end: { line: 95, column: 89 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 95, column: 58 },
                    end: { line: 95, column: 71 },
                  },
                  {
                    start: { line: 95, column: 74 },
                    end: { line: 95, column: 89 },
                  },
                ],
                line: 95,
              },
              23: {
                loc: {
                  start: { line: 102, column: 12 },
                  end: { line: 106, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 102, column: 12 },
                    end: { line: 106, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 102,
              },
              24: {
                loc: {
                  start: { line: 107, column: 12 },
                  end: { line: 107, column: 127 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 107, column: 53 },
                    end: { line: 107, column: 59 },
                  },
                  {
                    start: { line: 107, column: 62 },
                    end: { line: 107, column: 127 },
                  },
                ],
                line: 107,
              },
              25: {
                loc: {
                  start: { line: 107, column: 12 },
                  end: { line: 107, column: 50 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 107, column: 12 },
                    end: { line: 107, column: 28 },
                  },
                  {
                    start: { line: 107, column: 32 },
                    end: { line: 107, column: 50 },
                  },
                ],
                line: 107,
              },
              26: {
                loc: {
                  start: { line: 107, column: 70 },
                  end: { line: 107, column: 126 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 107, column: 95 },
                    end: { line: 107, column: 100 },
                  },
                  {
                    start: { line: 107, column: 103 },
                    end: { line: 107, column: 126 },
                  },
                ],
                line: 107,
              },
              27: {
                loc: {
                  start: { line: 127, column: 12 },
                  end: { line: 131, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 127, column: 12 },
                    end: { line: 131, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 127,
              },
              28: {
                loc: {
                  start: { line: 134, column: 16 },
                  end: { line: 136, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 134, column: 16 },
                    end: { line: 136, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 134,
              },
              29: {
                loc: {
                  start: { line: 134, column: 20 },
                  end: { line: 134, column: 42 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 134, column: 20 },
                    end: { line: 134, column: 25 },
                  },
                  {
                    start: { line: 134, column: 29 },
                    end: { line: 134, column: 42 },
                  },
                ],
                line: 134,
              },
              30: {
                loc: {
                  start: { line: 138, column: 12 },
                  end: { line: 138, column: 82 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 138, column: 59 },
                    end: { line: 138, column: 65 },
                  },
                  {
                    start: { line: 138, column: 68 },
                    end: { line: 138, column: 82 },
                  },
                ],
                line: 138,
              },
              31: {
                loc: {
                  start: { line: 138, column: 12 },
                  end: { line: 138, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 138, column: 12 },
                    end: { line: 138, column: 31 },
                  },
                  {
                    start: { line: 138, column: 35 },
                    end: { line: 138, column: 56 },
                  },
                ],
                line: 138,
              },
              32: {
                loc: {
                  start: { line: 153, column: 26 },
                  end: { line: 153, column: 41 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 153, column: 26 },
                    end: { line: 153, column: 35 },
                  },
                  {
                    start: { line: 153, column: 39 },
                    end: { line: 153, column: 41 },
                  },
                ],
                line: 153,
              },
              33: {
                loc: {
                  start: { line: 158, column: 16 },
                  end: { line: 160, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 158, column: 16 },
                    end: { line: 160, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 158,
              },
              34: {
                loc: {
                  start: { line: 159, column: 36 },
                  end: { line: 159, column: 73 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 159, column: 36 },
                    end: { line: 159, column: 54 },
                  },
                  {
                    start: { line: 159, column: 58 },
                    end: { line: 159, column: 73 },
                  },
                ],
                line: 159,
              },
              35: {
                loc: {
                  start: { line: 163, column: 16 },
                  end: { line: 169, column: 17 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 163, column: 16 },
                    end: { line: 169, column: 17 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 163,
              },
              36: {
                loc: {
                  start: { line: 164, column: 20 },
                  end: { line: 168, column: 21 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 164, column: 20 },
                    end: { line: 168, column: 21 },
                  },
                  {
                    start: { line: 166, column: 27 },
                    end: { line: 168, column: 21 },
                  },
                ],
                line: 164,
              },
              37: {
                loc: {
                  start: { line: 174, column: 26 },
                  end: { line: 174, column: 135 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 174, column: 46 },
                    end: { line: 174, column: 131 },
                  },
                  {
                    start: { line: 174, column: 134 },
                    end: { line: 174, column: 135 },
                  },
                ],
                line: 174,
              },
              38: {
                loc: {
                  start: { line: 174, column: 46 },
                  end: { line: 174, column: 131 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 174, column: 82 },
                    end: { line: 174, column: 104 },
                  },
                  {
                    start: { line: 174, column: 107 },
                    end: { line: 174, column: 131 },
                  },
                ],
                line: 174,
              },
              39: {
                loc: {
                  start: { line: 184, column: 12 },
                  end: { line: 184, column: 82 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 184, column: 59 },
                    end: { line: 184, column: 65 },
                  },
                  {
                    start: { line: 184, column: 68 },
                    end: { line: 184, column: 82 },
                  },
                ],
                line: 184,
              },
              40: {
                loc: {
                  start: { line: 184, column: 12 },
                  end: { line: 184, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 184, column: 12 },
                    end: { line: 184, column: 31 },
                  },
                  {
                    start: { line: 184, column: 35 },
                    end: { line: 184, column: 56 },
                  },
                ],
                line: 184,
              },
              41: {
                loc: {
                  start: { line: 190, column: 12 },
                  end: { line: 207, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 190, column: 12 },
                    end: { line: 207, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 190,
              },
              42: {
                loc: {
                  start: { line: 190, column: 16 },
                  end: { line: 190, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 190, column: 16 },
                    end: { line: 190, column: 28 },
                  },
                  {
                    start: { line: 190, column: 32 },
                    end: { line: 190, column: 38 },
                  },
                ],
                line: 190,
              },
              43: {
                loc: {
                  start: { line: 208, column: 12 },
                  end: { line: 208, column: 83 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 208, column: 59 },
                    end: { line: 208, column: 65 },
                  },
                  {
                    start: { line: 208, column: 68 },
                    end: { line: 208, column: 83 },
                  },
                ],
                line: 208,
              },
              44: {
                loc: {
                  start: { line: 208, column: 12 },
                  end: { line: 208, column: 56 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 208, column: 12 },
                    end: { line: 208, column: 31 },
                  },
                  {
                    start: { line: 208, column: 35 },
                    end: { line: 208, column: 56 },
                  },
                ],
                line: 208,
              },
              45: {
                loc: {
                  start: { line: 215, column: 12 },
                  end: { line: 219, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 215, column: 12 },
                    end: { line: 219, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 215,
              },
              46: {
                loc: {
                  start: { line: 220, column: 12 },
                  end: { line: 220, column: 83 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 220, column: 57 },
                    end: { line: 220, column: 63 },
                  },
                  {
                    start: { line: 220, column: 66 },
                    end: { line: 220, column: 83 },
                  },
                ],
                line: 220,
              },
              47: {
                loc: {
                  start: { line: 220, column: 12 },
                  end: { line: 220, column: 54 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 220, column: 12 },
                    end: { line: 220, column: 30 },
                  },
                  {
                    start: { line: 220, column: 34 },
                    end: { line: 220, column: 54 },
                  },
                ],
                line: 220,
              },
              48: {
                loc: {
                  start: { line: 223, column: 33 },
                  end: { line: 223, column: 94 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 223, column: 58 },
                    end: { line: 223, column: 71 },
                  },
                  {
                    start: { line: 223, column: 74 },
                    end: { line: 223, column: 94 },
                  },
                ],
                line: 223,
              },
              49: {
                loc: {
                  start: { line: 230, column: 12 },
                  end: { line: 234, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 230, column: 12 },
                    end: { line: 234, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 230,
              },
              50: {
                loc: {
                  start: { line: 235, column: 12 },
                  end: { line: 235, column: 127 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 235, column: 53 },
                    end: { line: 235, column: 59 },
                  },
                  {
                    start: { line: 235, column: 62 },
                    end: { line: 235, column: 127 },
                  },
                ],
                line: 235,
              },
              51: {
                loc: {
                  start: { line: 235, column: 12 },
                  end: { line: 235, column: 50 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 235, column: 12 },
                    end: { line: 235, column: 28 },
                  },
                  {
                    start: { line: 235, column: 32 },
                    end: { line: 235, column: 50 },
                  },
                ],
                line: 235,
              },
              52: {
                loc: {
                  start: { line: 235, column: 70 },
                  end: { line: 235, column: 126 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 235, column: 95 },
                    end: { line: 235, column: 100 },
                  },
                  {
                    start: { line: 235, column: 103 },
                    end: { line: 235, column: 126 },
                  },
                ],
                line: 235,
              },
              53: {
                loc: {
                  start: { line: 311, column: 29 },
                  end: { line: 311, column: 44 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 311, column: 29 },
                    end: { line: 311, column: 38 },
                  },
                  {
                    start: { line: 311, column: 42 },
                    end: { line: 311, column: 44 },
                  },
                ],
                line: 311,
              },
              54: {
                loc: {
                  start: { line: 312, column: 32 },
                  end: { line: 312, column: 103 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 312, column: 59 },
                    end: { line: 312, column: 99 },
                  },
                  {
                    start: { line: 312, column: 102 },
                    end: { line: 312, column: 103 },
                  },
                ],
                line: 312,
              },
              55: {
                loc: {
                  start: { line: 320, column: 33 },
                  end: { line: 320, column: 90 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 320, column: 58 },
                    end: { line: 320, column: 71 },
                  },
                  {
                    start: { line: 320, column: 74 },
                    end: { line: 320, column: 90 },
                  },
                ],
                line: 320,
              },
              56: {
                loc: {
                  start: { line: 335, column: 33 },
                  end: { line: 335, column: 90 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 335, column: 58 },
                    end: { line: 335, column: 71 },
                  },
                  {
                    start: { line: 335, column: 74 },
                    end: { line: 335, column: 90 },
                  },
                ],
                line: 335,
              },
              57: {
                loc: {
                  start: { line: 336, column: 12 },
                  end: { line: 338, column: 13 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 336, column: 12 },
                    end: { line: 338, column: 13 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 336,
              },
              58: {
                loc: {
                  start: { line: 393, column: 45 },
                  end: { line: 393, column: 56 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 393, column: 54 },
                    end: { line: 393, column: 56 },
                  },
                ],
                line: 393,
              },
              59: {
                loc: {
                  start: { line: 401, column: 33 },
                  end: { line: 401, column: 98 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 401, column: 58 },
                    end: { line: 401, column: 71 },
                  },
                  {
                    start: { line: 401, column: 74 },
                    end: { line: 401, column: 98 },
                  },
                ],
                line: 401,
              },
              60: {
                loc: {
                  start: { line: 416, column: 33 },
                  end: { line: 416, column: 99 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 416, column: 58 },
                    end: { line: 416, column: 71 },
                  },
                  {
                    start: { line: 416, column: 74 },
                    end: { line: 416, column: 99 },
                  },
                ],
                line: 416,
              },
              61: {
                loc: {
                  start: { line: 448, column: 22 },
                  end: { line: 448, column: 71 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 448, column: 22 },
                    end: { line: 448, column: 65 },
                  },
                  {
                    start: { line: 448, column: 69 },
                    end: { line: 448, column: 71 },
                  },
                ],
                line: 448,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
              68: 0,
              69: 0,
              70: 0,
              71: 0,
              72: 0,
              73: 0,
              74: 0,
              75: 0,
              76: 0,
              77: 0,
              78: 0,
              79: 0,
              80: 0,
              81: 0,
              82: 0,
              83: 0,
              84: 0,
              85: 0,
              86: 0,
              87: 0,
              88: 0,
              89: 0,
              90: 0,
              91: 0,
              92: 0,
              93: 0,
              94: 0,
              95: 0,
              96: 0,
              97: 0,
              98: 0,
              99: 0,
              100: 0,
              101: 0,
              102: 0,
              103: 0,
              104: 0,
              105: 0,
              106: 0,
              107: 0,
              108: 0,
              109: 0,
              110: 0,
              111: 0,
              112: 0,
              113: 0,
              114: 0,
              115: 0,
              116: 0,
              117: 0,
              118: 0,
              119: 0,
              120: 0,
              121: 0,
              122: 0,
              123: 0,
              124: 0,
              125: 0,
              126: 0,
              127: 0,
              128: 0,
              129: 0,
              130: 0,
              131: 0,
              132: 0,
              133: 0,
              134: 0,
              135: 0,
              136: 0,
              137: 0,
              138: 0,
              139: 0,
              140: 0,
              141: 0,
              142: 0,
              143: 0,
              144: 0,
              145: 0,
              146: 0,
              147: 0,
              148: 0,
              149: 0,
              150: 0,
              151: 0,
              152: 0,
              153: 0,
              154: 0,
              155: 0,
              156: 0,
              157: 0,
              158: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
            },
            b: {
              0: [0],
              1: [0],
              2: [0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0],
              27: [0, 0],
              28: [0, 0],
              29: [0, 0],
              30: [0, 0],
              31: [0, 0],
              32: [0, 0],
              33: [0, 0],
              34: [0, 0],
              35: [0, 0],
              36: [0, 0],
              37: [0, 0],
              38: [0, 0],
              39: [0, 0],
              40: [0, 0],
              41: [0, 0],
              42: [0, 0],
              43: [0, 0],
              44: [0, 0],
              45: [0, 0],
              46: [0, 0],
              47: [0, 0],
              48: [0, 0],
              49: [0, 0],
              50: [0, 0],
              51: [0, 0],
              52: [0, 0],
              53: [0, 0],
              54: [0, 0],
              55: [0, 0],
              56: [0, 0],
              57: [0, 0],
              58: [0],
              59: [0, 0],
              60: [0, 0],
              61: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/hooks/use-export.ts',
              ],
              sourcesContent: [
                "import { useCallback, useMemo, useState } from 'react'\nimport { type Note } from '../types/note'\nimport {\n  type BulkExportOptions,\n  type ExportFormat,\n  type ExportHistoryEntry,\n  type ExportOptions,\n  type ExportResult,\n} from '../types/export'\nimport { exportService } from '../lib/export'\nimport { toast } from 'sonner'\nimport { type Descendant } from 'slate'\n\ninterface UseExportState {\n  isExporting: boolean\n  progress: number\n  error: string | null\n  lastResult: ExportResult | null\n}\n\ninterface UseExportOptions {\n  onSuccess?: (result: ExportResult) => void\n  onError?: (error: Error) => void\n  onProgress?: (progress: number) => void\n  autoDownload?: boolean\n  showToasts?: boolean\n}\n\n/**\n * Hook for managing note exports\n */\nexport function useExport(options: UseExportOptions = {}) {\n  const {\n    onSuccess,\n    onError,\n    onProgress,\n    autoDownload = true,\n    showToasts = true,\n  } = options\n\n  const [state, setState] = useState<UseExportState>({\n    isExporting: false,\n    progress: 0,\n    error: null,\n    lastResult: null,\n  })\n\n  // Use the singleton export service instance\n\n  /**\n   * Export a single note\n   */\n  const exportNote = useCallback(\n    async (\n      note: Note,\n      exportOptions: ExportOptions\n    ): Promise<ExportResult | null> => {\n      try {\n        setState((prev) => ({\n          ...prev,\n          isExporting: true,\n          error: null,\n          progress: 0,\n        }))\n\n        if (showToasts) {\n          toast.loading('Preparing export...', { id: 'export-progress' })\n        }\n\n        // Basic validation\n        if (!note || !note.content) {\n          throw new Error('Cannot export note: Invalid note data')\n        }\n\n        // Show progress\n        // Estimation not needed for now\n\n        onProgress?.(25)\n        setState((prev) => ({ ...prev, progress: 25 }))\n\n        // Convert Note to Descendant[] for old export service\n        const content = JSON.parse(note.content) as Descendant[]\n        const metadata = {\n          title: note.title,\n          createdAt: new Date(note.created_at),\n          updatedAt: new Date(note.updated_at),\n          tags: note.tags || [],\n        }\n\n        // Perform the export\n        const result = await exportService.export(\n          content,\n          exportOptions,\n          metadata\n        )\n\n        onProgress?.(75)\n        setState((prev) => ({ ...prev, progress: 75 }))\n\n        // Handle the result\n        if (autoDownload && result.success) {\n          exportService.downloadFile(result)\n        }\n\n        onProgress?.(100)\n\n        // Convert lib/export ExportResult to types/export ExportResult\n        let exportContent = ''\n        if (result.data) {\n          if (result.data instanceof Blob) {\n            // For blob data, we'll store as string (base64 or text depending on type)\n            // For now, we'll just indicate it's a blob\n            exportContent = '[Binary content]'\n          } else {\n            exportContent = result.data\n          }\n        }\n\n        const exportResult: ExportResult = {\n          content: exportContent,\n          filename: result.fileName,\n          mimeType: result.mimeType,\n          size: result.data\n            ? result.data instanceof Blob\n              ? result.data.size\n              : result.data.length\n            : 0,\n          format: exportOptions.format,\n          exportedAt: new Date().toISOString(),\n          additionalFiles: [],\n        }\n\n        setState((prev) => ({\n          ...prev,\n          isExporting: false,\n          progress: 100,\n          lastResult: exportResult,\n        }))\n\n        if (showToasts) {\n          toast.success(\n            `Successfully exported to ${exportOptions.format.toUpperCase()}`,\n            { id: 'export-progress' }\n          )\n        }\n\n        onSuccess?.(exportResult)\n        return exportResult\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Export failed'\n\n        setState((prev) => ({\n          ...prev,\n          isExporting: false,\n          error: errorMessage,\n          progress: 0,\n        }))\n\n        if (showToasts) {\n          toast.error(`Export failed: ${errorMessage}`, {\n            id: 'export-progress',\n          })\n        }\n\n        onError?.(error instanceof Error ? error : new Error(errorMessage))\n        return null\n      }\n    },\n    [autoDownload, showToasts, onSuccess, onError, onProgress]\n  )\n\n  /**\n   * Export multiple notes\n   */\n  const exportNotes = useCallback(\n    async (\n      notes: Note[],\n      exportOptions: BulkExportOptions\n    ): Promise<ExportResult | null> => {\n      try {\n        setState((prev) => ({\n          ...prev,\n          isExporting: true,\n          error: null,\n          progress: 0,\n        }))\n\n        if (showToasts) {\n          toast.loading(`Exporting ${notes.length} notes...`, {\n            id: 'export-progress',\n          })\n        }\n\n        // Validate all notes\n        for (const note of notes) {\n          if (!note || !note.content) {\n            throw new Error(\n              `Cannot export note \"${note.title}\": Invalid note data`\n            )\n          }\n        }\n\n        onProgress?.(20)\n        setState((prev) => ({ ...prev, progress: 20 }))\n\n        // Export service doesn't have exportNotes, export one by one\n        // This is a temporary workaround\n        const results: ExportResult[] = []\n\n        for (let i = 0; i < notes.length; i++) {\n          const note = notes[i]\n          const content = JSON.parse(note.content) as Descendant[]\n          const metadata = {\n            title: note.title,\n            createdAt: new Date(note.created_at),\n            updatedAt: new Date(note.updated_at),\n            tags: note.tags || [],\n          }\n\n          const singleResult = await exportService.export(\n            content,\n            { format: exportOptions.format },\n            metadata\n          )\n\n          if (!singleResult.success) {\n            throw new Error(singleResult.error || 'Export failed')\n          }\n\n          // Convert to ExportResult type\n          let exportContent = ''\n          if (singleResult.data) {\n            if (singleResult.data instanceof Blob) {\n              exportContent = '[Binary content]'\n            } else {\n              exportContent = singleResult.data\n            }\n          }\n\n          const exportResult: ExportResult = {\n            content: exportContent,\n            filename: singleResult.fileName,\n            mimeType: singleResult.mimeType,\n            size: singleResult.data\n              ? singleResult.data instanceof Blob\n                ? singleResult.data.size\n                : singleResult.data.length\n              : 0,\n            format: exportOptions.format,\n            exportedAt: new Date().toISOString(),\n            additionalFiles: [],\n          }\n\n          results.push(exportResult)\n        }\n\n        // For now, return the first result\n        // TODO: Implement proper bulk export that creates a zip\n        const result = results[0]\n\n        onProgress?.(80)\n        setState((prev) => ({ ...prev, progress: 80 }))\n\n        // Handle the result\n        if (autoDownload && result) {\n          // For now, download each file individually\n          // TODO: Create a zip file for bulk downloads\n          for (const res of results) {\n            // res.content is now always a string\n            const blob = new Blob([res.content], { type: res.mimeType })\n            const url = URL.createObjectURL(blob)\n            const link = document.createElement('a')\n            link.href = url\n            link.download = res.filename\n            link.click()\n            URL.revokeObjectURL(url)\n          }\n        }\n\n        onProgress?.(100)\n        setState((prev) => ({\n          ...prev,\n          isExporting: false,\n          progress: 100,\n          lastResult: result,\n        }))\n\n        if (showToasts) {\n          toast.success(\n            `Successfully exported ${notes.length} notes to ${exportOptions.format.toUpperCase()}`,\n            { id: 'export-progress' }\n          )\n        }\n\n        onSuccess?.(result)\n        return result\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Bulk export failed'\n\n        setState((prev) => ({\n          ...prev,\n          isExporting: false,\n          error: errorMessage,\n          progress: 0,\n        }))\n\n        if (showToasts) {\n          toast.error(`Bulk export failed: ${errorMessage}`, {\n            id: 'export-progress',\n          })\n        }\n\n        onError?.(error instanceof Error ? error : new Error(errorMessage))\n        return null\n      }\n    },\n    [autoDownload, showToasts, onSuccess, onError, onProgress]\n  )\n\n  /**\n   * Format-specific export functions\n   */\n  const exportToMarkdown = useCallback(\n    (note: Note, options?: Partial<ExportOptions>) => {\n      const defaultOptions: ExportOptions = {\n        format: 'markdown',\n        includeFrontMatter: true,\n        includeDates: true,\n        includeTags: true,\n      }\n      return exportNote(note, {\n        ...defaultOptions,\n        ...options,\n      })\n    },\n    [exportNote]\n  )\n\n  const exportToPDF = useCallback(\n    (note: Note, options?: Partial<ExportOptions>) => {\n      const defaultOptions: ExportOptions = {\n        format: 'pdf',\n        includeFrontMatter: true,\n        includeDates: true,\n        includeTags: true,\n      }\n      return exportNote(note, {\n        ...defaultOptions,\n        ...options,\n      })\n    },\n    [exportNote]\n  )\n\n  const exportToHTML = useCallback(\n    (note: Note, options?: Partial<ExportOptions>) => {\n      const defaultOptions: ExportOptions = {\n        format: 'html',\n        includeFrontMatter: true,\n        includeDates: true,\n        includeTags: true,\n      }\n      return exportNote(note, {\n        ...defaultOptions,\n        ...options,\n      })\n    },\n    [exportNote]\n  )\n\n  const exportToReact = useCallback(\n    (note: Note, options?: Partial<ExportOptions>) => {\n      const defaultOptions: ExportOptions = {\n        format: 'react',\n        includeFrontMatter: true,\n        includeDates: true,\n        includeTags: true,\n      }\n      return exportNote(note, {\n        ...defaultOptions,\n        ...options,\n      })\n    },\n    [exportNote]\n  )\n\n  /**\n   * Preview export without generating full file\n   */\n  const previewExport = useCallback(\n    async (\n      note: Note,\n      _format: ExportFormat,\n      _options?: Partial<ExportOptions>\n    ) => {\n      try {\n        // Preview export is not implemented in current export service\n        // Generate a simple preview\n        const content = JSON.parse(note.content) as Descendant[]\n        const wordCount = content.reduce((count, node) => {\n          const text = (node as any).text || ''\n          return (\n            count +\n            (typeof text === 'string'\n              ? text.split(/\\s+/).filter(Boolean).length\n              : 0)\n          )\n        }, 0)\n        return {\n          content: JSON.stringify(content, null, 2),\n          wordCount,\n          estimatedSize: JSON.stringify(content).length,\n        }\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Preview failed'\n        setState((prev) => ({ ...prev, error: errorMessage }))\n        throw error\n      }\n    },\n    []\n  )\n\n  /**\n   * Share export result\n   */\n  const shareResult = useCallback(\n    async (_result: ExportResult) => {\n      try {\n        // Sharing not implemented in current export service\n        throw new Error('Sharing is not yet supported')\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Sharing failed'\n        if (showToasts) {\n          toast.error(`Sharing failed: ${errorMessage}`)\n        }\n        throw error\n      }\n    },\n    [showToasts]\n  )\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setState((prev) => ({ ...prev, error: null }))\n  }, [])\n\n  /**\n   * Reset state\n   */\n  const reset = useCallback(() => {\n    setState({\n      isExporting: false,\n      progress: 0,\n      error: null,\n      lastResult: null,\n    })\n  }, [])\n\n  return {\n    // State\n    isExporting: state.isExporting,\n    progress: state.progress,\n    error: state.error,\n    lastResult: state.lastResult,\n\n    // Actions\n    exportNote,\n    exportNotes,\n    exportToMarkdown,\n    exportToPDF,\n    exportToHTML,\n    exportToReact,\n    previewExport,\n    shareResult,\n    clearError,\n    reset,\n\n    // Utilities - removed (not available in current export service)\n    supportedFormats: exportService.getSupportedFormats(),\n    validateOptions: exportService.validateOptions.bind(exportService),\n  }\n}\n\n/**\n * Hook for managing export history\n */\nexport function useExportHistory(userId: string) {\n  const [history, setHistory] = useState<ExportHistoryEntry[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Use the singleton export service instance\n\n  /**\n   * Load export history\n   */\n  const loadHistory = useCallback(\n    async (_limit = 50) => {\n      try {\n        setIsLoading(true)\n        setError(null)\n        // Export history not implemented in current export service\n        const entries: ExportHistoryEntry[] = []\n        setHistory(entries)\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Failed to load history'\n        setError(errorMessage)\n      } finally {\n        setIsLoading(false)\n      }\n    },\n    [userId]\n  )\n\n  /**\n   * Delete export from history\n   */\n  const deleteExport = useCallback(async (_exportId: string) => {\n    try {\n      // Delete export not implemented in current export service\n      throw new Error('Delete export is not yet implemented')\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Failed to delete export'\n      toast.error(`Delete failed: ${errorMessage}`)\n      throw error\n    }\n  }, [])\n\n  /**\n   * Get export statistics\n   */\n  const getStats = useCallback(async () => {\n    // Export stats not implemented in current export service\n    return {\n      totalExports: 0,\n      byFormat: {},\n      totalSize: 0,\n    }\n  }, [])\n\n  return {\n    history,\n    isLoading,\n    error,\n    loadHistory,\n    deleteExport,\n    getStats,\n  }\n}\n\n/**\n * Hook for export format information\n */\nexport function useExportFormats() {\n  // Use the singleton export service instance\n\n  const formats = useMemo(() => {\n    return exportService.getSupportedFormats().map((format) => ({\n      value: format,\n      label: format.toUpperCase(),\n      icon: exportService.getFormatDetails(format).icon || '',\n      description: exportService.getFormatDetails(format).description,\n      defaultOptions: { format }, // Basic default options\n    }))\n  }, [])\n\n  return {\n    formats,\n    getFormatInfo: (format: ExportFormat) =>\n      formats.find((f) => f.value === format),\n  }\n}\n",
              ],
              names: [
                'useCallback',
                'useMemo',
                'useState',
                'exportService',
                'toast',
                'useExport',
                'options',
                'onSuccess',
                'onError',
                'onProgress',
                'autoDownload',
                'showToasts',
                'state',
                'setState',
                'isExporting',
                'progress',
                'error',
                'lastResult',
                'exportNote',
                'note',
                'exportOptions',
                'prev',
                'loading',
                'id',
                'content',
                'Error',
                'JSON',
                'parse',
                'metadata',
                'title',
                'createdAt',
                'Date',
                'created_at',
                'updatedAt',
                'updated_at',
                'tags',
                'result',
                'export',
                'success',
                'downloadFile',
                'exportContent',
                'data',
                'Blob',
                'exportResult',
                'filename',
                'fileName',
                'mimeType',
                'size',
                'length',
                'format',
                'exportedAt',
                'toISOString',
                'additionalFiles',
                'toUpperCase',
                'errorMessage',
                'message',
                'exportNotes',
                'notes',
                'results',
                'i',
                'singleResult',
                'push',
                'res',
                'blob',
                'type',
                'url',
                'URL',
                'createObjectURL',
                'link',
                'document',
                'createElement',
                'href',
                'download',
                'click',
                'revokeObjectURL',
                'exportToMarkdown',
                'defaultOptions',
                'includeFrontMatter',
                'includeDates',
                'includeTags',
                'exportToPDF',
                'exportToHTML',
                'exportToReact',
                'previewExport',
                '_format',
                '_options',
                'wordCount',
                'reduce',
                'count',
                'node',
                'text',
                'split',
                'filter',
                'Boolean',
                'stringify',
                'estimatedSize',
                'shareResult',
                '_result',
                'clearError',
                'reset',
                'supportedFormats',
                'getSupportedFormats',
                'validateOptions',
                'bind',
                'useExportHistory',
                'userId',
                'history',
                'setHistory',
                'isLoading',
                'setIsLoading',
                'setError',
                'loadHistory',
                '_limit',
                'entries',
                'deleteExport',
                '_exportId',
                'getStats',
                'totalExports',
                'byFormat',
                'totalSize',
                'useExportFormats',
                'formats',
                'map',
                'value',
                'label',
                'icon',
                'getFormatDetails',
                'description',
                'getFormatInfo',
                'find',
                'f',
              ],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: 'b06271aef6c4d519d14936633e1a7853a2ca3ca3',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          'b06271aef6c4d519d14936633e1a7853a2ca3ca3' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_277mb91jn4 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_277mb91jn4()
      var export_dialog_console = __webpack_require__(
        '../../node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js'
      )
      function cov_sepbe9o31() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/components/export/export-dialog.tsx',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverageData = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/components/export/export-dialog.tsx',
            statementMap: {
              0: {
                start: { line: 17, column: 28 },
                end: { line: 17, column: 49 },
              },
              1: {
                start: { line: 18, column: 48 },
                end: { line: 18, column: 77 },
              },
              2: {
                start: { line: 19, column: 34 },
                end: { line: 19, column: 95 },
              },
              3: {
                start: { line: 19, column: 53 },
                end: { line: 19, column: 94 },
              },
              4: {
                start: { line: 20, column: 34 },
                end: { line: 20, column: 54 },
              },
              5: {
                start: { line: 21, column: 24 },
                end: { line: 21, column: 42 },
              },
              6: {
                start: { line: 22, column: 72 },
                end: { line: 29, column: 6 },
              },
              7: {
                start: { line: 24, column: 12 },
                end: { line: 24, column: 27 },
              },
              8: {
                start: { line: 25, column: 12 },
                end: { line: 25, column: 112 },
              },
              9: {
                start: { line: 31, column: 4 },
                end: { line: 35, column: 7 },
              },
              10: {
                start: { line: 32, column: 8 },
                end: { line: 32, column: 63 },
              },
              11: {
                start: { line: 37, column: 4 },
                end: { line: 56, column: 7 },
              },
              12: {
                start: { line: 38, column: 32 },
                end: { line: 46, column: 9 },
              },
              13: {
                start: { line: 39, column: 12 },
                end: { line: 45, column: 13 },
              },
              14: {
                start: { line: 40, column: 31 },
                end: { line: 40, column: 81 },
              },
              15: {
                start: { line: 41, column: 16 },
                end: { line: 41, column: 35 },
              },
              16: {
                start: { line: 43, column: 16 },
                end: { line: 43, column: 65 },
              },
              17: {
                start: { line: 44, column: 16 },
                end: { line: 44, column: 33 },
              },
              18: {
                start: { line: 47, column: 8 },
                end: { line: 49, column: 9 },
              },
              19: {
                start: { line: 48, column: 12 },
                end: { line: 48, column: 30 },
              },
              20: {
                start: { line: 57, column: 25 },
                end: { line: 59, column: 5 },
              },
              21: {
                start: { line: 58, column: 8 },
                end: { line: 58, column: 40 },
              },
              22: {
                start: { line: 60, column: 26 },
                end: { line: 65, column: 5 },
              },
              23: {
                start: { line: 61, column: 8 },
                end: { line: 64, column: 16 },
              },
              24: {
                start: { line: 61, column: 28 },
                end: { line: 64, column: 13 },
              },
              25: {
                start: { line: 66, column: 4 },
                end: { line: 436, column: 7 },
              },
              26: {
                start: { line: 119, column: 72 },
                end: { line: 119, column: 96 },
              },
              27: {
                start: { line: 122, column: 65 },
                end: { line: 122, column: 92 },
              },
              28: {
                start: { line: 123, column: 52 },
                end: { line: 151, column: 69 },
              },
              29: {
                start: { line: 181, column: 84 },
                end: { line: 183, column: 62 },
              },
              30: {
                start: { line: 205, column: 84 },
                end: { line: 207, column: 62 },
              },
              31: {
                start: { line: 229, column: 84 },
                end: { line: 231, column: 62 },
              },
              32: {
                start: { line: 282, column: 82 },
                end: { line: 287, column: 62 },
              },
              33: {
                start: { line: 313, column: 84 },
                end: { line: 318, column: 62 },
              },
              34: {
                start: { line: 402, column: 53 },
                end: { line: 402, column: 67 },
              },
              35: {
                start: { line: 440, column: 4 },
                end: { line: 529, column: 7 },
              },
              36: {
                start: { line: 465, column: 52 },
                end: { line: 468, column: 30 },
              },
              37: {
                start: { line: 480, column: 48 },
                end: { line: 483, column: 30 },
              },
              38: {
                start: { line: 532, column: 4 },
                end: { line: 622, column: 7 },
              },
              39: {
                start: { line: 547, column: 48 },
                end: { line: 549, column: 30 },
              },
              40: {
                start: { line: 555, column: 54 },
                end: { line: 567, column: 38 },
              },
              41: {
                start: { line: 589, column: 52 },
                end: { line: 592, column: 30 },
              },
              42: {
                start: { line: 614, column: 52 },
                end: { line: 617, column: 30 },
              },
              43: {
                start: { line: 625, column: 4 },
                end: { line: 708, column: 7 },
              },
              44: {
                start: { line: 650, column: 52 },
                end: { line: 653, column: 30 },
              },
              45: {
                start: { line: 675, column: 52 },
                end: { line: 678, column: 30 },
              },
              46: {
                start: { line: 700, column: 52 },
                end: { line: 703, column: 30 },
              },
              47: {
                start: { line: 711, column: 4 },
                end: { line: 807, column: 7 },
              },
              48: {
                start: { line: 736, column: 52 },
                end: { line: 739, column: 30 },
              },
              49: {
                start: { line: 751, column: 48 },
                end: { line: 754, column: 30 },
              },
              50: {
                start: { line: 772, column: 53 },
                end: { line: 784, column: 43 },
              },
              51: {
                start: { line: 798, column: 39 },
                end: { line: 801, column: 30 },
              },
              52: {
                start: { line: 811, column: 4 },
                end: { line: 811, column: 38 },
              },
              53: {
                start: { line: 811, column: 21 },
                end: { line: 811, column: 38 },
              },
              54: {
                start: { line: 812, column: 14 },
                end: { line: 812, column: 18 },
              },
              55: {
                start: { line: 813, column: 18 },
                end: { line: 818, column: 5 },
              },
              56: {
                start: { line: 819, column: 14 },
                end: { line: 819, column: 55 },
              },
              57: {
                start: { line: 820, column: 4 },
                end: { line: 820, column: 76 },
              },
              58: {
                start: { line: 824, column: 24 },
                end: { line: 835, column: 5 },
              },
              59: {
                start: { line: 836, column: 4 },
                end: { line: 880, column: 5 },
              },
              60: {
                start: { line: 838, column: 12 },
                end: { line: 843, column: 14 },
              },
              61: {
                start: { line: 845, column: 12 },
                end: { line: 858, column: 14 },
              },
              62: {
                start: { line: 860, column: 12 },
                end: { line: 868, column: 14 },
              },
              63: {
                start: { line: 870, column: 12 },
                end: { line: 877, column: 14 },
              },
              64: {
                start: { line: 879, column: 12 },
                end: { line: 879, column: 31 },
              },
              65: {
                start: { line: 883, column: 18 },
                end: { line: 888, column: 5 },
              },
              66: {
                start: { line: 889, column: 4 },
                end: { line: 889, column: 37 },
              },
              67: {
                start: { line: 891, column: 0 },
                end: { line: 983, column: 2 },
              },
            },
            fnMap: {
              0: {
                name: 'ExportDialog',
                decl: {
                  start: { line: 15, column: 16 },
                  end: { line: 15, column: 28 },
                },
                loc: {
                  start: { line: 15, column: 95 },
                  end: { line: 437, column: 1 },
                },
                line: 15,
              },
              1: {
                name: '(anonymous_1)',
                decl: {
                  start: { line: 19, column: 49 },
                  end: { line: 19, column: 50 },
                },
                loc: {
                  start: { line: 19, column: 53 },
                  end: { line: 19, column: 94 },
                },
                line: 19,
              },
              2: {
                name: '(anonymous_2)',
                decl: {
                  start: { line: 23, column: 19 },
                  end: { line: 23, column: 20 },
                },
                loc: {
                  start: { line: 23, column: 29 },
                  end: { line: 26, column: 9 },
                },
                line: 23,
              },
              3: {
                name: '(anonymous_3)',
                decl: {
                  start: { line: 31, column: 20 },
                  end: { line: 31, column: 21 },
                },
                loc: {
                  start: { line: 31, column: 24 },
                  end: { line: 33, column: 5 },
                },
                line: 31,
              },
              4: {
                name: '(anonymous_4)',
                decl: {
                  start: { line: 37, column: 20 },
                  end: { line: 37, column: 21 },
                },
                loc: {
                  start: { line: 37, column: 24 },
                  end: { line: 50, column: 5 },
                },
                line: 37,
              },
              5: {
                name: '(anonymous_5)',
                decl: {
                  start: { line: 38, column: 32 },
                  end: { line: 38, column: 33 },
                },
                loc: {
                  start: { line: 38, column: 42 },
                  end: { line: 46, column: 9 },
                },
                line: 38,
              },
              6: {
                name: '(anonymous_6)',
                decl: {
                  start: { line: 57, column: 25 },
                  end: { line: 57, column: 26 },
                },
                loc: {
                  start: { line: 57, column: 35 },
                  end: { line: 59, column: 5 },
                },
                line: 57,
              },
              7: {
                name: '(anonymous_7)',
                decl: {
                  start: { line: 60, column: 26 },
                  end: { line: 60, column: 27 },
                },
                loc: {
                  start: { line: 60, column: 37 },
                  end: { line: 65, column: 5 },
                },
                line: 60,
              },
              8: {
                name: '(anonymous_8)',
                decl: {
                  start: { line: 61, column: 19 },
                  end: { line: 61, column: 20 },
                },
                loc: {
                  start: { line: 61, column: 28 },
                  end: { line: 64, column: 13 },
                },
                line: 61,
              },
              9: {
                name: '(anonymous_9)',
                decl: {
                  start: { line: 119, column: 63 },
                  end: { line: 119, column: 64 },
                },
                loc: {
                  start: { line: 119, column: 72 },
                  end: { line: 119, column: 96 },
                },
                line: 119,
              },
              10: {
                name: '(anonymous_10)',
                decl: {
                  start: { line: 121, column: 70 },
                  end: { line: 121, column: 71 },
                },
                loc: {
                  start: { line: 121, column: 80 },
                  end: { line: 152, column: 49 },
                },
                line: 121,
              },
              11: {
                name: '(anonymous_11)',
                decl: {
                  start: { line: 181, column: 73 },
                  end: { line: 181, column: 74 },
                },
                loc: {
                  start: { line: 181, column: 84 },
                  end: { line: 183, column: 62 },
                },
                line: 181,
              },
              12: {
                name: '(anonymous_12)',
                decl: {
                  start: { line: 205, column: 73 },
                  end: { line: 205, column: 74 },
                },
                loc: {
                  start: { line: 205, column: 84 },
                  end: { line: 207, column: 62 },
                },
                line: 205,
              },
              13: {
                name: '(anonymous_13)',
                decl: {
                  start: { line: 229, column: 73 },
                  end: { line: 229, column: 74 },
                },
                loc: {
                  start: { line: 229, column: 84 },
                  end: { line: 231, column: 62 },
                },
                line: 229,
              },
              14: {
                name: '(anonymous_14)',
                decl: {
                  start: { line: 282, column: 71 },
                  end: { line: 282, column: 72 },
                },
                loc: {
                  start: { line: 282, column: 82 },
                  end: { line: 287, column: 62 },
                },
                line: 282,
              },
              15: {
                name: '(anonymous_15)',
                decl: {
                  start: { line: 313, column: 73 },
                  end: { line: 313, column: 74 },
                },
                loc: {
                  start: { line: 313, column: 84 },
                  end: { line: 318, column: 62 },
                },
                line: 313,
              },
              16: {
                name: '(anonymous_16)',
                decl: {
                  start: { line: 402, column: 49 },
                  end: { line: 402, column: 50 },
                },
                loc: {
                  start: { line: 402, column: 53 },
                  end: { line: 402, column: 67 },
                },
                line: 402,
              },
              17: {
                name: 'MarkdownOptions',
                decl: {
                  start: { line: 439, column: 9 },
                  end: { line: 439, column: 24 },
                },
                loc: {
                  start: { line: 439, column: 48 },
                  end: { line: 530, column: 1 },
                },
                line: 439,
              },
              18: {
                name: '(anonymous_18)',
                decl: {
                  start: { line: 465, column: 41 },
                  end: { line: 465, column: 42 },
                },
                loc: {
                  start: { line: 465, column: 52 },
                  end: { line: 468, column: 30 },
                },
                line: 465,
              },
              19: {
                name: '(anonymous_19)',
                decl: {
                  start: { line: 480, column: 39 },
                  end: { line: 480, column: 40 },
                },
                loc: {
                  start: { line: 480, column: 48 },
                  end: { line: 483, column: 30 },
                },
                line: 480,
              },
              20: {
                name: 'PDFOptions',
                decl: {
                  start: { line: 531, column: 9 },
                  end: { line: 531, column: 19 },
                },
                loc: {
                  start: { line: 531, column: 43 },
                  end: { line: 623, column: 1 },
                },
                line: 531,
              },
              21: {
                name: '(anonymous_21)',
                decl: {
                  start: { line: 547, column: 39 },
                  end: { line: 547, column: 40 },
                },
                loc: {
                  start: { line: 547, column: 48 },
                  end: { line: 549, column: 30 },
                },
                line: 547,
              },
              22: {
                name: '(anonymous_22)',
                decl: {
                  start: { line: 555, column: 30 },
                  end: { line: 555, column: 31 },
                },
                loc: {
                  start: { line: 555, column: 54 },
                  end: { line: 567, column: 38 },
                },
                line: 555,
              },
              23: {
                name: '(anonymous_23)',
                decl: {
                  start: { line: 589, column: 41 },
                  end: { line: 589, column: 42 },
                },
                loc: {
                  start: { line: 589, column: 52 },
                  end: { line: 592, column: 30 },
                },
                line: 589,
              },
              24: {
                name: '(anonymous_24)',
                decl: {
                  start: { line: 614, column: 41 },
                  end: { line: 614, column: 42 },
                },
                loc: {
                  start: { line: 614, column: 52 },
                  end: { line: 617, column: 30 },
                },
                line: 614,
              },
              25: {
                name: 'HTMLOptions',
                decl: {
                  start: { line: 624, column: 9 },
                  end: { line: 624, column: 20 },
                },
                loc: {
                  start: { line: 624, column: 44 },
                  end: { line: 709, column: 1 },
                },
                line: 624,
              },
              26: {
                name: '(anonymous_26)',
                decl: {
                  start: { line: 650, column: 41 },
                  end: { line: 650, column: 42 },
                },
                loc: {
                  start: { line: 650, column: 52 },
                  end: { line: 653, column: 30 },
                },
                line: 650,
              },
              27: {
                name: '(anonymous_27)',
                decl: {
                  start: { line: 675, column: 41 },
                  end: { line: 675, column: 42 },
                },
                loc: {
                  start: { line: 675, column: 52 },
                  end: { line: 678, column: 30 },
                },
                line: 675,
              },
              28: {
                name: '(anonymous_28)',
                decl: {
                  start: { line: 700, column: 41 },
                  end: { line: 700, column: 42 },
                },
                loc: {
                  start: { line: 700, column: 52 },
                  end: { line: 703, column: 30 },
                },
                line: 700,
              },
              29: {
                name: 'ReactOptions',
                decl: {
                  start: { line: 710, column: 9 },
                  end: { line: 710, column: 21 },
                },
                loc: {
                  start: { line: 710, column: 45 },
                  end: { line: 808, column: 1 },
                },
                line: 710,
              },
              30: {
                name: '(anonymous_30)',
                decl: {
                  start: { line: 736, column: 41 },
                  end: { line: 736, column: 42 },
                },
                loc: {
                  start: { line: 736, column: 52 },
                  end: { line: 739, column: 30 },
                },
                line: 736,
              },
              31: {
                name: '(anonymous_31)',
                decl: {
                  start: { line: 751, column: 39 },
                  end: { line: 751, column: 40 },
                },
                loc: {
                  start: { line: 751, column: 48 },
                  end: { line: 754, column: 30 },
                },
                line: 751,
              },
              32: {
                name: '(anonymous_32)',
                decl: {
                  start: { line: 772, column: 30 },
                  end: { line: 772, column: 31 },
                },
                loc: {
                  start: { line: 772, column: 53 },
                  end: { line: 784, column: 43 },
                },
                line: 772,
              },
              33: {
                name: '(anonymous_33)',
                decl: {
                  start: { line: 798, column: 34 },
                  end: { line: 798, column: 35 },
                },
                loc: {
                  start: { line: 798, column: 39 },
                  end: { line: 801, column: 30 },
                },
                line: 798,
              },
              34: {
                name: 'formatFileSize',
                decl: {
                  start: { line: 810, column: 9 },
                  end: { line: 810, column: 23 },
                },
                loc: {
                  start: { line: 810, column: 31 },
                  end: { line: 821, column: 1 },
                },
                line: 810,
              },
              35: {
                name: 'getDefaultOptionsForFormat',
                decl: {
                  start: { line: 822, column: 9 },
                  end: { line: 822, column: 35 },
                },
                loc: {
                  start: { line: 822, column: 44 },
                  end: { line: 881, column: 1 },
                },
                line: 822,
              },
              36: {
                name: 'getFormatIcon',
                decl: {
                  start: { line: 882, column: 9 },
                  end: { line: 882, column: 22 },
                },
                loc: {
                  start: { line: 882, column: 31 },
                  end: { line: 890, column: 1 },
                },
                line: 882,
              },
            },
            branchMap: {
              0: {
                loc: {
                  start: { line: 15, column: 47 },
                  end: { line: 15, column: 73 },
                },
                type: 'default-arg',
                locations: [
                  {
                    start: { line: 15, column: 63 },
                    end: { line: 15, column: 73 },
                  },
                ],
                line: 15,
              },
              1: {
                loc: {
                  start: { line: 25, column: 12 },
                  end: { line: 25, column: 111 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 25, column: 71 },
                    end: { line: 25, column: 77 },
                  },
                  {
                    start: { line: 25, column: 80 },
                    end: { line: 25, column: 111 },
                  },
                ],
                line: 25,
              },
              2: {
                loc: {
                  start: { line: 25, column: 12 },
                  end: { line: 25, column: 68 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 25, column: 12 },
                    end: { line: 25, column: 37 },
                  },
                  {
                    start: { line: 25, column: 41 },
                    end: { line: 25, column: 68 },
                  },
                ],
                line: 25,
              },
              3: {
                loc: {
                  start: { line: 47, column: 8 },
                  end: { line: 49, column: 9 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 47, column: 8 },
                    end: { line: 49, column: 9 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 47,
              },
              4: {
                loc: {
                  start: { line: 47, column: 12 },
                  end: { line: 47, column: 24 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 47, column: 12 },
                    end: { line: 47, column: 16 },
                  },
                  {
                    start: { line: 47, column: 20 },
                    end: { line: 47, column: 24 },
                  },
                ],
                line: 47,
              },
              5: {
                loc: {
                  start: { line: 72, column: 26 },
                  end: { line: 81, column: 18 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 72, column: 26 },
                    end: { line: 72, column: 34 },
                  },
                  {
                    start: { line: 72, column: 52 },
                    end: { line: 81, column: 18 },
                  },
                ],
                line: 72,
              },
              6: {
                loc: {
                  start: { line: 124, column: 156 },
                  end: { line: 124, column: 256 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 124, column: 190 },
                    end: { line: 124, column: 219 },
                  },
                  {
                    start: { line: 124, column: 222 },
                    end: { line: 124, column: 256 },
                  },
                ],
                line: 124,
              },
              7: {
                loc: {
                  start: { line: 237, column: 36 },
                  end: { line: 240, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 237, column: 36 },
                    end: { line: 237, column: 65 },
                  },
                  {
                    start: { line: 237, column: 83 },
                    end: { line: 240, column: 38 },
                  },
                ],
                line: 237,
              },
              8: {
                loc: {
                  start: { line: 241, column: 36 },
                  end: { line: 244, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 241, column: 36 },
                    end: { line: 241, column: 60 },
                  },
                  {
                    start: { line: 241, column: 78 },
                    end: { line: 244, column: 38 },
                  },
                ],
                line: 241,
              },
              9: {
                loc: {
                  start: { line: 245, column: 36 },
                  end: { line: 248, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 245, column: 36 },
                    end: { line: 245, column: 61 },
                  },
                  {
                    start: { line: 245, column: 79 },
                    end: { line: 248, column: 38 },
                  },
                ],
                line: 245,
              },
              10: {
                loc: {
                  start: { line: 249, column: 36 },
                  end: { line: 252, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 249, column: 36 },
                    end: { line: 249, column: 62 },
                  },
                  {
                    start: { line: 249, column: 80 },
                    end: { line: 252, column: 38 },
                  },
                ],
                line: 249,
              },
              11: {
                loc: {
                  start: { line: 272, column: 68 },
                  end: { line: 272, column: 193 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 272, column: 69 },
                    end: { line: 272, column: 186 },
                  },
                  {
                    start: { line: 272, column: 191 },
                    end: { line: 272, column: 193 },
                  },
                ],
                line: 272,
              },
              12: {
                loc: {
                  start: { line: 272, column: 69 },
                  end: { line: 272, column: 186 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 272, column: 148 },
                    end: { line: 272, column: 154 },
                  },
                  {
                    start: { line: 272, column: 157 },
                    end: { line: 272, column: 186 },
                  },
                ],
                line: 272,
              },
              13: {
                loc: {
                  start: { line: 272, column: 69 },
                  end: { line: 272, column: 145 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 272, column: 69 },
                    end: { line: 272, column: 114 },
                  },
                  {
                    start: { line: 272, column: 118 },
                    end: { line: 272, column: 145 },
                  },
                ],
                line: 272,
              },
              14: {
                loc: {
                  start: { line: 280, column: 60 },
                  end: { line: 280, column: 188 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 280, column: 61 },
                    end: { line: 280, column: 181 },
                  },
                  {
                    start: { line: 280, column: 186 },
                    end: { line: 280, column: 188 },
                  },
                ],
                line: 280,
              },
              15: {
                loc: {
                  start: { line: 280, column: 61 },
                  end: { line: 280, column: 181 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 280, column: 142 },
                    end: { line: 280, column: 148 },
                  },
                  {
                    start: { line: 280, column: 151 },
                    end: { line: 280, column: 181 },
                  },
                ],
                line: 280,
              },
              16: {
                loc: {
                  start: { line: 280, column: 61 },
                  end: { line: 280, column: 139 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 280, column: 61 },
                    end: { line: 280, column: 107 },
                  },
                  {
                    start: { line: 280, column: 111 },
                    end: { line: 280, column: 139 },
                  },
                ],
                line: 280,
              },
              17: {
                loc: {
                  start: { line: 312, column: 65 },
                  end: { line: 312, column: 185 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 312, column: 146 },
                    end: { line: 312, column: 152 },
                  },
                  {
                    start: { line: 312, column: 155 },
                    end: { line: 312, column: 185 },
                  },
                ],
                line: 312,
              },
              18: {
                loc: {
                  start: { line: 312, column: 65 },
                  end: { line: 312, column: 143 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 312, column: 65 },
                    end: { line: 312, column: 111 },
                  },
                  {
                    start: { line: 312, column: 115 },
                    end: { line: 312, column: 143 },
                  },
                ],
                line: 312,
              },
              19: {
                loc: {
                  start: { line: 336, column: 44 },
                  end: { line: 351, column: 46 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 336, column: 44 },
                    end: { line: 336, column: 51 },
                  },
                  {
                    start: { line: 336, column: 69 },
                    end: { line: 351, column: 46 },
                  },
                ],
                line: 336,
              },
              20: {
                loc: {
                  start: { line: 356, column: 50 },
                  end: { line: 372, column: 42 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 356, column: 74 },
                    end: { line: 359, column: 42 },
                  },
                  {
                    start: { line: 359, column: 59 },
                    end: { line: 372, column: 42 },
                  },
                ],
                line: 356,
              },
              21: {
                loc: {
                  start: { line: 374, column: 36 },
                  end: { line: 385, column: 38 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 374, column: 36 },
                    end: { line: 374, column: 41 },
                  },
                  {
                    start: { line: 374, column: 59 },
                    end: { line: 385, column: 38 },
                  },
                ],
                line: 374,
              },
              22: {
                loc: {
                  start: { line: 395, column: 42 },
                  end: { line: 395, column: 82 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 395, column: 42 },
                    end: { line: 395, column: 52 },
                  },
                  {
                    start: { line: 395, column: 56 },
                    end: { line: 395, column: 82 },
                  },
                ],
                line: 395,
              },
              23: {
                loc: {
                  start: { line: 410, column: 50 },
                  end: { line: 427, column: 42 },
                },
                type: 'cond-expr',
                locations: [
                  {
                    start: { line: 410, column: 78 },
                    end: { line: 419, column: 42 },
                  },
                  {
                    start: { line: 419, column: 59 },
                    end: { line: 427, column: 42 },
                  },
                ],
                line: 410,
              },
              24: {
                loc: {
                  start: { line: 797, column: 31 },
                  end: { line: 797, column: 58 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 797, column: 31 },
                    end: { line: 797, column: 52 },
                  },
                  {
                    start: { line: 797, column: 56 },
                    end: { line: 797, column: 58 },
                  },
                ],
                line: 797,
              },
              25: {
                loc: {
                  start: { line: 811, column: 4 },
                  end: { line: 811, column: 38 },
                },
                type: 'if',
                locations: [
                  {
                    start: { line: 811, column: 4 },
                    end: { line: 811, column: 38 },
                  },
                  {
                    start: { line: void 0, column: void 0 },
                    end: { line: void 0, column: void 0 },
                  },
                ],
                line: 811,
              },
              26: {
                loc: {
                  start: { line: 836, column: 4 },
                  end: { line: 880, column: 5 },
                },
                type: 'switch',
                locations: [
                  {
                    start: { line: 837, column: 8 },
                    end: { line: 843, column: 14 },
                  },
                  {
                    start: { line: 844, column: 8 },
                    end: { line: 858, column: 14 },
                  },
                  {
                    start: { line: 859, column: 8 },
                    end: { line: 868, column: 14 },
                  },
                  {
                    start: { line: 869, column: 8 },
                    end: { line: 877, column: 14 },
                  },
                  {
                    start: { line: 878, column: 8 },
                    end: { line: 879, column: 31 },
                  },
                ],
                line: 836,
              },
              27: {
                loc: {
                  start: { line: 889, column: 11 },
                  end: { line: 889, column: 36 },
                },
                type: 'binary-expr',
                locations: [
                  {
                    start: { line: 889, column: 11 },
                    end: { line: 889, column: 24 },
                  },
                  {
                    start: { line: 889, column: 28 },
                    end: { line: 889, column: 36 },
                  },
                ],
                line: 889,
              },
            },
            s: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
              37: 0,
              38: 0,
              39: 0,
              40: 0,
              41: 0,
              42: 0,
              43: 0,
              44: 0,
              45: 0,
              46: 0,
              47: 0,
              48: 0,
              49: 0,
              50: 0,
              51: 0,
              52: 0,
              53: 0,
              54: 0,
              55: 0,
              56: 0,
              57: 0,
              58: 0,
              59: 0,
              60: 0,
              61: 0,
              62: 0,
              63: 0,
              64: 0,
              65: 0,
              66: 0,
              67: 0,
            },
            f: {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              16: 0,
              17: 0,
              18: 0,
              19: 0,
              20: 0,
              21: 0,
              22: 0,
              23: 0,
              24: 0,
              25: 0,
              26: 0,
              27: 0,
              28: 0,
              29: 0,
              30: 0,
              31: 0,
              32: 0,
              33: 0,
              34: 0,
              35: 0,
              36: 0,
            },
            b: {
              0: [0],
              1: [0, 0],
              2: [0, 0],
              3: [0, 0],
              4: [0, 0],
              5: [0, 0],
              6: [0, 0],
              7: [0, 0],
              8: [0, 0],
              9: [0, 0],
              10: [0, 0],
              11: [0, 0],
              12: [0, 0],
              13: [0, 0],
              14: [0, 0],
              15: [0, 0],
              16: [0, 0],
              17: [0, 0],
              18: [0, 0],
              19: [0, 0],
              20: [0, 0],
              21: [0, 0],
              22: [0, 0],
              23: [0, 0],
              24: [0, 0],
              25: [0, 0],
              26: [0, 0, 0, 0, 0],
              27: [0, 0],
            },
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/components/export/export-dialog.tsx',
              ],
              sourcesContent: [
                "'use client'\n\nimport * as React from 'react'\nimport {\n  Code,\n  Download,\n  File,\n  FileText,\n  Globe,\n  Settings,\n  X,\n} from 'lucide-react'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogTitle,\n  DialogTrigger,\n} from '@radix-ui/react-dialog'\nimport { Button } from '../../design-system/components/button'\nimport { Badge } from '../../design-system/components/badge'\nimport { Switch } from '@radix-ui/react-switch'\nimport { Label } from '@radix-ui/react-label'\nimport { RadioGroup, RadioGroupItem } from '@radix-ui/react-radio-group'\nimport { Slider } from '../../design-system/components/slider'\nimport { Textarea } from '../../design-system/components/textarea'\nimport { Input } from '../../design-system/components/input'\nimport { cn } from '../../lib/utils'\nimport { type Note } from '../../types/note'\nimport {\n  type ExportFormat,\n  type ExportOptions,\n  type HTMLExportOptions,\n  type MarkdownExportOptions,\n  type PDFExportOptions,\n  type ReactExportOptions,\n} from '../../types/export'\nimport { useExport, useExportFormats } from '../../hooks/use-export'\n\ninterface ExportDialogProps {\n  note: Note\n  children?: React.ReactNode\n  defaultFormat?: ExportFormat\n  onExportComplete?: (format: ExportFormat) => void\n}\n\nexport function ExportDialog({\n  note,\n  children,\n  defaultFormat = 'markdown',\n  onExportComplete,\n}: ExportDialogProps) {\n  const [open, setOpen] = React.useState(false)\n  const [selectedFormat, setSelectedFormat] =\n    React.useState<ExportFormat>(defaultFormat)\n  const [options, setOptions] = React.useState<ExportOptions>(() =>\n    getDefaultOptionsForFormat(defaultFormat)\n  )\n  const [preview, setPreview] = React.useState<{\n    content: string\n    wordCount: number\n    estimatedSize: number\n  } | null>(null)\n\n  const { formats } = useExportFormats()\n  const { exportNote, previewExport, isExporting, progress, error } = useExport(\n    {\n      onSuccess: (result) => {\n        setOpen(false)\n        onExportComplete?.(result.format)\n      },\n      autoDownload: true,\n      showToasts: true,\n    }\n  )\n\n  // Update options when format changes\n  React.useEffect(() => {\n    setOptions(getDefaultOptionsForFormat(selectedFormat))\n  }, [selectedFormat])\n\n  // Generate preview\n  React.useEffect(() => {\n    const generatePreview = async () => {\n      try {\n        const result = await previewExport(note, selectedFormat, options)\n        setPreview(result)\n      } catch (err) {\n        console.error('Preview generation failed:', err)\n        setPreview(null)\n      }\n    }\n\n    if (open && note) {\n      generatePreview()\n    }\n  }, [open, note, selectedFormat, options, previewExport])\n\n  const handleExport = async () => {\n    await exportNote(note, options)\n  }\n\n  const updateOptions = (updates: Partial<ExportOptions>) => {\n    setOptions((prev) => ({ ...prev, ...updates }))\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children || (\n          <Button variant='secondary' className='gap-2'>\n            <Settings className='h-4 w-4' />\n            Export Options\n          </Button>\n        )}\n      </DialogTrigger>\n\n      <DialogContent className='max-w-4xl max-h-[90vh] overflow-y-auto'>\n        <div className='flex flex-col space-y-1.5 text-center sm:text-left mb-4'>\n          <DialogTitle className='flex items-center gap-2 text-lg font-semibold leading-none tracking-tight'>\n            <Download className='h-5 w-5' />\n            Export Note\n          </DialogTitle>\n          <DialogDescription className='text-sm text-muted-foreground'>\n            Choose your export format and customize the output options.\n          </DialogDescription>\n        </div>\n\n        <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>\n          {/* Left Panel - Options */}\n          <div className='space-y-6'>\n            {/* Format Selection */}\n            <div className='space-y-3'>\n              <Label className='text-sm font-medium'>Export Format</Label>\n              <RadioGroup\n                value={selectedFormat}\n                onValueChange={(value) =>\n                  setSelectedFormat(value as ExportFormat)\n                }\n                className='grid grid-cols-2 gap-3'\n              >\n                {formats.map((format) => {\n                  const Icon = getFormatIcon(format.value)\n                  return (\n                    <div\n                      key={format.value}\n                      className={cn(\n                        'flex items-center space-x-2 rounded-lg border p-3 cursor-pointer transition-colors',\n                        selectedFormat === format.value\n                          ? 'border-primary bg-primary/5'\n                          : 'border-border hover:bg-accent/50'\n                      )}\n                    >\n                      <RadioGroupItem value={format.value} id={format.value} />\n                      <div className='flex items-center gap-2 flex-1'>\n                        <Icon className='h-4 w-4' />\n                        <div>\n                          <div className='font-medium'>{format.label}</div>\n                          <div className='text-xs text-muted-foreground'>\n                            {format.description.split(' - ')[0]}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                })}\n              </RadioGroup>\n            </div>\n\n            {/* General Options */}\n            <div className='space-y-4'>\n              <Label className='text-sm font-medium'>General Options</Label>\n\n              <div className='flex items-center justify-between'>\n                <div>\n                  <Label htmlFor='include-dates'>Include Dates</Label>\n                  <div className='text-xs text-muted-foreground'>\n                    Show creation and modification dates\n                  </div>\n                </div>\n                <Switch\n                  id='include-dates'\n                  checked={options.includeDates}\n                  onCheckedChange={(checked) =>\n                    updateOptions({ includeDates: checked })\n                  }\n                />\n              </div>\n\n              <div className='flex items-center justify-between'>\n                <div>\n                  <Label htmlFor='include-tags'>Include Tags</Label>\n                  <div className='text-xs text-muted-foreground'>\n                    Show note tags if available\n                  </div>\n                </div>\n                <Switch\n                  id='include-tags'\n                  checked={options.includeTags}\n                  onCheckedChange={(checked) =>\n                    updateOptions({ includeTags: checked })\n                  }\n                />\n              </div>\n\n              <div className='flex items-center justify-between'>\n                <div>\n                  <Label htmlFor='include-frontmatter'>\n                    Include Front Matter\n                  </Label>\n                  <div className='text-xs text-muted-foreground'>\n                    Add YAML metadata header\n                  </div>\n                </div>\n                <Switch\n                  id='include-frontmatter'\n                  checked={options.includeFrontMatter}\n                  onCheckedChange={(checked) =>\n                    updateOptions({ includeFrontMatter: checked })\n                  }\n                />\n              </div>\n            </div>\n\n            {/* Format-specific Options */}\n            {selectedFormat === 'markdown' && (\n              <MarkdownOptions\n                options={options as MarkdownExportOptions}\n                onChange={updateOptions}\n              />\n            )}\n\n            {selectedFormat === 'pdf' && (\n              <PDFOptions\n                options={options as PDFExportOptions}\n                onChange={updateOptions}\n              />\n            )}\n\n            {selectedFormat === 'html' && (\n              <HTMLOptions\n                options={options as HTMLExportOptions}\n                onChange={updateOptions}\n              />\n            )}\n\n            {selectedFormat === 'react' && (\n              <ReactOptions\n                options={options as ReactExportOptions}\n                onChange={updateOptions}\n              />\n            )}\n\n            {/* Quality Settings */}\n            <div className='space-y-4'>\n              <Label className='text-sm font-medium'>Quality Settings</Label>\n\n              <div className='space-y-2'>\n                <div className='flex items-center justify-between'>\n                  <Label>Image Quality</Label>\n                  <span className='text-sm text-muted-foreground'>\n                    {options.quality?.imageQuality || 85}%\n                  </span>\n                </div>\n                <Slider\n                  value={[options.quality?.imageQuality || 85]}\n                  onValueChange={([value]: number[]) =>\n                    updateOptions({\n                      quality: { ...options.quality, imageQuality: value },\n                    })\n                  }\n                  min={10}\n                  max={100}\n                  step={5}\n                  className='w-full'\n                />\n              </div>\n\n              <div className='flex items-center justify-between'>\n                <div>\n                  <Label htmlFor='optimize-size'>Optimize File Size</Label>\n                  <div className='text-xs text-muted-foreground'>\n                    Reduce file size when possible\n                  </div>\n                </div>\n                <Switch\n                  id='optimize-size'\n                  checked={options.quality?.optimizeSize}\n                  onCheckedChange={(checked) =>\n                    updateOptions({\n                      quality: { ...options.quality, optimizeSize: checked },\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Right Panel - Preview */}\n          <div className='space-y-4'>\n            <div className='flex items-center justify-between'>\n              <Label className='text-sm font-medium'>Preview</Label>\n              {preview && (\n                <div className='flex gap-2'>\n                  <Badge variant='outline'>{preview.wordCount} words</Badge>\n                  <Badge variant='outline'>\n                    {formatFileSize(preview.estimatedSize)}\n                  </Badge>\n                </div>\n              )}\n            </div>\n\n            <div className='border rounded-lg p-4 h-96 overflow-y-auto bg-muted/50'>\n              {preview ? (\n                <pre className='text-xs whitespace-pre-wrap font-mono'>\n                  {preview.content}\n                </pre>\n              ) : (\n                <div className='flex items-center justify-center h-full text-muted-foreground'>\n                  <div className='text-center'>\n                    <FileText className='h-8 w-8 mx-auto mb-2 opacity-50' />\n                    <div>Generating preview...</div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {error && (\n              <div className='p-3 bg-destructive/10 border border-destructive/20 rounded-lg'>\n                <div className='flex items-center gap-2 text-destructive text-sm'>\n                  <X className='h-4 w-4' />\n                  {error}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className='flex items-center justify-between pt-4 border-t'>\n          <div className='text-sm text-muted-foreground'>\n            {note.title && `Exporting: ${note.title}`}\n          </div>\n\n          <div className='flex gap-2'>\n            <Button\n              variant='secondary'\n              onClick={() => setOpen(false)}\n              disabled={isExporting}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleExport}\n              disabled={isExporting}\n              className='gap-2'\n            >\n              {isExporting ? (\n                <>\n                  <div className='h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent' />\n                  Exporting... {progress}%\n                </>\n              ) : (\n                <>\n                  <Download className='h-4 w-4' />\n                  Export {selectedFormat.toUpperCase()}\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\n// Format-specific option components\nfunction MarkdownOptions({\n  options,\n  onChange,\n}: {\n  options: MarkdownExportOptions\n  onChange: (updates: Partial<ExportOptions>) => void\n}) {\n  return (\n    <div className='space-y-4'>\n      <Label className='text-sm font-medium'>Markdown Options</Label>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='use-gfm'>GitHub Flavored Markdown</Label>\n          <div className='text-xs text-muted-foreground'>\n            Use GFM syntax for tables and task lists\n          </div>\n        </div>\n        <Switch\n          id='use-gfm'\n          checked={(options as MarkdownExportOptions).useGFM}\n          onCheckedChange={(checked) =>\n            onChange({ ...options, useGFM: checked } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n\n      <div className='space-y-2'>\n        <Label>Image Handling</Label>\n        <RadioGroup\n          value={(options as MarkdownExportOptions).imageHandling}\n          onValueChange={(value) =>\n            onChange({\n              ...options,\n              imageHandling: value as 'embed' | 'link' | 'copy',\n            } as Partial<ExportOptions>)\n          }\n        >\n          <div className='flex items-center space-x-2'>\n            <RadioGroupItem value='embed' id='embed' />\n            <Label htmlFor='embed'>Embed images</Label>\n          </div>\n          <div className='flex items-center space-x-2'>\n            <RadioGroupItem value='link' id='link' />\n            <Label htmlFor='link'>Link to images</Label>\n          </div>\n          <div className='flex items-center space-x-2'>\n            <RadioGroupItem value='copy' id='copy' />\n            <Label htmlFor='copy'>Copy images</Label>\n          </div>\n        </RadioGroup>\n      </div>\n    </div>\n  )\n}\n\nfunction PDFOptions({\n  options,\n  onChange,\n}: {\n  options: PDFExportOptions\n  onChange: (updates: Partial<ExportOptions>) => void\n}) {\n  return (\n    <div className='space-y-4'>\n      <Label className='text-sm font-medium'>PDF Options</Label>\n\n      <div className='space-y-2'>\n        <Label>Page Format</Label>\n        <RadioGroup\n          value={options.pageFormat}\n          onValueChange={(value) =>\n            onChange({ pageFormat: value as 'A4' | 'Letter' | 'Legal' | 'A3' })\n          }\n        >\n          {['A4', 'Letter', 'Legal', 'A3'].map((format) => (\n            <div key={format} className='flex items-center space-x-2'>\n              <RadioGroupItem value={format} id={format} />\n              <Label htmlFor={format}>{format}</Label>\n            </div>\n          ))}\n        </RadioGroup>\n      </div>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='include-page-numbers'>Page Numbers</Label>\n          <div className='text-xs text-muted-foreground'>\n            Add page numbers to footer\n          </div>\n        </div>\n        <Switch\n          id='include-page-numbers'\n          checked={(options as PDFExportOptions).includePageNumbers}\n          onCheckedChange={(checked) =>\n            onChange({\n              ...options,\n              includePageNumbers: checked,\n            } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='generate-toc'>Table of Contents</Label>\n          <div className='text-xs text-muted-foreground'>\n            Generate TOC from headings\n          </div>\n        </div>\n        <Switch\n          id='generate-toc'\n          checked={(options as PDFExportOptions).generateTOC}\n          onCheckedChange={(checked) =>\n            onChange({\n              ...options,\n              generateTOC: checked,\n            } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction HTMLOptions({\n  options,\n  onChange,\n}: {\n  options: HTMLExportOptions\n  onChange: (updates: Partial<ExportOptions>) => void\n}) {\n  return (\n    <div className='space-y-4'>\n      <Label className='text-sm font-medium'>HTML Options</Label>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='self-contained'>Self-contained</Label>\n          <div className='text-xs text-muted-foreground'>\n            Embed all CSS and assets inline\n          </div>\n        </div>\n        <Switch\n          id='self-contained'\n          checked={(options as HTMLExportOptions).selfContained}\n          onCheckedChange={(checked) =>\n            onChange({\n              ...options,\n              selfContained: checked,\n            } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='include-search'>Search functionality</Label>\n          <div className='text-xs text-muted-foreground'>\n            Add in-page search feature\n          </div>\n        </div>\n        <Switch\n          id='include-search'\n          checked={(options as HTMLExportOptions).includeSearch}\n          onCheckedChange={(checked) =>\n            onChange({\n              ...options,\n              includeSearch: checked,\n            } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='dark-mode'>Dark mode support</Label>\n          <div className='text-xs text-muted-foreground'>\n            Include dark theme styles\n          </div>\n        </div>\n        <Switch\n          id='dark-mode'\n          checked={(options as HTMLExportOptions).darkMode}\n          onCheckedChange={(checked) =>\n            onChange({\n              ...options,\n              darkMode: checked,\n            } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction ReactOptions({\n  options,\n  onChange,\n}: {\n  options: ReactExportOptions\n  onChange: (updates: Partial<ExportOptions>) => void\n}) {\n  return (\n    <div className='space-y-4'>\n      <Label className='text-sm font-medium'>React Options</Label>\n\n      <div className='flex items-center justify-between'>\n        <div>\n          <Label htmlFor='use-typescript'>TypeScript</Label>\n          <div className='text-xs text-muted-foreground'>\n            Generate TypeScript component\n          </div>\n        </div>\n        <Switch\n          id='use-typescript'\n          checked={(options as ReactExportOptions).useTypeScript}\n          onCheckedChange={(checked) =>\n            onChange({\n              ...options,\n              useTypeScript: checked,\n            } as Partial<ExportOptions>)\n          }\n        />\n      </div>\n\n      <div className='space-y-2'>\n        <Label>Styling Approach</Label>\n        <RadioGroup\n          value={(options as ReactExportOptions).styling}\n          onValueChange={(value) =>\n            onChange({\n              ...options,\n              styling: value as\n                | 'tailwind'\n                | 'css-modules'\n                | 'styled-components'\n                | 'css-in-js',\n            } as Partial<ExportOptions>)\n          }\n        >\n          {[\n            { value: 'tailwind', label: 'Tailwind CSS' },\n            { value: 'css-modules', label: 'CSS Modules' },\n            { value: 'styled-components', label: 'Styled Components' },\n            { value: 'css-in-js', label: 'CSS-in-JS' },\n          ].map((style) => (\n            <div key={style.value} className='flex items-center space-x-2'>\n              <RadioGroupItem value={style.value} id={style.value} />\n              <Label htmlFor={style.value}>{style.label}</Label>\n            </div>\n          ))}\n        </RadioGroup>\n      </div>\n\n      <div className='space-y-2'>\n        <Label htmlFor='component-name'>Component Name</Label>\n        <Input\n          id='component-name'\n          value={(options as ReactExportOptions).componentName || ''}\n          onChange={(e) =>\n            onChange({\n              ...options,\n              componentName: e.target.value,\n            } as Partial<ExportOptions>)\n          }\n          placeholder='NoteComponent'\n        />\n      </div>\n    </div>\n  )\n}\n\n// Helper functions\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes'\n  const k = 1024\n  const sizes = ['Bytes', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`\n}\n\nfunction getDefaultOptionsForFormat(format: ExportFormat): ExportOptions {\n  // This would typically use the export service\n  const baseOptions: ExportOptions = {\n    format,\n    includeFrontMatter: true,\n    includeDates: true,\n    includeTags: true,\n    quality: {\n      imageQuality: 85,\n      imageFormat: 'jpeg' as const,\n      imageMaxWidth: 1200,\n      optimizeSize: true,\n    },\n  }\n\n  switch (format) {\n    case 'markdown':\n      return {\n        ...baseOptions,\n        format: 'markdown',\n        useGFM: true,\n        imageHandling: 'embed' as const,\n      } as MarkdownExportOptions\n    case 'pdf':\n      return {\n        ...baseOptions,\n        format: 'pdf',\n        pageFormat: 'A4' as const,\n        pageOrientation: 'portrait' as const,\n        includePageNumbers: true,\n        generateTOC: true,\n        margins: { top: 20, right: 20, bottom: 20, left: 20 },\n      } as PDFExportOptions\n    case 'html':\n      return {\n        ...baseOptions,\n        format: 'html',\n        selfContained: true,\n        includeSearch: true,\n        includeNavigation: true,\n        responsive: true,\n        darkMode: true,\n      } as HTMLExportOptions\n    case 'react':\n      return {\n        ...baseOptions,\n        format: 'react',\n        useTypeScript: true,\n        styling: 'tailwind' as const,\n        functional: true,\n        includePropTypes: false,\n      } as ReactExportOptions\n    default:\n      return baseOptions\n  }\n}\n\nfunction getFormatIcon(format: ExportFormat) {\n  const icons = {\n    markdown: FileText,\n    pdf: File,\n    html: Globe,\n    react: Code,\n  }\n  return icons[format] || FileText\n}\n",
              ],
              names: [],
              mappings:
                'AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACL,CAAC,CAAC,CAAC,CAAC,EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACR,CAAC,CAAC,CAAC,CAAC,EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACR,CAAC,CAAC,CAAC,CAAC,CAAC,EACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACR,CAAC,gGACiB;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;kCAC/D,MAAC,CAAC,CAAC,CAAC;wBAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;0CACtE,MAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gCAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;kDAChG,K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AC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAChC,KAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wCACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wCACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;oCAI1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAC3B,KAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wCACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wCACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;oCAI1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '935a94e2c0b5c51cc8e302a5adac267d7f6d96d9',
          },
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '935a94e2c0b5c51cc8e302a5adac267d7f6d96d9' === coverage[path].hash) ||
          (coverage[path] = coverageData)
        var actualCoverage = coverage[path]
        return (
          (cov_sepbe9o31 = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      function ExportDialog({
        note,
        children,
        defaultFormat = (cov_sepbe9o31().b[0][0]++, 'markdown'),
        onExportComplete,
      }) {
        var _options_quality, _options_quality1, _options_quality2
        cov_sepbe9o31().f[0]++
        const [open, setOpen] = (cov_sepbe9o31().s[0]++, react.useState(!1)),
          [selectedFormat, setSelectedFormat] =
            (cov_sepbe9o31().s[1]++, react.useState(defaultFormat)),
          [options, setOptions] =
            (cov_sepbe9o31().s[2]++,
            react.useState(
              () => (
                cov_sepbe9o31().f[1]++,
                cov_sepbe9o31().s[3]++,
                getDefaultOptionsForFormat(defaultFormat)
              )
            )),
          [preview, setPreview] =
            (cov_sepbe9o31().s[4]++, react.useState(null)),
          { formats } =
            (cov_sepbe9o31().s[5]++,
            (function useExportFormats() {
              cov_277mb91jn4().f[28]++
              const formats =
                (cov_277mb91jn4().s[153]++,
                (0, react.useMemo)(
                  () => (
                    cov_277mb91jn4().f[29]++,
                    cov_277mb91jn4().s[154]++,
                    exportService
                      .getSupportedFormats()
                      .map(
                        (format) => (
                          cov_277mb91jn4().f[30]++,
                          cov_277mb91jn4().s[155]++,
                          {
                            value: format,
                            label: format.toUpperCase(),
                            icon:
                              (cov_277mb91jn4().b[61][0]++,
                              exportService.getFormatDetails(format).icon ||
                                (cov_277mb91jn4().b[61][1]++, '')),
                            description:
                              exportService.getFormatDetails(format)
                                .description,
                            defaultOptions: { format },
                          }
                        )
                      )
                  ),
                  []
                ))
              return (
                cov_277mb91jn4().s[156]++,
                {
                  formats,
                  getFormatInfo: (format) => (
                    cov_277mb91jn4().f[31]++,
                    cov_277mb91jn4().s[157]++,
                    formats.find(
                      (f) => (
                        cov_277mb91jn4().f[32]++,
                        cov_277mb91jn4().s[158]++,
                        f.value === format
                      )
                    )
                  ),
                }
              )
            })()),
          { exportNote, previewExport, isExporting, progress, error } =
            (cov_sepbe9o31().s[6]++,
            (function useExport(options = (cov_277mb91jn4().b[0][0]++, {})) {
              cov_277mb91jn4().f[0]++
              const {
                  onSuccess,
                  onError,
                  onProgress,
                  autoDownload = (cov_277mb91jn4().b[1][0]++, !0),
                  showToasts = (cov_277mb91jn4().b[2][0]++, !0),
                } = (cov_277mb91jn4().s[0]++, options),
                [state, setState] =
                  (cov_277mb91jn4().s[1]++,
                  (0, react.useState)({
                    isExporting: !1,
                    progress: 0,
                    error: null,
                    lastResult: null,
                  })),
                exportNote =
                  (cov_277mb91jn4().s[2]++,
                  (0, react.useCallback)(
                    async (note, exportOptions) => {
                      ;(cov_277mb91jn4().f[1]++, cov_277mb91jn4().s[3]++)
                      try {
                        if (
                          (cov_277mb91jn4().s[4]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[2]++,
                              cov_277mb91jn4().s[5]++,
                              {
                                ...prev,
                                isExporting: !0,
                                error: null,
                                progress: 0,
                              }
                            )
                          ),
                          cov_277mb91jn4().s[6]++,
                          showToasts
                            ? (cov_277mb91jn4().b[3][0]++,
                              cov_277mb91jn4().s[7]++,
                              sonner_dist.oR.loading('Preparing export...', {
                                id: 'export-progress',
                              }))
                            : cov_277mb91jn4().b[3][1]++,
                          cov_277mb91jn4().s[8]++,
                          cov_277mb91jn4().b[5][0]++,
                          !note || (cov_277mb91jn4().b[5][1]++, !note.content))
                        )
                          throw (
                            cov_277mb91jn4().b[4][0]++,
                            cov_277mb91jn4().s[9]++,
                            new Error('Cannot export note: Invalid note data')
                          )
                        ;(cov_277mb91jn4().b[4][1]++,
                          cov_277mb91jn4().s[10]++,
                          cov_277mb91jn4().b[7][0]++,
                          null === onProgress ||
                          (cov_277mb91jn4().b[7][1]++, void 0 === onProgress)
                            ? cov_277mb91jn4().b[6][0]++
                            : (cov_277mb91jn4().b[6][1]++, onProgress(25)),
                          cov_277mb91jn4().s[11]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[3]++,
                              cov_277mb91jn4().s[12]++,
                              { ...prev, progress: 25 }
                            )
                          ))
                        const content =
                            (cov_277mb91jn4().s[13]++,
                            JSON.parse(note.content)),
                          metadata =
                            (cov_277mb91jn4().s[14]++,
                            {
                              title: note.title,
                              createdAt: new Date(note.created_at),
                              updatedAt: new Date(note.updated_at),
                              tags:
                                (cov_277mb91jn4().b[8][0]++,
                                note.tags || (cov_277mb91jn4().b[8][1]++, [])),
                            }),
                          result =
                            (cov_277mb91jn4().s[15]++,
                            await exportService.export(
                              content,
                              exportOptions,
                              metadata
                            ))
                        ;(cov_277mb91jn4().s[16]++,
                          cov_277mb91jn4().b[10][0]++,
                          null === onProgress ||
                          (cov_277mb91jn4().b[10][1]++, void 0 === onProgress)
                            ? cov_277mb91jn4().b[9][0]++
                            : (cov_277mb91jn4().b[9][1]++, onProgress(75)),
                          cov_277mb91jn4().s[17]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[4]++,
                              cov_277mb91jn4().s[18]++,
                              { ...prev, progress: 75 }
                            )
                          ),
                          cov_277mb91jn4().s[19]++,
                          cov_277mb91jn4().b[12][0]++,
                          autoDownload &&
                          (cov_277mb91jn4().b[12][1]++, result.success)
                            ? (cov_277mb91jn4().b[11][0]++,
                              cov_277mb91jn4().s[20]++,
                              exportService.downloadFile(result))
                            : cov_277mb91jn4().b[11][1]++,
                          cov_277mb91jn4().s[21]++,
                          cov_277mb91jn4().b[14][0]++,
                          null === onProgress ||
                          (cov_277mb91jn4().b[14][1]++, void 0 === onProgress)
                            ? cov_277mb91jn4().b[13][0]++
                            : (cov_277mb91jn4().b[13][1]++, onProgress(100)))
                        let exportContent = (cov_277mb91jn4().s[22]++, '')
                        ;(cov_277mb91jn4().s[23]++,
                          result.data
                            ? (cov_277mb91jn4().b[15][0]++,
                              cov_277mb91jn4().s[24]++,
                              result.data instanceof Blob
                                ? (cov_277mb91jn4().b[16][0]++,
                                  cov_277mb91jn4().s[25]++,
                                  (exportContent = '[Binary content]'))
                                : (cov_277mb91jn4().b[16][1]++,
                                  cov_277mb91jn4().s[26]++,
                                  (exportContent = result.data)))
                            : cov_277mb91jn4().b[15][1]++)
                        const exportResult =
                          (cov_277mb91jn4().s[27]++,
                          {
                            content: exportContent,
                            filename: result.fileName,
                            mimeType: result.mimeType,
                            size: result.data
                              ? (cov_277mb91jn4().b[17][0]++,
                                result.data instanceof Blob
                                  ? (cov_277mb91jn4().b[18][0]++,
                                    result.data.size)
                                  : (cov_277mb91jn4().b[18][1]++,
                                    result.data.length))
                              : (cov_277mb91jn4().b[17][1]++, 0),
                            format: exportOptions.format,
                            exportedAt: new Date().toISOString(),
                            additionalFiles: [],
                          })
                        return (
                          cov_277mb91jn4().s[28]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[5]++,
                              cov_277mb91jn4().s[29]++,
                              {
                                ...prev,
                                isExporting: !1,
                                progress: 100,
                                lastResult: exportResult,
                              }
                            )
                          ),
                          cov_277mb91jn4().s[30]++,
                          showToasts
                            ? (cov_277mb91jn4().b[19][0]++,
                              cov_277mb91jn4().s[31]++,
                              sonner_dist.oR.success(
                                `Successfully exported to ${exportOptions.format.toUpperCase()}`,
                                { id: 'export-progress' }
                              ))
                            : cov_277mb91jn4().b[19][1]++,
                          cov_277mb91jn4().s[32]++,
                          cov_277mb91jn4().b[21][0]++,
                          null === onSuccess ||
                          (cov_277mb91jn4().b[21][1]++, void 0 === onSuccess)
                            ? cov_277mb91jn4().b[20][0]++
                            : (cov_277mb91jn4().b[20][1]++,
                              onSuccess(exportResult)),
                          cov_277mb91jn4().s[33]++,
                          exportResult
                        )
                      } catch (error) {
                        const errorMessage =
                          (cov_277mb91jn4().s[34]++,
                          error instanceof Error
                            ? (cov_277mb91jn4().b[22][0]++, error.message)
                            : (cov_277mb91jn4().b[22][1]++, 'Export failed'))
                        return (
                          cov_277mb91jn4().s[35]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[6]++,
                              cov_277mb91jn4().s[36]++,
                              {
                                ...prev,
                                isExporting: !1,
                                error: errorMessage,
                                progress: 0,
                              }
                            )
                          ),
                          cov_277mb91jn4().s[37]++,
                          showToasts
                            ? (cov_277mb91jn4().b[23][0]++,
                              cov_277mb91jn4().s[38]++,
                              sonner_dist.oR.error(
                                `Export failed: ${errorMessage}`,
                                { id: 'export-progress' }
                              ))
                            : cov_277mb91jn4().b[23][1]++,
                          cov_277mb91jn4().s[39]++,
                          cov_277mb91jn4().b[25][0]++,
                          null === onError ||
                          (cov_277mb91jn4().b[25][1]++, void 0 === onError)
                            ? cov_277mb91jn4().b[24][0]++
                            : (cov_277mb91jn4().b[24][1]++,
                              onError(
                                error instanceof Error
                                  ? (cov_277mb91jn4().b[26][0]++, error)
                                  : (cov_277mb91jn4().b[26][1]++,
                                    new Error(errorMessage))
                              )),
                          cov_277mb91jn4().s[40]++,
                          null
                        )
                      }
                    },
                    [autoDownload, showToasts, onSuccess, onError, onProgress]
                  )),
                exportNotes =
                  (cov_277mb91jn4().s[41]++,
                  (0, react.useCallback)(
                    async (notes, exportOptions) => {
                      ;(cov_277mb91jn4().f[7]++, cov_277mb91jn4().s[42]++)
                      try {
                        ;(cov_277mb91jn4().s[43]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[8]++,
                              cov_277mb91jn4().s[44]++,
                              {
                                ...prev,
                                isExporting: !0,
                                error: null,
                                progress: 0,
                              }
                            )
                          ),
                          cov_277mb91jn4().s[45]++,
                          showToasts
                            ? (cov_277mb91jn4().b[27][0]++,
                              cov_277mb91jn4().s[46]++,
                              sonner_dist.oR.loading(
                                `Exporting ${notes.length} notes...`,
                                { id: 'export-progress' }
                              ))
                            : cov_277mb91jn4().b[27][1]++,
                          cov_277mb91jn4().s[47]++)
                        for (const note of notes) {
                          if (
                            (cov_277mb91jn4().s[48]++,
                            cov_277mb91jn4().b[29][0]++,
                            !note ||
                              (cov_277mb91jn4().b[29][1]++, !note.content))
                          )
                            throw (
                              cov_277mb91jn4().b[28][0]++,
                              cov_277mb91jn4().s[49]++,
                              new Error(
                                `Cannot export note "${note.title}": Invalid note data`
                              )
                            )
                          cov_277mb91jn4().b[28][1]++
                        }
                        ;(cov_277mb91jn4().s[50]++,
                          cov_277mb91jn4().b[31][0]++,
                          null === onProgress ||
                          (cov_277mb91jn4().b[31][1]++, void 0 === onProgress)
                            ? cov_277mb91jn4().b[30][0]++
                            : (cov_277mb91jn4().b[30][1]++, onProgress(20)),
                          cov_277mb91jn4().s[51]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[9]++,
                              cov_277mb91jn4().s[52]++,
                              { ...prev, progress: 20 }
                            )
                          ))
                        const results = (cov_277mb91jn4().s[53]++, [])
                        cov_277mb91jn4().s[54]++
                        for (
                          let i = (cov_277mb91jn4().s[55]++, 0);
                          i < notes.length;
                          i++
                        ) {
                          const note = (cov_277mb91jn4().s[56]++, notes[i]),
                            content =
                              (cov_277mb91jn4().s[57]++,
                              JSON.parse(note.content)),
                            metadata =
                              (cov_277mb91jn4().s[58]++,
                              {
                                title: note.title,
                                createdAt: new Date(note.created_at),
                                updatedAt: new Date(note.updated_at),
                                tags:
                                  (cov_277mb91jn4().b[32][0]++,
                                  note.tags ||
                                    (cov_277mb91jn4().b[32][1]++, [])),
                              }),
                            singleResult =
                              (cov_277mb91jn4().s[59]++,
                              await exportService.export(
                                content,
                                { format: exportOptions.format },
                                metadata
                              ))
                          if ((cov_277mb91jn4().s[60]++, !singleResult.success))
                            throw (
                              cov_277mb91jn4().b[33][0]++,
                              cov_277mb91jn4().s[61]++,
                              new Error(
                                (cov_277mb91jn4().b[34][0]++,
                                singleResult.error ||
                                  (cov_277mb91jn4().b[34][1]++,
                                  'Export failed'))
                              )
                            )
                          cov_277mb91jn4().b[33][1]++
                          let exportContent = (cov_277mb91jn4().s[62]++, '')
                          ;(cov_277mb91jn4().s[63]++,
                            singleResult.data
                              ? (cov_277mb91jn4().b[35][0]++,
                                cov_277mb91jn4().s[64]++,
                                singleResult.data instanceof Blob
                                  ? (cov_277mb91jn4().b[36][0]++,
                                    cov_277mb91jn4().s[65]++,
                                    (exportContent = '[Binary content]'))
                                  : (cov_277mb91jn4().b[36][1]++,
                                    cov_277mb91jn4().s[66]++,
                                    (exportContent = singleResult.data)))
                              : cov_277mb91jn4().b[35][1]++)
                          const exportResult =
                            (cov_277mb91jn4().s[67]++,
                            {
                              content: exportContent,
                              filename: singleResult.fileName,
                              mimeType: singleResult.mimeType,
                              size: singleResult.data
                                ? (cov_277mb91jn4().b[37][0]++,
                                  singleResult.data instanceof Blob
                                    ? (cov_277mb91jn4().b[38][0]++,
                                      singleResult.data.size)
                                    : (cov_277mb91jn4().b[38][1]++,
                                      singleResult.data.length))
                                : (cov_277mb91jn4().b[37][1]++, 0),
                              format: exportOptions.format,
                              exportedAt: new Date().toISOString(),
                              additionalFiles: [],
                            })
                          ;(cov_277mb91jn4().s[68]++,
                            results.push(exportResult))
                        }
                        const result = (cov_277mb91jn4().s[69]++, results[0])
                        if (
                          (cov_277mb91jn4().s[70]++,
                          cov_277mb91jn4().b[40][0]++,
                          null === onProgress ||
                          (cov_277mb91jn4().b[40][1]++, void 0 === onProgress)
                            ? cov_277mb91jn4().b[39][0]++
                            : (cov_277mb91jn4().b[39][1]++, onProgress(80)),
                          cov_277mb91jn4().s[71]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[10]++,
                              cov_277mb91jn4().s[72]++,
                              { ...prev, progress: 80 }
                            )
                          ),
                          cov_277mb91jn4().s[73]++,
                          cov_277mb91jn4().b[42][0]++,
                          autoDownload && (cov_277mb91jn4().b[42][1]++, result))
                        ) {
                          ;(cov_277mb91jn4().b[41][0]++,
                            cov_277mb91jn4().s[74]++)
                          for (const res of results) {
                            const blob =
                                (cov_277mb91jn4().s[75]++,
                                new Blob([res.content], {
                                  type: res.mimeType,
                                })),
                              url =
                                (cov_277mb91jn4().s[76]++,
                                URL.createObjectURL(blob)),
                              link =
                                (cov_277mb91jn4().s[77]++,
                                document.createElement('a'))
                            ;(cov_277mb91jn4().s[78]++,
                              (link.href = url),
                              cov_277mb91jn4().s[79]++,
                              (link.download = res.filename),
                              cov_277mb91jn4().s[80]++,
                              link.click(),
                              cov_277mb91jn4().s[81]++,
                              URL.revokeObjectURL(url))
                          }
                        } else cov_277mb91jn4().b[41][1]++
                        return (
                          cov_277mb91jn4().s[82]++,
                          cov_277mb91jn4().b[44][0]++,
                          null === onProgress ||
                          (cov_277mb91jn4().b[44][1]++, void 0 === onProgress)
                            ? cov_277mb91jn4().b[43][0]++
                            : (cov_277mb91jn4().b[43][1]++, onProgress(100)),
                          cov_277mb91jn4().s[83]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[11]++,
                              cov_277mb91jn4().s[84]++,
                              {
                                ...prev,
                                isExporting: !1,
                                progress: 100,
                                lastResult: result,
                              }
                            )
                          ),
                          cov_277mb91jn4().s[85]++,
                          showToasts
                            ? (cov_277mb91jn4().b[45][0]++,
                              cov_277mb91jn4().s[86]++,
                              sonner_dist.oR.success(
                                `Successfully exported ${notes.length} notes to ${exportOptions.format.toUpperCase()}`,
                                { id: 'export-progress' }
                              ))
                            : cov_277mb91jn4().b[45][1]++,
                          cov_277mb91jn4().s[87]++,
                          cov_277mb91jn4().b[47][0]++,
                          null === onSuccess ||
                          (cov_277mb91jn4().b[47][1]++, void 0 === onSuccess)
                            ? cov_277mb91jn4().b[46][0]++
                            : (cov_277mb91jn4().b[46][1]++, onSuccess(result)),
                          cov_277mb91jn4().s[88]++,
                          result
                        )
                      } catch (error) {
                        const errorMessage =
                          (cov_277mb91jn4().s[89]++,
                          error instanceof Error
                            ? (cov_277mb91jn4().b[48][0]++, error.message)
                            : (cov_277mb91jn4().b[48][1]++,
                              'Bulk export failed'))
                        return (
                          cov_277mb91jn4().s[90]++,
                          setState(
                            (prev) => (
                              cov_277mb91jn4().f[12]++,
                              cov_277mb91jn4().s[91]++,
                              {
                                ...prev,
                                isExporting: !1,
                                error: errorMessage,
                                progress: 0,
                              }
                            )
                          ),
                          cov_277mb91jn4().s[92]++,
                          showToasts
                            ? (cov_277mb91jn4().b[49][0]++,
                              cov_277mb91jn4().s[93]++,
                              sonner_dist.oR.error(
                                `Bulk export failed: ${errorMessage}`,
                                { id: 'export-progress' }
                              ))
                            : cov_277mb91jn4().b[49][1]++,
                          cov_277mb91jn4().s[94]++,
                          cov_277mb91jn4().b[51][0]++,
                          null === onError ||
                          (cov_277mb91jn4().b[51][1]++, void 0 === onError)
                            ? cov_277mb91jn4().b[50][0]++
                            : (cov_277mb91jn4().b[50][1]++,
                              onError(
                                error instanceof Error
                                  ? (cov_277mb91jn4().b[52][0]++, error)
                                  : (cov_277mb91jn4().b[52][1]++,
                                    new Error(errorMessage))
                              )),
                          cov_277mb91jn4().s[95]++,
                          null
                        )
                      }
                    },
                    [autoDownload, showToasts, onSuccess, onError, onProgress]
                  )),
                exportToMarkdown =
                  (cov_277mb91jn4().s[96]++,
                  (0, react.useCallback)(
                    (note, options) => {
                      cov_277mb91jn4().f[13]++
                      const defaultOptions =
                        (cov_277mb91jn4().s[97]++,
                        {
                          format: 'markdown',
                          includeFrontMatter: !0,
                          includeDates: !0,
                          includeTags: !0,
                        })
                      return (
                        cov_277mb91jn4().s[98]++,
                        exportNote(note, { ...defaultOptions, ...options })
                      )
                    },
                    [exportNote]
                  )),
                exportToPDF =
                  (cov_277mb91jn4().s[99]++,
                  (0, react.useCallback)(
                    (note, options) => {
                      cov_277mb91jn4().f[14]++
                      const defaultOptions =
                        (cov_277mb91jn4().s[100]++,
                        {
                          format: 'pdf',
                          includeFrontMatter: !0,
                          includeDates: !0,
                          includeTags: !0,
                        })
                      return (
                        cov_277mb91jn4().s[101]++,
                        exportNote(note, { ...defaultOptions, ...options })
                      )
                    },
                    [exportNote]
                  )),
                exportToHTML =
                  (cov_277mb91jn4().s[102]++,
                  (0, react.useCallback)(
                    (note, options) => {
                      cov_277mb91jn4().f[15]++
                      const defaultOptions =
                        (cov_277mb91jn4().s[103]++,
                        {
                          format: 'html',
                          includeFrontMatter: !0,
                          includeDates: !0,
                          includeTags: !0,
                        })
                      return (
                        cov_277mb91jn4().s[104]++,
                        exportNote(note, { ...defaultOptions, ...options })
                      )
                    },
                    [exportNote]
                  )),
                exportToReact =
                  (cov_277mb91jn4().s[105]++,
                  (0, react.useCallback)(
                    (note, options) => {
                      cov_277mb91jn4().f[16]++
                      const defaultOptions =
                        (cov_277mb91jn4().s[106]++,
                        {
                          format: 'react',
                          includeFrontMatter: !0,
                          includeDates: !0,
                          includeTags: !0,
                        })
                      return (
                        cov_277mb91jn4().s[107]++,
                        exportNote(note, { ...defaultOptions, ...options })
                      )
                    },
                    [exportNote]
                  )),
                previewExport =
                  (cov_277mb91jn4().s[108]++,
                  (0, react.useCallback)(async (note, _format, _options) => {
                    ;(cov_277mb91jn4().f[17]++, cov_277mb91jn4().s[109]++)
                    try {
                      const content =
                          (cov_277mb91jn4().s[110]++, JSON.parse(note.content)),
                        wordCount =
                          (cov_277mb91jn4().s[111]++,
                          content.reduce((count, node) => {
                            cov_277mb91jn4().f[18]++
                            const text =
                              (cov_277mb91jn4().s[112]++,
                              cov_277mb91jn4().b[53][0]++,
                              node.text || (cov_277mb91jn4().b[53][1]++, ''))
                            return (
                              cov_277mb91jn4().s[113]++,
                              count +
                                ('string' == typeof text
                                  ? (cov_277mb91jn4().b[54][0]++,
                                    text.split(/\s+/).filter(Boolean).length)
                                  : (cov_277mb91jn4().b[54][1]++, 0))
                            )
                          }, 0))
                      return (
                        cov_277mb91jn4().s[114]++,
                        {
                          content: JSON.stringify(content, null, 2),
                          wordCount,
                          estimatedSize: JSON.stringify(content).length,
                        }
                      )
                    } catch (error) {
                      const errorMessage =
                        (cov_277mb91jn4().s[115]++,
                        error instanceof Error
                          ? (cov_277mb91jn4().b[55][0]++, error.message)
                          : (cov_277mb91jn4().b[55][1]++, 'Preview failed'))
                      throw (
                        cov_277mb91jn4().s[116]++,
                        setState(
                          (prev) => (
                            cov_277mb91jn4().f[19]++,
                            cov_277mb91jn4().s[117]++,
                            { ...prev, error: errorMessage }
                          )
                        ),
                        cov_277mb91jn4().s[118]++,
                        error
                      )
                    }
                  }, [])),
                shareResult =
                  (cov_277mb91jn4().s[119]++,
                  (0, react.useCallback)(
                    async (_result) => {
                      ;(cov_277mb91jn4().f[20]++, cov_277mb91jn4().s[120]++)
                      try {
                        throw (
                          cov_277mb91jn4().s[121]++,
                          new Error('Sharing is not yet supported')
                        )
                      } catch (error) {
                        const errorMessage =
                          (cov_277mb91jn4().s[122]++,
                          error instanceof Error
                            ? (cov_277mb91jn4().b[56][0]++, error.message)
                            : (cov_277mb91jn4().b[56][1]++, 'Sharing failed'))
                        throw (
                          cov_277mb91jn4().s[123]++,
                          showToasts
                            ? (cov_277mb91jn4().b[57][0]++,
                              cov_277mb91jn4().s[124]++,
                              sonner_dist.oR.error(
                                `Sharing failed: ${errorMessage}`
                              ))
                            : cov_277mb91jn4().b[57][1]++,
                          cov_277mb91jn4().s[125]++,
                          error
                        )
                      }
                    },
                    [showToasts]
                  )),
                clearError =
                  (cov_277mb91jn4().s[126]++,
                  (0, react.useCallback)(() => {
                    ;(cov_277mb91jn4().f[21]++,
                      cov_277mb91jn4().s[127]++,
                      setState(
                        (prev) => (
                          cov_277mb91jn4().f[22]++,
                          cov_277mb91jn4().s[128]++,
                          { ...prev, error: null }
                        )
                      ))
                  }, [])),
                reset =
                  (cov_277mb91jn4().s[129]++,
                  (0, react.useCallback)(() => {
                    ;(cov_277mb91jn4().f[23]++,
                      cov_277mb91jn4().s[130]++,
                      setState({
                        isExporting: !1,
                        progress: 0,
                        error: null,
                        lastResult: null,
                      }))
                  }, []))
              return (
                cov_277mb91jn4().s[131]++,
                {
                  isExporting: state.isExporting,
                  progress: state.progress,
                  error: state.error,
                  lastResult: state.lastResult,
                  exportNote,
                  exportNotes,
                  exportToMarkdown,
                  exportToPDF,
                  exportToHTML,
                  exportToReact,
                  previewExport,
                  shareResult,
                  clearError,
                  reset,
                  supportedFormats: exportService.getSupportedFormats(),
                  validateOptions:
                    exportService.validateOptions.bind(exportService),
                }
              )
            })({
              onSuccess: (result) => {
                ;(cov_sepbe9o31().f[2]++,
                  cov_sepbe9o31().s[7]++,
                  setOpen(!1),
                  cov_sepbe9o31().s[8]++,
                  cov_sepbe9o31().b[2][0]++,
                  null === onExportComplete ||
                  (cov_sepbe9o31().b[2][1]++, void 0 === onExportComplete)
                    ? cov_sepbe9o31().b[1][0]++
                    : (cov_sepbe9o31().b[1][1]++,
                      onExportComplete(result.format)))
              },
              autoDownload: !0,
              showToasts: !0,
            }))
        ;(cov_sepbe9o31().s[9]++,
          react.useEffect(() => {
            ;(cov_sepbe9o31().f[3]++,
              cov_sepbe9o31().s[10]++,
              setOptions(getDefaultOptionsForFormat(selectedFormat)))
          }, [selectedFormat]),
          cov_sepbe9o31().s[11]++,
          react.useEffect(() => {
            ;(cov_sepbe9o31().f[4]++, cov_sepbe9o31().s[12]++)
            ;(cov_sepbe9o31().s[18]++,
              cov_sepbe9o31().b[4][0]++,
              open && (cov_sepbe9o31().b[4][1]++, note)
                ? (cov_sepbe9o31().b[3][0]++,
                  cov_sepbe9o31().s[19]++,
                  (async () => {
                    ;(cov_sepbe9o31().f[5]++, cov_sepbe9o31().s[13]++)
                    try {
                      const result =
                        (cov_sepbe9o31().s[14]++,
                        await previewExport(note, selectedFormat, options))
                      ;(cov_sepbe9o31().s[15]++, setPreview(result))
                    } catch (err) {
                      ;(cov_sepbe9o31().s[16]++,
                        export_dialog_console.error(
                          'Preview generation failed:',
                          err
                        ),
                        cov_sepbe9o31().s[17]++,
                        setPreview(null))
                    }
                  })())
                : cov_sepbe9o31().b[3][1]++)
          }, [open, note, selectedFormat, options, previewExport]),
          cov_sepbe9o31().s[20]++)
        cov_sepbe9o31().s[22]++
        const updateOptions = (updates) => {
          ;(cov_sepbe9o31().f[7]++,
            cov_sepbe9o31().s[23]++,
            setOptions(
              (prev) => (
                cov_sepbe9o31().f[8]++,
                cov_sepbe9o31().s[24]++,
                { ...prev, ...updates }
              )
            ))
        }
        return (
          cov_sepbe9o31().s[25]++,
          (0, jsx_runtime.jsxs)(dist.lG, {
            open,
            onOpenChange: setOpen,
            children: [
              (0, jsx_runtime.jsx)(dist.zM, {
                asChild: !0,
                children:
                  (cov_sepbe9o31().b[5][0]++,
                  children ||
                    (cov_sepbe9o31().b[5][1]++,
                    (0, jsx_runtime.jsxs)(components_button.$, {
                      variant: 'secondary',
                      className: 'gap-2',
                      children: [
                        (0, jsx_runtime.jsx)(settings.A, {
                          className: 'h-4 w-4',
                        }),
                        'Export Options',
                      ],
                    }))),
              }),
              (0, jsx_runtime.jsxs)(dist.Cf, {
                className: 'max-w-4xl max-h-[90vh] overflow-y-auto',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    className:
                      'flex flex-col space-y-1.5 text-center sm:text-left mb-4',
                    children: [
                      (0, jsx_runtime.jsxs)(dist.L3, {
                        className:
                          'flex items-center gap-2 text-lg font-semibold leading-none tracking-tight',
                        children: [
                          (0, jsx_runtime.jsx)(download.A, {
                            className: 'h-5 w-5',
                          }),
                          'Export Note',
                        ],
                      }),
                      (0, jsx_runtime.jsx)(dist.rr, {
                        className: 'text-sm text-muted-foreground',
                        children:
                          'Choose your export format and customize the output options.',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsxs)('div', {
                    className: 'grid grid-cols-1 lg:grid-cols-2 gap-6',
                    children: [
                      (0, jsx_runtime.jsxs)('div', {
                        className: 'space-y-6',
                        children: [
                          (0, jsx_runtime.jsxs)('div', {
                            className: 'space-y-3',
                            children: [
                              (0, jsx_runtime.jsx)(react_label_dist.J, {
                                className: 'text-sm font-medium',
                                children: 'Export Format',
                              }),
                              (0, jsx_runtime.jsx)(react_radio_group_dist.z6, {
                                value: selectedFormat,
                                onValueChange: (value) => (
                                  cov_sepbe9o31().f[9]++,
                                  cov_sepbe9o31().s[26]++,
                                  setSelectedFormat(value)
                                ),
                                className: 'grid grid-cols-2 gap-3',
                                children: formats.map((format) => {
                                  cov_sepbe9o31().f[10]++
                                  const Icon =
                                    (cov_sepbe9o31().s[27]++,
                                    (function getFormatIcon(format) {
                                      cov_sepbe9o31().f[36]++
                                      const icons =
                                        (cov_sepbe9o31().s[65]++,
                                        {
                                          markdown: file_text.A,
                                          pdf: file.A,
                                          html: globe.A,
                                          react: code.A,
                                        })
                                      return (
                                        cov_sepbe9o31().s[66]++,
                                        cov_sepbe9o31().b[27][0]++,
                                        icons[format] ||
                                          (cov_sepbe9o31().b[27][1]++,
                                          file_text.A)
                                      )
                                    })(format.value))
                                  return (
                                    cov_sepbe9o31().s[28]++,
                                    (0, jsx_runtime.jsxs)(
                                      'div',
                                      {
                                        className: (0, utils.cn)(
                                          'flex items-center space-x-2 rounded-lg border p-3 cursor-pointer transition-colors',
                                          selectedFormat === format.value
                                            ? (cov_sepbe9o31().b[6][0]++,
                                              'border-primary bg-primary/5')
                                            : (cov_sepbe9o31().b[6][1]++,
                                              'border-border hover:bg-accent/50')
                                        ),
                                        children: [
                                          (0, jsx_runtime.jsx)(
                                            react_radio_group_dist.CU,
                                            {
                                              value: format.value,
                                              id: format.value,
                                            }
                                          ),
                                          (0, jsx_runtime.jsxs)('div', {
                                            className:
                                              'flex items-center gap-2 flex-1',
                                            children: [
                                              (0, jsx_runtime.jsx)(Icon, {
                                                className: 'h-4 w-4',
                                              }),
                                              (0, jsx_runtime.jsxs)('div', {
                                                children: [
                                                  (0, jsx_runtime.jsx)('div', {
                                                    className: 'font-medium',
                                                    children: format.label,
                                                  }),
                                                  (0, jsx_runtime.jsx)('div', {
                                                    className:
                                                      'text-xs text-muted-foreground',
                                                    children:
                                                      format.description.split(
                                                        ' - '
                                                      )[0],
                                                  }),
                                                ],
                                              }),
                                            ],
                                          }),
                                        ],
                                      },
                                      format.value
                                    )
                                  )
                                }),
                              }),
                            ],
                          }),
                          (0, jsx_runtime.jsxs)('div', {
                            className: 'space-y-4',
                            children: [
                              (0, jsx_runtime.jsx)(react_label_dist.J, {
                                className: 'text-sm font-medium',
                                children: 'General Options',
                              }),
                              (0, jsx_runtime.jsxs)('div', {
                                className: 'flex items-center justify-between',
                                children: [
                                  (0, jsx_runtime.jsxs)('div', {
                                    children: [
                                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                                        htmlFor: 'include-dates',
                                        children: 'Include Dates',
                                      }),
                                      (0, jsx_runtime.jsx)('div', {
                                        className:
                                          'text-xs text-muted-foreground',
                                        children:
                                          'Show creation and modification dates',
                                      }),
                                    ],
                                  }),
                                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                                    id: 'include-dates',
                                    checked: options.includeDates,
                                    onCheckedChange: (checked) => (
                                      cov_sepbe9o31().f[11]++,
                                      cov_sepbe9o31().s[29]++,
                                      updateOptions({ includeDates: checked })
                                    ),
                                  }),
                                ],
                              }),
                              (0, jsx_runtime.jsxs)('div', {
                                className: 'flex items-center justify-between',
                                children: [
                                  (0, jsx_runtime.jsxs)('div', {
                                    children: [
                                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                                        htmlFor: 'include-tags',
                                        children: 'Include Tags',
                                      }),
                                      (0, jsx_runtime.jsx)('div', {
                                        className:
                                          'text-xs text-muted-foreground',
                                        children: 'Show note tags if available',
                                      }),
                                    ],
                                  }),
                                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                                    id: 'include-tags',
                                    checked: options.includeTags,
                                    onCheckedChange: (checked) => (
                                      cov_sepbe9o31().f[12]++,
                                      cov_sepbe9o31().s[30]++,
                                      updateOptions({ includeTags: checked })
                                    ),
                                  }),
                                ],
                              }),
                              (0, jsx_runtime.jsxs)('div', {
                                className: 'flex items-center justify-between',
                                children: [
                                  (0, jsx_runtime.jsxs)('div', {
                                    children: [
                                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                                        htmlFor: 'include-frontmatter',
                                        children: 'Include Front Matter',
                                      }),
                                      (0, jsx_runtime.jsx)('div', {
                                        className:
                                          'text-xs text-muted-foreground',
                                        children: 'Add YAML metadata header',
                                      }),
                                    ],
                                  }),
                                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                                    id: 'include-frontmatter',
                                    checked: options.includeFrontMatter,
                                    onCheckedChange: (checked) => (
                                      cov_sepbe9o31().f[13]++,
                                      cov_sepbe9o31().s[31]++,
                                      updateOptions({
                                        includeFrontMatter: checked,
                                      })
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                          (cov_sepbe9o31().b[7][0]++,
                          'markdown' === selectedFormat &&
                            (cov_sepbe9o31().b[7][1]++,
                            (0, jsx_runtime.jsx)(MarkdownOptions, {
                              options,
                              onChange: updateOptions,
                            }))),
                          (cov_sepbe9o31().b[8][0]++,
                          'pdf' === selectedFormat &&
                            (cov_sepbe9o31().b[8][1]++,
                            (0, jsx_runtime.jsx)(PDFOptions, {
                              options,
                              onChange: updateOptions,
                            }))),
                          (cov_sepbe9o31().b[9][0]++,
                          'html' === selectedFormat &&
                            (cov_sepbe9o31().b[9][1]++,
                            (0, jsx_runtime.jsx)(HTMLOptions, {
                              options,
                              onChange: updateOptions,
                            }))),
                          (cov_sepbe9o31().b[10][0]++,
                          'react' === selectedFormat &&
                            (cov_sepbe9o31().b[10][1]++,
                            (0, jsx_runtime.jsx)(ReactOptions, {
                              options,
                              onChange: updateOptions,
                            }))),
                          (0, jsx_runtime.jsxs)('div', {
                            className: 'space-y-4',
                            children: [
                              (0, jsx_runtime.jsx)(react_label_dist.J, {
                                className: 'text-sm font-medium',
                                children: 'Quality Settings',
                              }),
                              (0, jsx_runtime.jsxs)('div', {
                                className: 'space-y-2',
                                children: [
                                  (0, jsx_runtime.jsxs)('div', {
                                    className:
                                      'flex items-center justify-between',
                                    children: [
                                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                                        children: 'Image Quality',
                                      }),
                                      (0, jsx_runtime.jsxs)('span', {
                                        className:
                                          'text-sm text-muted-foreground',
                                        children: [
                                          (cov_sepbe9o31().b[11][0]++,
                                          cov_sepbe9o31().b[13][0]++,
                                          (null ===
                                            (_options_quality =
                                              options.quality) ||
                                          (cov_sepbe9o31().b[13][1]++,
                                          void 0 === _options_quality)
                                            ? void cov_sepbe9o31().b[12][0]++
                                            : (cov_sepbe9o31().b[12][1]++,
                                              _options_quality.imageQuality)) ||
                                            (cov_sepbe9o31().b[11][1]++, 85)),
                                          '%',
                                        ],
                                      }),
                                    ],
                                  }),
                                  (0, jsx_runtime.jsx)(slider.A, {
                                    value: [
                                      (cov_sepbe9o31().b[14][0]++,
                                      cov_sepbe9o31().b[16][0]++,
                                      (null ===
                                        (_options_quality1 = options.quality) ||
                                      (cov_sepbe9o31().b[16][1]++,
                                      void 0 === _options_quality1)
                                        ? void cov_sepbe9o31().b[15][0]++
                                        : (cov_sepbe9o31().b[15][1]++,
                                          _options_quality1.imageQuality)) ||
                                        (cov_sepbe9o31().b[14][1]++, 85)),
                                    ],
                                    onValueChange: ([value]) => (
                                      cov_sepbe9o31().f[14]++,
                                      cov_sepbe9o31().s[32]++,
                                      updateOptions({
                                        quality: {
                                          ...options.quality,
                                          imageQuality: value,
                                        },
                                      })
                                    ),
                                    min: 10,
                                    max: 100,
                                    step: 5,
                                    className: 'w-full',
                                  }),
                                ],
                              }),
                              (0, jsx_runtime.jsxs)('div', {
                                className: 'flex items-center justify-between',
                                children: [
                                  (0, jsx_runtime.jsxs)('div', {
                                    children: [
                                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                                        htmlFor: 'optimize-size',
                                        children: 'Optimize File Size',
                                      }),
                                      (0, jsx_runtime.jsx)('div', {
                                        className:
                                          'text-xs text-muted-foreground',
                                        children:
                                          'Reduce file size when possible',
                                      }),
                                    ],
                                  }),
                                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                                    id: 'optimize-size',
                                    checked:
                                      (cov_sepbe9o31().b[18][0]++,
                                      null ===
                                        (_options_quality2 = options.quality) ||
                                      (cov_sepbe9o31().b[18][1]++,
                                      void 0 === _options_quality2)
                                        ? void cov_sepbe9o31().b[17][0]++
                                        : (cov_sepbe9o31().b[17][1]++,
                                          _options_quality2.optimizeSize)),
                                    onCheckedChange: (checked) => (
                                      cov_sepbe9o31().f[15]++,
                                      cov_sepbe9o31().s[33]++,
                                      updateOptions({
                                        quality: {
                                          ...options.quality,
                                          optimizeSize: checked,
                                        },
                                      })
                                    ),
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      }),
                      (0, jsx_runtime.jsxs)('div', {
                        className: 'space-y-4',
                        children: [
                          (0, jsx_runtime.jsxs)('div', {
                            className: 'flex items-center justify-between',
                            children: [
                              (0, jsx_runtime.jsx)(react_label_dist.J, {
                                className: 'text-sm font-medium',
                                children: 'Preview',
                              }),
                              (cov_sepbe9o31().b[19][0]++,
                              preview &&
                                (cov_sepbe9o31().b[19][1]++,
                                (0, jsx_runtime.jsxs)('div', {
                                  className: 'flex gap-2',
                                  children: [
                                    (0, jsx_runtime.jsxs)(badge.E, {
                                      variant: 'outline',
                                      children: [preview.wordCount, ' words'],
                                    }),
                                    (0, jsx_runtime.jsx)(badge.E, {
                                      variant: 'outline',
                                      children: formatFileSize(
                                        preview.estimatedSize
                                      ),
                                    }),
                                  ],
                                }))),
                            ],
                          }),
                          (0, jsx_runtime.jsx)('div', {
                            className:
                              'border rounded-lg p-4 h-96 overflow-y-auto bg-muted/50',
                            children: preview
                              ? (cov_sepbe9o31().b[20][0]++,
                                (0, jsx_runtime.jsx)('pre', {
                                  className:
                                    'text-xs whitespace-pre-wrap font-mono',
                                  children: preview.content,
                                }))
                              : (cov_sepbe9o31().b[20][1]++,
                                (0, jsx_runtime.jsx)('div', {
                                  className:
                                    'flex items-center justify-center h-full text-muted-foreground',
                                  children: (0, jsx_runtime.jsxs)('div', {
                                    className: 'text-center',
                                    children: [
                                      (0, jsx_runtime.jsx)(file_text.A, {
                                        className:
                                          'h-8 w-8 mx-auto mb-2 opacity-50',
                                      }),
                                      (0, jsx_runtime.jsx)('div', {
                                        children: 'Generating preview...',
                                      }),
                                    ],
                                  }),
                                })),
                          }),
                          (cov_sepbe9o31().b[21][0]++,
                          error &&
                            (cov_sepbe9o31().b[21][1]++,
                            (0, jsx_runtime.jsx)('div', {
                              className:
                                'p-3 bg-destructive/10 border border-destructive/20 rounded-lg',
                              children: (0, jsx_runtime.jsxs)('div', {
                                className:
                                  'flex items-center gap-2 text-destructive text-sm',
                                children: [
                                  (0, jsx_runtime.jsx)(x.A, {
                                    className: 'h-4 w-4',
                                  }),
                                  error,
                                ],
                              }),
                            }))),
                        ],
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsxs)('div', {
                    className:
                      'flex items-center justify-between pt-4 border-t',
                    children: [
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-sm text-muted-foreground',
                        children:
                          (cov_sepbe9o31().b[22][0]++,
                          note.title &&
                            (cov_sepbe9o31().b[22][1]++,
                            `Exporting: ${note.title}`)),
                      }),
                      (0, jsx_runtime.jsxs)('div', {
                        className: 'flex gap-2',
                        children: [
                          (0, jsx_runtime.jsx)(components_button.$, {
                            variant: 'secondary',
                            onClick: () => (
                              cov_sepbe9o31().f[16]++,
                              cov_sepbe9o31().s[34]++,
                              setOpen(!1)
                            ),
                            disabled: isExporting,
                            children: 'Cancel',
                          }),
                          (0, jsx_runtime.jsx)(components_button.$, {
                            onClick: async () => {
                              ;(cov_sepbe9o31().f[6]++,
                                cov_sepbe9o31().s[21]++,
                                await exportNote(note, options))
                            },
                            disabled: isExporting,
                            className: 'gap-2',
                            children: isExporting
                              ? (cov_sepbe9o31().b[23][0]++,
                                (0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
                                  children: [
                                    (0, jsx_runtime.jsx)('div', {
                                      className:
                                        'h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent',
                                    }),
                                    'Exporting... ',
                                    progress,
                                    '%',
                                  ],
                                }))
                              : (cov_sepbe9o31().b[23][1]++,
                                (0, jsx_runtime.jsxs)(jsx_runtime.Fragment, {
                                  children: [
                                    (0, jsx_runtime.jsx)(download.A, {
                                      className: 'h-4 w-4',
                                    }),
                                    'Export ',
                                    selectedFormat.toUpperCase(),
                                  ],
                                })),
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          })
        )
      }
      function MarkdownOptions({ options, onChange }) {
        return (
          cov_sepbe9o31().f[17]++,
          cov_sepbe9o31().s[35]++,
          (0, jsx_runtime.jsxs)('div', {
            className: 'space-y-4',
            children: [
              (0, jsx_runtime.jsx)(react_label_dist.J, {
                className: 'text-sm font-medium',
                children: 'Markdown Options',
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'use-gfm',
                        children: 'GitHub Flavored Markdown',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Use GFM syntax for tables and task lists',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'use-gfm',
                    checked: options.useGFM,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[18]++,
                      cov_sepbe9o31().s[36]++,
                      onChange({ ...options, useGFM: checked })
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'space-y-2',
                children: [
                  (0, jsx_runtime.jsx)(react_label_dist.J, {
                    children: 'Image Handling',
                  }),
                  (0, jsx_runtime.jsxs)(react_radio_group_dist.z6, {
                    value: options.imageHandling,
                    onValueChange: (value) => (
                      cov_sepbe9o31().f[19]++,
                      cov_sepbe9o31().s[37]++,
                      onChange({ ...options, imageHandling: value })
                    ),
                    children: [
                      (0, jsx_runtime.jsxs)('div', {
                        className: 'flex items-center space-x-2',
                        children: [
                          (0, jsx_runtime.jsx)(react_radio_group_dist.CU, {
                            value: 'embed',
                            id: 'embed',
                          }),
                          (0, jsx_runtime.jsx)(react_label_dist.J, {
                            htmlFor: 'embed',
                            children: 'Embed images',
                          }),
                        ],
                      }),
                      (0, jsx_runtime.jsxs)('div', {
                        className: 'flex items-center space-x-2',
                        children: [
                          (0, jsx_runtime.jsx)(react_radio_group_dist.CU, {
                            value: 'link',
                            id: 'link',
                          }),
                          (0, jsx_runtime.jsx)(react_label_dist.J, {
                            htmlFor: 'link',
                            children: 'Link to images',
                          }),
                        ],
                      }),
                      (0, jsx_runtime.jsxs)('div', {
                        className: 'flex items-center space-x-2',
                        children: [
                          (0, jsx_runtime.jsx)(react_radio_group_dist.CU, {
                            value: 'copy',
                            id: 'copy',
                          }),
                          (0, jsx_runtime.jsx)(react_label_dist.J, {
                            htmlFor: 'copy',
                            children: 'Copy images',
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
            ],
          })
        )
      }
      function PDFOptions({ options, onChange }) {
        return (
          cov_sepbe9o31().f[20]++,
          cov_sepbe9o31().s[38]++,
          (0, jsx_runtime.jsxs)('div', {
            className: 'space-y-4',
            children: [
              (0, jsx_runtime.jsx)(react_label_dist.J, {
                className: 'text-sm font-medium',
                children: 'PDF Options',
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'space-y-2',
                children: [
                  (0, jsx_runtime.jsx)(react_label_dist.J, {
                    children: 'Page Format',
                  }),
                  (0, jsx_runtime.jsx)(react_radio_group_dist.z6, {
                    value: options.pageFormat,
                    onValueChange: (value) => (
                      cov_sepbe9o31().f[21]++,
                      cov_sepbe9o31().s[39]++,
                      onChange({ pageFormat: value })
                    ),
                    children: ['A4', 'Letter', 'Legal', 'A3'].map(
                      (format) => (
                        cov_sepbe9o31().f[22]++,
                        cov_sepbe9o31().s[40]++,
                        (0, jsx_runtime.jsxs)(
                          'div',
                          {
                            className: 'flex items-center space-x-2',
                            children: [
                              (0, jsx_runtime.jsx)(react_radio_group_dist.CU, {
                                value: format,
                                id: format,
                              }),
                              (0, jsx_runtime.jsx)(react_label_dist.J, {
                                htmlFor: format,
                                children: format,
                              }),
                            ],
                          },
                          format
                        )
                      )
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'include-page-numbers',
                        children: 'Page Numbers',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Add page numbers to footer',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'include-page-numbers',
                    checked: options.includePageNumbers,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[23]++,
                      cov_sepbe9o31().s[41]++,
                      onChange({ ...options, includePageNumbers: checked })
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'generate-toc',
                        children: 'Table of Contents',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Generate TOC from headings',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'generate-toc',
                    checked: options.generateTOC,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[24]++,
                      cov_sepbe9o31().s[42]++,
                      onChange({ ...options, generateTOC: checked })
                    ),
                  }),
                ],
              }),
            ],
          })
        )
      }
      function HTMLOptions({ options, onChange }) {
        return (
          cov_sepbe9o31().f[25]++,
          cov_sepbe9o31().s[43]++,
          (0, jsx_runtime.jsxs)('div', {
            className: 'space-y-4',
            children: [
              (0, jsx_runtime.jsx)(react_label_dist.J, {
                className: 'text-sm font-medium',
                children: 'HTML Options',
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'self-contained',
                        children: 'Self-contained',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Embed all CSS and assets inline',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'self-contained',
                    checked: options.selfContained,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[26]++,
                      cov_sepbe9o31().s[44]++,
                      onChange({ ...options, selfContained: checked })
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'include-search',
                        children: 'Search functionality',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Add in-page search feature',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'include-search',
                    checked: options.includeSearch,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[27]++,
                      cov_sepbe9o31().s[45]++,
                      onChange({ ...options, includeSearch: checked })
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'dark-mode',
                        children: 'Dark mode support',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Include dark theme styles',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'dark-mode',
                    checked: options.darkMode,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[28]++,
                      cov_sepbe9o31().s[46]++,
                      onChange({ ...options, darkMode: checked })
                    ),
                  }),
                ],
              }),
            ],
          })
        )
      }
      function ReactOptions({ options, onChange }) {
        return (
          cov_sepbe9o31().f[29]++,
          cov_sepbe9o31().s[47]++,
          (0, jsx_runtime.jsxs)('div', {
            className: 'space-y-4',
            children: [
              (0, jsx_runtime.jsx)(react_label_dist.J, {
                className: 'text-sm font-medium',
                children: 'React Options',
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'flex items-center justify-between',
                children: [
                  (0, jsx_runtime.jsxs)('div', {
                    children: [
                      (0, jsx_runtime.jsx)(react_label_dist.J, {
                        htmlFor: 'use-typescript',
                        children: 'TypeScript',
                      }),
                      (0, jsx_runtime.jsx)('div', {
                        className: 'text-xs text-muted-foreground',
                        children: 'Generate TypeScript component',
                      }),
                    ],
                  }),
                  (0, jsx_runtime.jsx)(react_switch_dist.dO, {
                    id: 'use-typescript',
                    checked: options.useTypeScript,
                    onCheckedChange: (checked) => (
                      cov_sepbe9o31().f[30]++,
                      cov_sepbe9o31().s[48]++,
                      onChange({ ...options, useTypeScript: checked })
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'space-y-2',
                children: [
                  (0, jsx_runtime.jsx)(react_label_dist.J, {
                    children: 'Styling Approach',
                  }),
                  (0, jsx_runtime.jsx)(react_radio_group_dist.z6, {
                    value: options.styling,
                    onValueChange: (value) => (
                      cov_sepbe9o31().f[31]++,
                      cov_sepbe9o31().s[49]++,
                      onChange({ ...options, styling: value })
                    ),
                    children: [
                      { value: 'tailwind', label: 'Tailwind CSS' },
                      { value: 'css-modules', label: 'CSS Modules' },
                      {
                        value: 'styled-components',
                        label: 'Styled Components',
                      },
                      { value: 'css-in-js', label: 'CSS-in-JS' },
                    ].map(
                      (style) => (
                        cov_sepbe9o31().f[32]++,
                        cov_sepbe9o31().s[50]++,
                        (0, jsx_runtime.jsxs)(
                          'div',
                          {
                            className: 'flex items-center space-x-2',
                            children: [
                              (0, jsx_runtime.jsx)(react_radio_group_dist.CU, {
                                value: style.value,
                                id: style.value,
                              }),
                              (0, jsx_runtime.jsx)(react_label_dist.J, {
                                htmlFor: style.value,
                                children: style.label,
                              }),
                            ],
                          },
                          style.value
                        )
                      )
                    ),
                  }),
                ],
              }),
              (0, jsx_runtime.jsxs)('div', {
                className: 'space-y-2',
                children: [
                  (0, jsx_runtime.jsx)(react_label_dist.J, {
                    htmlFor: 'component-name',
                    children: 'Component Name',
                  }),
                  (0, jsx_runtime.jsx)(input.pd, {
                    id: 'component-name',
                    value:
                      (cov_sepbe9o31().b[24][0]++,
                      options.componentName ||
                        (cov_sepbe9o31().b[24][1]++, '')),
                    onChange: (e) => (
                      cov_sepbe9o31().f[33]++,
                      cov_sepbe9o31().s[51]++,
                      onChange({ ...options, componentName: e.target.value })
                    ),
                    placeholder: 'NoteComponent',
                  }),
                ],
              }),
            ],
          })
        )
      }
      function formatFileSize(bytes) {
        if ((cov_sepbe9o31().f[34]++, cov_sepbe9o31().s[52]++, 0 === bytes))
          return (
            cov_sepbe9o31().b[25][0]++,
            cov_sepbe9o31().s[53]++,
            '0 Bytes'
          )
        cov_sepbe9o31().b[25][1]++
        const k = (cov_sepbe9o31().s[54]++, 1024),
          sizes = (cov_sepbe9o31().s[55]++, ['Bytes', 'KB', 'MB', 'GB']),
          i =
            (cov_sepbe9o31().s[56]++, Math.floor(Math.log(bytes) / Math.log(k)))
        return (
          cov_sepbe9o31().s[57]++,
          `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`
        )
      }
      function getDefaultOptionsForFormat(format) {
        cov_sepbe9o31().f[35]++
        const baseOptions =
          (cov_sepbe9o31().s[58]++,
          {
            format,
            includeFrontMatter: !0,
            includeDates: !0,
            includeTags: !0,
            quality: {
              imageQuality: 85,
              imageFormat: 'jpeg',
              imageMaxWidth: 1200,
              optimizeSize: !0,
            },
          })
        switch ((cov_sepbe9o31().s[59]++, format)) {
          case 'markdown':
            return (
              cov_sepbe9o31().b[26][0]++,
              cov_sepbe9o31().s[60]++,
              {
                ...baseOptions,
                format: 'markdown',
                useGFM: !0,
                imageHandling: 'embed',
              }
            )
          case 'pdf':
            return (
              cov_sepbe9o31().b[26][1]++,
              cov_sepbe9o31().s[61]++,
              {
                ...baseOptions,
                format: 'pdf',
                pageFormat: 'A4',
                pageOrientation: 'portrait',
                includePageNumbers: !0,
                generateTOC: !0,
                margins: { top: 20, right: 20, bottom: 20, left: 20 },
              }
            )
          case 'html':
            return (
              cov_sepbe9o31().b[26][2]++,
              cov_sepbe9o31().s[62]++,
              {
                ...baseOptions,
                format: 'html',
                selfContained: !0,
                includeSearch: !0,
                includeNavigation: !0,
                responsive: !0,
                darkMode: !0,
              }
            )
          case 'react':
            return (
              cov_sepbe9o31().b[26][3]++,
              cov_sepbe9o31().s[63]++,
              {
                ...baseOptions,
                format: 'react',
                useTypeScript: !0,
                styling: 'tailwind',
                functional: !0,
                includePropTypes: !1,
              }
            )
          default:
            return (
              cov_sepbe9o31().b[26][4]++,
              cov_sepbe9o31().s[64]++,
              baseOptions
            )
        }
      }
      ;(cov_sepbe9o31(),
        cov_sepbe9o31().s[67]++,
        (ExportDialog.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'ExportDialog',
          props: {
            note: { required: !0, tsType: { name: 'Note' }, description: '' },
            children: {
              required: !1,
              tsType: { name: 'ReactReactNode', raw: 'React.ReactNode' },
              description: '',
            },
            defaultFormat: {
              required: !1,
              tsType: {
                name: 'union',
                raw: "'markdown' | 'pdf' | 'html' | 'react'",
                elements: [
                  { name: 'literal', value: "'markdown'" },
                  { name: 'literal', value: "'pdf'" },
                  { name: 'literal', value: "'html'" },
                  { name: 'literal', value: "'react'" },
                ],
              },
              description: '',
              defaultValue: { value: "'markdown'", computed: !1 },
            },
            onExportComplete: {
              required: !1,
              tsType: {
                name: 'signature',
                type: 'function',
                raw: '(format: ExportFormat) => void',
                signature: {
                  arguments: [
                    {
                      type: {
                        name: 'union',
                        raw: "'markdown' | 'pdf' | 'html' | 'react'",
                        elements: [
                          { name: 'literal', value: "'markdown'" },
                          { name: 'literal', value: "'pdf'" },
                          { name: 'literal', value: "'html'" },
                          { name: 'literal', value: "'react'" },
                        ],
                      },
                      name: 'format',
                    },
                  ],
                  return: { name: 'void' },
                },
              },
              description: '',
            },
          },
        }))
      var test_dist = __webpack_require__(
        '../../node_modules/.pnpm/@storybook+test@8.6.14_storybook@9.0.18_@testing-library+dom@10.4.0_prettier@3.6.2_/node_modules/@storybook/test/dist/index.mjs'
      )
      const export_dialog_stories = {
          title: 'UI/Export/ExportDialog',
          component: ExportDialog,
          parameters: { layout: 'centered' },
          tags: ['autodocs'],
          argTypes: {
            defaultFormat: {
              control: 'select',
              options: ['markdown', 'pdf', 'html', 'react'],
              description: 'Default export format',
            },
            onExportComplete: {
              action: 'onExportComplete',
              description: 'Callback when export completes',
            },
          },
          decorators: [
            (Story) =>
              (0, jsx_runtime.jsx)('div', {
                className: 'min-h-[600px] flex items-center justify-center',
                children: (0, jsx_runtime.jsx)(Story, {}),
              }),
          ],
        },
        sampleNote = {
          id: '123',
          title: 'Getting Started with Notable',
          content:
            "# Getting Started with Notable\n\nWelcome to Notable, your modern note-taking application.\n\n## Features\n\n- **Rich Text Editing**: Full markdown support with live preview\n- **Organization**: Tags, folders, and search functionality\n- **Export Options**: Multiple formats including PDF, HTML, and more\n- **Cross-Platform**: Works on web, desktop, and mobile\n\n## Quick Start\n\n1. Create a new note\n2. Use markdown for formatting\n3. Add tags for organization\n4. Export in your preferred format\n\n### Code Example\n\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet('Notable User'));\n```\n\n## Conclusion\n\nNotable makes it easy to capture and organize your thoughts.",
          tags: ['tutorial', 'getting-started'],
          created_at: '2024-01-01T00:00:00.000Z',
          updated_at: '2024-01-15T00:00:00.000Z',
          userId: 'user123',
          version: 1,
          device_id: 'device123',
          last_modified: '2024-01-15T00:00:00.000Z',
          vector_clock: { device123: 1 },
          local_changes: !1,
          deleted: !1,
          is_folder: !1,
        },
        Default = { args: { note: sampleNote } },
        WithCustomTrigger = {
          args: {
            note: sampleNote,
            children: (0, jsx_runtime.jsxs)(components_button.$, {
              variant: 'secondary',
              className: 'gap-2',
              children: [
                (0, jsx_runtime.jsx)(download.A, { className: 'h-4 w-4' }),
                'Export Note',
              ],
            }),
          },
        },
        PDFDefault = { args: { note: sampleNote, defaultFormat: 'pdf' } },
        HTMLDefault = { args: { note: sampleNote, defaultFormat: 'html' } },
        ReactDefault = { args: { note: sampleNote, defaultFormat: 'react' } },
        WithCallbacks = {
          args: { note: sampleNote },
          render: () => {
            const [exportHistory, setExportHistory] = (0, react.useState)([])
            return (0, jsx_runtime.jsxs)('div', {
              className: 'space-y-4',
              children: [
                (0, jsx_runtime.jsx)(ExportDialog, {
                  note: sampleNote,
                  onExportComplete: (format) => {
                    setExportHistory((prev) => [
                      ...prev,
                      { format, timestamp: new Date() },
                    ])
                  },
                }),
                exportHistory.length > 0 &&
                  (0, jsx_runtime.jsxs)('div', {
                    className: 'p-4 border rounded-lg',
                    children: [
                      (0, jsx_runtime.jsx)('h3', {
                        className: 'font-semibold mb-2',
                        children: 'Export History',
                      }),
                      (0, jsx_runtime.jsx)('ul', {
                        className: 'space-y-1 text-sm',
                        children: exportHistory.map((entry, index) =>
                          (0, jsx_runtime.jsxs)(
                            'li',
                            {
                              children: [
                                'Exported as ',
                                entry.format.toUpperCase(),
                                ' at',
                                ' ',
                                entry.timestamp.toLocaleTimeString(),
                              ],
                            },
                            index
                          )
                        ),
                      }),
                    ],
                  }),
              ],
            })
          },
        },
        LongNote = {
          args: {
            note: {
              ...sampleNote,
              title: 'Complete Guide to Markdown',
              content:
                '# Complete Guide to Markdown\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Basic Syntax](#basic-syntax)\n3. [Extended Syntax](#extended-syntax)\n4. [Best Practices](#best-practices)\n\n## Introduction\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world\'s most popular markup languages.\n\n## Basic Syntax\n\n### Headings\n\n```markdown\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n```\n\n### Emphasis\n\n- **Bold text** using `**text**` or `__text__`\n- *Italic text* using `*text*` or `_text_`\n- ***Bold and italic*** using `***text***`\n\n### Lists\n\n#### Unordered Lists\n- First item\n- Second item\n  - Nested item\n  - Another nested item\n- Third item\n\n#### Ordered Lists\n1. First item\n2. Second item\n   1. Nested item\n   2. Another nested item\n3. Third item\n\n### Links and Images\n\n[Link text](https://example.com)\n\n![Alt text](https://via.placeholder.com/150)\n\n### Blockquotes\n\n> This is a blockquote.\n> \n> It can span multiple lines.\n\n### Code\n\nInline `code` uses backticks.\n\n```javascript\n// Code block with syntax highlighting\nfunction example() {\n  console.log("Hello, World!");\n}\n```\n\n### Tables\n\n| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| Cell 1   | Cell 2   | Cell 3   |\n| Cell 4   | Cell 5   | Cell 6   |\n\n### Horizontal Rules\n\n---\n\n## Extended Syntax\n\n### Task Lists\n\n- [x] Completed task\n- [ ] Incomplete task\n- [ ] Another task\n\n### Footnotes\n\nHere\'s a sentence with a footnote[^1].\n\n[^1]: This is the footnote.\n\n### Definition Lists\n\nTerm 1\n: Definition 1\n\nTerm 2\n: Definition 2a\n: Definition 2b\n\n### Strikethrough\n\n~~This text is strikethrough~~\n\n## Best Practices\n\n1. Use consistent formatting\n2. Keep line lengths reasonable\n3. Use blank lines for readability\n4. Preview your markdown\n5. Use appropriate heading hierarchy\n6. Include alt text for images\n7. Test links regularly\n\n## Conclusion\n\nMarkdown is a powerful yet simple way to format text. With these basics, you can create well-structured documents that are easy to read and maintain.',
              tags: ['tutorial', 'markdown', 'documentation', 'guide'],
            },
          },
        },
        ShortNote = {
          args: {
            note: {
              ...sampleNote,
              title: 'Quick Note',
              content: 'Remember to review the export options.',
              tags: ['reminder'],
            },
          },
        },
        InteractiveFormatSwitch = {
          args: { note: sampleNote },
          play: async ({ canvasElement }) => {
            const canvas = (0, test_dist.ux)(canvasElement),
              exportButton = canvas.getByText('Export Options')
            ;(await test_dist.Q4.click(exportButton),
              await (0, test_dist.fm)(() => {
                ;(0, test_dist.E3)(
                  canvas.getByText('Export Note')
                ).toBeInTheDocument()
              }))
            const pdfOption = canvas.getByText('PDF')
            ;(await test_dist.Q4.click(pdfOption),
              await (0, test_dist.E3)(
                canvas.getByText('Page Format')
              ).toBeInTheDocument())
            const htmlOption = canvas.getByText('HTML')
            ;(await test_dist.Q4.click(htmlOption),
              await (0, test_dist.E3)(
                canvas.getByText('Self-contained')
              ).toBeInTheDocument())
            const reactOption = canvas.getByText('React')
            ;(await test_dist.Q4.click(reactOption),
              await (0, test_dist.E3)(
                canvas.getByText('TypeScript')
              ).toBeInTheDocument())
          },
        },
        InteractiveOptions = {
          args: { note: sampleNote },
          play: async ({ canvasElement }) => {
            const canvas = (0, test_dist.ux)(canvasElement),
              exportButton = canvas.getByText('Export Options')
            ;(await test_dist.Q4.click(exportButton),
              await (0, test_dist.fm)(() => {
                ;(0, test_dist.E3)(
                  canvas.getByText('Export Note')
                ).toBeInTheDocument()
              }))
            const includeDatesSwitch = canvas.getByRole('switch', {
              name: /include dates/i,
            })
            await test_dist.Q4.click(includeDatesSwitch)
            const includeTagsSwitch = canvas.getByRole('switch', {
              name: /include tags/i,
            })
            await test_dist.Q4.click(includeTagsSwitch)
            const qualitySlider = canvas.getByRole('slider')
            await test_dist.Q4.click(qualitySlider)
          },
        },
        PreviewGeneration = {
          args: { note: sampleNote },
          play: async ({ canvasElement }) => {
            const canvas = (0, test_dist.ux)(canvasElement),
              exportButton = canvas.getByText('Export Options')
            ;(await test_dist.Q4.click(exportButton),
              await (0, test_dist.fm)(
                () => {
                  ;(0, test_dist.E3)(
                    canvas.getByText(/words/)
                  ).toBeInTheDocument()
                },
                { timeout: 3e3 }
              ))
            const preview = canvas.getByText(/# Getting Started with Notable/, {
              selector: 'pre',
            })
            await (0, test_dist.E3)(preview).toBeInTheDocument()
          },
        },
        CloseDialog = {
          args: { note: sampleNote },
          play: async ({ canvasElement }) => {
            const canvas = (0, test_dist.ux)(canvasElement),
              exportButton = canvas.getByText('Export Options')
            ;(await test_dist.Q4.click(exportButton),
              await (0, test_dist.fm)(() => {
                ;(0, test_dist.E3)(
                  canvas.getByText('Export Note')
                ).toBeInTheDocument()
              }))
            const cancelButton = canvas.getByText('Cancel')
            ;(await test_dist.Q4.click(cancelButton),
              await (0, test_dist.fm)(() => {
                ;(0, test_dist.E3)(
                  canvas.queryByText('Export Note')
                ).not.toBeInTheDocument()
              }))
          },
        },
        export_dialog_stories_MarkdownOptions = {
          args: { note: sampleNote, defaultFormat: 'markdown' },
          play: async ({ canvasElement }) => {
            const canvas = (0, test_dist.ux)(canvasElement),
              exportButton = canvas.getByText('Export Options')
            ;(await test_dist.Q4.click(exportButton),
              await (0, test_dist.fm)(() => {
                ;(0, test_dist.E3)(
                  canvas.getByText('Markdown Options')
                ).toBeInTheDocument()
              }))
            const gfmSwitch = canvas.getByRole('switch', {
              name: /github flavored markdown/i,
            })
            await test_dist.Q4.click(gfmSwitch)
            const linkOption = canvas.getByLabelText('Link to images')
            await test_dist.Q4.click(linkOption)
          },
        },
        export_dialog_stories_PDFOptions = {
          args: { note: sampleNote, defaultFormat: 'pdf' },
          play: async ({ canvasElement }) => {
            const canvas = (0, test_dist.ux)(canvasElement),
              exportButton = canvas.getByText('Export Options')
            ;(await test_dist.Q4.click(exportButton),
              await (0, test_dist.fm)(() => {
                ;(0, test_dist.E3)(
                  canvas.getByText('PDF Options')
                ).toBeInTheDocument()
              }))
            const letterOption = canvas.getByLabelText('Letter')
            await test_dist.Q4.click(letterOption)
            const pageNumbersSwitch = canvas.getByRole('switch', {
              name: /page numbers/i,
            })
            await test_dist.Q4.click(pageNumbersSwitch)
            const tocSwitch = canvas.getByRole('switch', {
              name: /table of contents/i,
            })
            await test_dist.Q4.click(tocSwitch)
          },
        },
        ErrorState = { args: { note: { ...sampleNote, content: null } } },
        LoadingState = {
          args: { note: sampleNote },
          render: () => {
            const [isExporting, setIsExporting] = (0, react.useState)(!1)
            return (0, jsx_runtime.jsxs)('div', {
              className: 'space-y-4',
              children: [
                (0, jsx_runtime.jsx)(components_button.$, {
                  onClick: () => setIsExporting(!isExporting),
                  children: 'Toggle Export State',
                }),
                (0, jsx_runtime.jsx)('p', {
                  className: 'text-sm text-muted-foreground',
                  children: isExporting
                    ? 'Simulating export in progress...'
                    : 'Click button to simulate export',
                }),
                (0, jsx_runtime.jsx)(ExportDialog, { note: sampleNote }),
              ],
            })
          },
        },
        MobileResponsive = {
          parameters: { viewport: { defaultViewport: 'mobile1' } },
          args: { note: sampleNote },
        },
        __namedExportsOrder = [
          'Default',
          'WithCustomTrigger',
          'PDFDefault',
          'HTMLDefault',
          'ReactDefault',
          'WithCallbacks',
          'LongNote',
          'ShortNote',
          'InteractiveFormatSwitch',
          'InteractiveOptions',
          'PreviewGeneration',
          'CloseDialog',
          'MarkdownOptions',
          'PDFOptions',
          'ErrorState',
          'LoadingState',
          'MobileResponsive',
        ]
      ;((Default.parameters = {
        ...Default.parameters,
        docs: {
          ...Default.parameters?.docs,
          source: {
            originalSource: '{\n  args: {\n    note: sampleNote\n  }\n}',
            ...Default.parameters?.docs?.source,
          },
        },
      }),
        (WithCustomTrigger.parameters = {
          ...WithCustomTrigger.parameters,
          docs: {
            ...WithCustomTrigger.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote,\n    children: <Button variant='secondary' className='gap-2'>\n        <Download className='h-4 w-4' />\n        Export Note\n      </Button>\n  }\n}",
              ...WithCustomTrigger.parameters?.docs?.source,
            },
          },
        }),
        (PDFDefault.parameters = {
          ...PDFDefault.parameters,
          docs: {
            ...PDFDefault.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote,\n    defaultFormat: 'pdf'\n  }\n}",
              ...PDFDefault.parameters?.docs?.source,
            },
          },
        }),
        (HTMLDefault.parameters = {
          ...HTMLDefault.parameters,
          docs: {
            ...HTMLDefault.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote,\n    defaultFormat: 'html'\n  }\n}",
              ...HTMLDefault.parameters?.docs?.source,
            },
          },
        }),
        (ReactDefault.parameters = {
          ...ReactDefault.parameters,
          docs: {
            ...ReactDefault.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote,\n    defaultFormat: 'react'\n  }\n}",
              ...ReactDefault.parameters?.docs?.source,
            },
          },
        }),
        (WithCallbacks.parameters = {
          ...WithCallbacks.parameters,
          docs: {
            ...WithCallbacks.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote\n  },\n  render: () => {\n    const [exportHistory, setExportHistory] = useState<Array<{\n      format: ExportFormat;\n      timestamp: Date;\n    }>>([]);\n    return <div className='space-y-4'>\n        <ExportDialog note={sampleNote} onExportComplete={format => {\n        setExportHistory(prev => [...prev, {\n          format,\n          timestamp: new Date()\n        }]);\n      }} />\n        {exportHistory.length > 0 && <div className='p-4 border rounded-lg'>\n            <h3 className='font-semibold mb-2'>Export History</h3>\n            <ul className='space-y-1 text-sm'>\n              {exportHistory.map((entry, index) => <li key={index}>\n                  Exported as {entry.format.toUpperCase()} at{' '}\n                  {entry.timestamp.toLocaleTimeString()}\n                </li>)}\n            </ul>\n          </div>}\n      </div>;\n  }\n}",
              ...WithCallbacks.parameters?.docs?.source,
            },
          },
        }),
        (LongNote.parameters = {
          ...LongNote.parameters,
          docs: {
            ...LongNote.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: {\n      ...sampleNote,\n      title: 'Complete Guide to Markdown',\n      content: `# Complete Guide to Markdown\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Basic Syntax](#basic-syntax)\n3. [Extended Syntax](#extended-syntax)\n4. [Best Practices](#best-practices)\n\n## Introduction\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world's most popular markup languages.\n\n## Basic Syntax\n\n### Headings\n\n\\`\\`\\`markdown\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n\\`\\`\\`\n\n### Emphasis\n\n- **Bold text** using \\`**text**\\` or \\`__text__\\`\n- *Italic text* using \\`*text*\\` or \\`_text_\\`\n- ***Bold and italic*** using \\`***text***\\`\n\n### Lists\n\n#### Unordered Lists\n- First item\n- Second item\n  - Nested item\n  - Another nested item\n- Third item\n\n#### Ordered Lists\n1. First item\n2. Second item\n   1. Nested item\n   2. Another nested item\n3. Third item\n\n### Links and Images\n\n[Link text](https://example.com)\n\n![Alt text](https://via.placeholder.com/150)\n\n### Blockquotes\n\n> This is a blockquote.\n> \n> It can span multiple lines.\n\n### Code\n\nInline \\`code\\` uses backticks.\n\n\\`\\`\\`javascript\n// Code block with syntax highlighting\nfunction example() {\n  console.log(\"Hello, World!\");\n}\n\\`\\`\\`\n\n### Tables\n\n| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| Cell 1   | Cell 2   | Cell 3   |\n| Cell 4   | Cell 5   | Cell 6   |\n\n### Horizontal Rules\n\n---\n\n## Extended Syntax\n\n### Task Lists\n\n- [x] Completed task\n- [ ] Incomplete task\n- [ ] Another task\n\n### Footnotes\n\nHere's a sentence with a footnote[^1].\n\n[^1]: This is the footnote.\n\n### Definition Lists\n\nTerm 1\n: Definition 1\n\nTerm 2\n: Definition 2a\n: Definition 2b\n\n### Strikethrough\n\n~~This text is strikethrough~~\n\n## Best Practices\n\n1. Use consistent formatting\n2. Keep line lengths reasonable\n3. Use blank lines for readability\n4. Preview your markdown\n5. Use appropriate heading hierarchy\n6. Include alt text for images\n7. Test links regularly\n\n## Conclusion\n\nMarkdown is a powerful yet simple way to format text. With these basics, you can create well-structured documents that are easy to read and maintain.`,\n      tags: ['tutorial', 'markdown', 'documentation', 'guide']\n    }\n  }\n}",
              ...LongNote.parameters?.docs?.source,
            },
          },
        }),
        (ShortNote.parameters = {
          ...ShortNote.parameters,
          docs: {
            ...ShortNote.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: {\n      ...sampleNote,\n      title: 'Quick Note',\n      content: 'Remember to review the export options.',\n      tags: ['reminder']\n    }\n  }\n}",
              ...ShortNote.parameters?.docs?.source,
            },
          },
        }),
        (InteractiveFormatSwitch.parameters = {
          ...InteractiveFormatSwitch.parameters,
          docs: {
            ...InteractiveFormatSwitch.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Open dialog\n    const exportButton = canvas.getByText('Export Options');\n    await userEvent.click(exportButton);\n\n    // Wait for dialog\n    await waitFor(() => {\n      expect(canvas.getByText('Export Note')).toBeInTheDocument();\n    });\n\n    // Click PDF format\n    const pdfOption = canvas.getByText('PDF');\n    await userEvent.click(pdfOption);\n\n    // Should show PDF options\n    await expect(canvas.getByText('Page Format')).toBeInTheDocument();\n\n    // Click HTML format\n    const htmlOption = canvas.getByText('HTML');\n    await userEvent.click(htmlOption);\n\n    // Should show HTML options\n    await expect(canvas.getByText('Self-contained')).toBeInTheDocument();\n\n    // Click React format\n    const reactOption = canvas.getByText('React');\n    await userEvent.click(reactOption);\n\n    // Should show React options\n    await expect(canvas.getByText('TypeScript')).toBeInTheDocument();\n  }\n}",
              ...InteractiveFormatSwitch.parameters?.docs?.source,
            },
          },
        }),
        (InteractiveOptions.parameters = {
          ...InteractiveOptions.parameters,
          docs: {
            ...InteractiveOptions.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Open dialog\n    const exportButton = canvas.getByText('Export Options');\n    await userEvent.click(exportButton);\n\n    // Wait for dialog\n    await waitFor(() => {\n      expect(canvas.getByText('Export Note')).toBeInTheDocument();\n    });\n\n    // Toggle include dates\n    const includeDatesSwitch = canvas.getByRole('switch', {\n      name: /include dates/i\n    });\n    await userEvent.click(includeDatesSwitch);\n\n    // Toggle include tags\n    const includeTagsSwitch = canvas.getByRole('switch', {\n      name: /include tags/i\n    });\n    await userEvent.click(includeTagsSwitch);\n\n    // Adjust image quality slider\n    const qualitySlider = canvas.getByRole('slider');\n    await userEvent.click(qualitySlider);\n  }\n}",
              ...InteractiveOptions.parameters?.docs?.source,
            },
          },
        }),
        (PreviewGeneration.parameters = {
          ...PreviewGeneration.parameters,
          docs: {
            ...PreviewGeneration.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Open dialog\n    const exportButton = canvas.getByText('Export Options');\n    await userEvent.click(exportButton);\n\n    // Wait for preview\n    await waitFor(() => {\n      // Look for word count badge which indicates preview is ready\n      expect(canvas.getByText(/words/)).toBeInTheDocument();\n    }, {\n      timeout: 3000\n    });\n\n    // Preview should be visible\n    const preview = canvas.getByText(/# Getting Started with Notable/, {\n      selector: 'pre'\n    });\n    await expect(preview).toBeInTheDocument();\n  }\n}",
              ...PreviewGeneration.parameters?.docs?.source,
            },
          },
        }),
        (CloseDialog.parameters = {
          ...CloseDialog.parameters,
          docs: {
            ...CloseDialog.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Open dialog\n    const exportButton = canvas.getByText('Export Options');\n    await userEvent.click(exportButton);\n\n    // Wait for dialog\n    await waitFor(() => {\n      expect(canvas.getByText('Export Note')).toBeInTheDocument();\n    });\n\n    // Click cancel\n    const cancelButton = canvas.getByText('Cancel');\n    await userEvent.click(cancelButton);\n\n    // Dialog should close\n    await waitFor(() => {\n      expect(canvas.queryByText('Export Note')).not.toBeInTheDocument();\n    });\n  }\n}",
              ...CloseDialog.parameters?.docs?.source,
            },
          },
        }),
        (export_dialog_stories_MarkdownOptions.parameters = {
          ...export_dialog_stories_MarkdownOptions.parameters,
          docs: {
            ...export_dialog_stories_MarkdownOptions.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote,\n    defaultFormat: 'markdown'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Open dialog\n    const exportButton = canvas.getByText('Export Options');\n    await userEvent.click(exportButton);\n\n    // Wait for dialog\n    await waitFor(() => {\n      expect(canvas.getByText('Markdown Options')).toBeInTheDocument();\n    });\n\n    // Toggle GFM option\n    const gfmSwitch = canvas.getByRole('switch', {\n      name: /github flavored markdown/i\n    });\n    await userEvent.click(gfmSwitch);\n\n    // Select image handling option\n    const linkOption = canvas.getByLabelText('Link to images');\n    await userEvent.click(linkOption);\n  }\n}",
              ...export_dialog_stories_MarkdownOptions.parameters?.docs?.source,
            },
          },
        }),
        (export_dialog_stories_PDFOptions.parameters = {
          ...export_dialog_stories_PDFOptions.parameters,
          docs: {
            ...export_dialog_stories_PDFOptions.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote,\n    defaultFormat: 'pdf'\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Open dialog\n    const exportButton = canvas.getByText('Export Options');\n    await userEvent.click(exportButton);\n\n    // Wait for dialog\n    await waitFor(() => {\n      expect(canvas.getByText('PDF Options')).toBeInTheDocument();\n    });\n\n    // Select Letter format\n    const letterOption = canvas.getByLabelText('Letter');\n    await userEvent.click(letterOption);\n\n    // Toggle page numbers\n    const pageNumbersSwitch = canvas.getByRole('switch', {\n      name: /page numbers/i\n    });\n    await userEvent.click(pageNumbersSwitch);\n\n    // Toggle TOC\n    const tocSwitch = canvas.getByRole('switch', {\n      name: /table of contents/i\n    });\n    await userEvent.click(tocSwitch);\n  }\n}",
              ...export_dialog_stories_PDFOptions.parameters?.docs?.source,
            },
          },
        }),
        (ErrorState.parameters = {
          ...ErrorState.parameters,
          docs: {
            ...ErrorState.parameters?.docs,
            source: {
              originalSource:
                '{\n  args: {\n    note: {\n      ...sampleNote,\n      // This could trigger an error in preview generation\n      content: null as any\n    }\n  }\n}',
              ...ErrorState.parameters?.docs?.source,
            },
          },
        }),
        (LoadingState.parameters = {
          ...LoadingState.parameters,
          docs: {
            ...LoadingState.parameters?.docs,
            source: {
              originalSource:
                "{\n  args: {\n    note: sampleNote\n  },\n  render: () => {\n    // This would show the loading state during export\n    const [isExporting, setIsExporting] = useState(false);\n    return <div className='space-y-4'>\n        <Button onClick={() => setIsExporting(!isExporting)}>\n          Toggle Export State\n        </Button>\n        <p className='text-sm text-muted-foreground'>\n          {isExporting ? 'Simulating export in progress...' : 'Click button to simulate export'}\n        </p>\n        <ExportDialog note={sampleNote} />\n      </div>;\n  }\n}",
              ...LoadingState.parameters?.docs?.source,
            },
          },
        }),
        (MobileResponsive.parameters = {
          ...MobileResponsive.parameters,
          docs: {
            ...MobileResponsive.parameters?.docs,
            source: {
              originalSource:
                "{\n  parameters: {\n    viewport: {\n      defaultViewport: 'mobile1'\n    }\n  },\n  args: {\n    note: sampleNote\n  }\n}",
              ...MobileResponsive.parameters?.docs?.source,
            },
          },
        }))
    },
    './design-system/components/badge.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      __webpack_require__.d(__webpack_exports__, { E: () => Badge })
      var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../node_modules/.pnpm/next@15.2.4_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-d_866e0ebb5cad13c7ae73d64ed145106f/node_modules/next/dist/compiled/react/jsx-runtime.js'
        ),
        class_variance_authority__WEBPACK_IMPORTED_MODULE_3__ =
          (__webpack_require__(
            '../../node_modules/.pnpm/next@15.2.4_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-d_866e0ebb5cad13c7ae73d64ed145106f/node_modules/next/dist/compiled/react/index.js'
          ),
          __webpack_require__(
            '../../node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.mjs'
          )),
        _lib_utils__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__('./lib/utils.ts')
      function cov_2re9urm0tj() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/design-system/components/badge.tsx',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '6d33ae1fe9c25ade8dd796905a9cbae18584556f' === coverage[path].hash) ||
          (coverage[path] = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/design-system/components/badge.tsx',
            statementMap: {
              0: {
                start: { line: 5, column: 22 },
                end: { line: 20, column: 2 },
              },
              1: {
                start: { line: 22, column: 4 },
                end: { line: 27, column: 7 },
              },
              2: {
                start: { line: 30, column: 0 },
                end: { line: 37, column: 2 },
              },
            },
            fnMap: {
              0: {
                name: 'Badge',
                decl: {
                  start: { line: 21, column: 9 },
                  end: { line: 21, column: 14 },
                },
                loc: {
                  start: { line: 21, column: 49 },
                  end: { line: 28, column: 1 },
                },
                line: 21,
              },
            },
            branchMap: {},
            s: { 0: 0, 1: 0, 2: 0 },
            f: { 0: 0 },
            b: {},
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/design-system/components/badge.tsx',
              ],
              sourcesContent: [
                "import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from '../../lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',\n        outline: 'text-foreground',\n        success:\n          'border-transparent bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',\n        warning:\n          'border-transparent bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400',\n        info: 'border-transparent bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
              ],
              names: [],
              mappings:
                ';AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAlB,AAAmB,CAAC,AAAnB,CAAoB,AAAnB,CAAoB,AAAnB,CAAoB,AAAnB,CAAoB,AAAnB,CAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;AAEnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACxK;IACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnzf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;AACH;AAOF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAAY,CAAX,AAAY,CAAX,AAAY,CAAX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cACL,KAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE3E;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '6d33ae1fe9c25ade8dd796905a9cbae18584556f',
          })
        var actualCoverage = coverage[path]
        return (
          (cov_2re9urm0tj = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_2re9urm0tj()
      const badgeVariants =
        (cov_2re9urm0tj().s[0]++,
        (0, class_variance_authority__WEBPACK_IMPORTED_MODULE_3__.F)(
          'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
          {
            variants: {
              variant: {
                default:
                  'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
                secondary:
                  'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
                destructive:
                  'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
                outline: 'text-foreground',
                success:
                  'border-transparent bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400',
                warning:
                  'border-transparent bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400',
                info: 'border-transparent bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400',
              },
            },
            defaultVariants: { variant: 'default' },
          }
        ))
      function Badge({ className, variant, ...props }) {
        return (
          cov_2re9urm0tj().f[0]++,
          cov_2re9urm0tj().s[1]++,
          (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)('div', {
            className: (0, _lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(
              badgeVariants({ variant }),
              className
            ),
            ...props,
          })
        )
      }
      ;(cov_2re9urm0tj().s[2]++,
        (Badge.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'Badge',
          composes: ['VariantProps'],
        }))
    },
    './design-system/components/slider.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      __webpack_require__.d(__webpack_exports__, { A: () => Slider })
      var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../node_modules/.pnpm/next@15.2.4_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-d_866e0ebb5cad13c7ae73d64ed145106f/node_modules/next/dist/compiled/react/jsx-runtime.js'
        ),
        react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../node_modules/.pnpm/next@15.2.4_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-d_866e0ebb5cad13c7ae73d64ed145106f/node_modules/next/dist/compiled/react/index.js'
        ),
        _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            '../../node_modules/.pnpm/@radix-ui+react-slider@1.3.5_@types+react-dom@19.1.6_@types+react@19.1.8__@types+react@_c5f6a88900af0ccede532eedc8bda40a/node_modules/@radix-ui/react-slider/dist/index.mjs'
          ),
        _lib_utils__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__('./lib/utils.ts')
      function cov_9pg24nsxu() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/design-system/components/slider.tsx',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '9be38563cba701041d8959937843bf024c382f6e' === coverage[path].hash) ||
          (coverage[path] = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/design-system/components/slider.tsx',
            statementMap: {
              0: {
                start: { line: 5, column: 29 },
                end: { line: 20, column: 7 },
              },
              1: {
                start: { line: 5, column: 92 },
                end: { line: 20, column: 6 },
              },
              2: {
                start: { line: 21, column: 0 },
                end: { line: 21, column: 54 },
              },
              3: {
                start: { line: 23, column: 0 },
                end: { line: 26, column: 2 },
              },
            },
            fnMap: {
              0: {
                name: '(anonymous_0)',
                decl: {
                  start: { line: 5, column: 46 },
                  end: { line: 5, column: 47 },
                },
                loc: {
                  start: { line: 5, column: 92 },
                  end: { line: 20, column: 6 },
                },
                line: 5,
              },
            },
            branchMap: {},
            s: { 0: 0, 1: 0, 2: 0, 3: 0 },
            f: { 0: 0 },
            b: {},
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/design-system/components/slider.tsx',
              ],
              sourcesContent: [
                "import * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\nimport { cn } from '../../lib/utils'\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      'relative flex w-full touch-none select-none items-center',\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className='relative h-2 w-full grow overflow-hidden rounded-full bg-secondary'>\n      <SliderPrimitive.Range className='absolute h-full bg-primary' />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className='block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50' />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
              ],
              names: [],
              mappings:
                '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',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '9be38563cba701041d8959937843bf024c382f6e',
          })
        var actualCoverage = coverage[path]
        return (
          (cov_9pg24nsxu = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      cov_9pg24nsxu()
      const Slider =
        (cov_9pg24nsxu().s[0]++,
        react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(
          ({ className, ...props }, ref) => (
            cov_9pg24nsxu().f[0]++,
            cov_9pg24nsxu().s[1]++,
            (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(
              _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_3__.bL,
              {
                ref,
                className: (0, _lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(
                  'relative flex w-full touch-none select-none items-center',
                  className
                ),
                ...props,
                children: [
                  (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(
                    _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_3__.CC,
                    {
                      className:
                        'relative h-2 w-full grow overflow-hidden rounded-full bg-secondary',
                      children: (0,
                      react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(
                        _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_3__.Q6,
                        { className: 'absolute h-full bg-primary' }
                      ),
                    }
                  ),
                  (0, react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(
                    _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_3__.zi,
                    {
                      className:
                        'block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
                    }
                  ),
                ],
              }
            )
          )
        ))
      ;(cov_9pg24nsxu().s[2]++,
        (Slider.displayName =
          _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_3__.bL.displayName),
        cov_9pg24nsxu().s[3]++,
        (Slider.__docgenInfo = { description: '', methods: [] }))
    },
    './lib/utils.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__
    ) => {
      __webpack_require__.d(__webpack_exports__, { cn: () => cn })
      var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs'
        ),
        tailwind_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../node_modules/.pnpm/tailwind-merge@2.6.0/node_modules/tailwind-merge/dist/bundle-mjs.mjs'
        )
      function cov_2q9uxw2ujq() {
        var path =
            '/Users/ryota.murakami/repository/Notable/packages/web/lib/utils.ts',
          global = new Function('return this')(),
          gcv = '__coverage__',
          coverage = global[gcv] || (global[gcv] = {})
        ;(coverage[path] &&
          '1ab603e1092f59772e7f858dd62f043983f965a0' === coverage[path].hash) ||
          (coverage[path] = {
            path: '/Users/ryota.murakami/repository/Notable/packages/web/lib/utils.ts',
            statementMap: {
              0: {
                start: { line: 4, column: 4 },
                end: { line: 4, column: 33 },
              },
              1: {
                start: { line: 7, column: 17 },
                end: { line: 7, column: 37 },
              },
              2: {
                start: { line: 8, column: 4 },
                end: { line: 14, column: 20 },
              },
            },
            fnMap: {
              0: {
                name: 'cn',
                decl: {
                  start: { line: 3, column: 16 },
                  end: { line: 3, column: 18 },
                },
                loc: {
                  start: { line: 3, column: 30 },
                  end: { line: 5, column: 1 },
                },
                line: 3,
              },
              1: {
                name: 'formatDate',
                decl: {
                  start: { line: 6, column: 16 },
                  end: { line: 6, column: 26 },
                },
                loc: {
                  start: { line: 6, column: 39 },
                  end: { line: 15, column: 1 },
                },
                line: 6,
              },
            },
            branchMap: {},
            s: { 0: 0, 1: 0, 2: 0 },
            f: { 0: 0, 1: 0 },
            b: {},
            inputSourceMap: {
              version: 3,
              sources: [
                '/Users/ryota.murakami/repository/Notable/packages/web/lib/utils.ts',
              ],
              sourcesContent: [
                "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatDate(dateString: string): string {\n  const date = new Date(dateString)\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  }).format(date)\n}\n",
              ],
              names: [
                'clsx',
                'twMerge',
                'cn',
                'inputs',
                'formatDate',
                'dateString',
                'date',
                'Date',
                'Intl',
                'DateTimeFormat',
                'month',
                'day',
                'year',
                'hour',
                'minute',
                'format',
              ],
              mappings:
                'AAAA,SAA0BA,IAAI,QAAQ,OAAM;AAC5C,SAASC,OAAO,QAAQ,iBAAgB;AAExC,OAAO,SAASC,GAAG,GAAGC,MAAoB;IACxC,OAAOF,QAAQD,KAAKG;AACtB;AAEA,OAAO,SAASC,WAAWC,UAAkB;IAC3C,MAAMC,OAAO,IAAIC,KAAKF;IACtB,OAAO,IAAIG,KAAKC,cAAc,CAAC,SAAS;QACtCC,OAAO;QACPC,KAAK;QACLC,MAAM;QACNC,MAAM;QACNC,QAAQ;IACV,GAAGC,MAAM,CAACT;AACZ',
            },
            _coverageSchema: '1a1c01bbd47fc00a2c39e90264f33305004495a9',
            hash: '1ab603e1092f59772e7f858dd62f043983f965a0',
          })
        var actualCoverage = coverage[path]
        return (
          (cov_2q9uxw2ujq = function () {
            return actualCoverage
          }),
          actualCoverage
        )
      }
      function cn(...inputs) {
        return (
          cov_2q9uxw2ujq().f[0]++,
          cov_2q9uxw2ujq().s[0]++,
          (0, tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)(
            (0, clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs)
          )
        )
      }
      cov_2q9uxw2ujq()
    },
  },
])
