When you encounter a dependency error, follow these steps:

1.  **Identify the problematic package**: The error message will usually indicate which package is causing the issue.

2.  **Check for version conflicts**: Sometimes, different packages depend on conflicting versions of the same sub-dependency. Use `pnpm ls <package-name>` to inspect the dependency tree.

3.  **Consult the registry for valid versions**: If a version is not found, use `pnpm view <package-name> versions` to see all available versions on the npm registry.

4.  **Update `package.json` with a valid version**: Manually edit `package.json` to specify a version that resolves the conflict or is available on the registry.

5.  **Re-install dependencies**: Run `pnpm install` to apply the changes.

For example, the following changes were made to resolve recent dependency issues:

-   `@sentry/nextjs` was moved from `devDependencies` to `dependencies` because it's used in the middleware.
-   `@vercel/analytics` was downgraded from `^1.5.3` to `^1.5.0`.
-   `winston` was downgraded from `^3.18.0` to `^3.17.0`.

description:
globs:
alwaysApply: false
---
