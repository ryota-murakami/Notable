name: Mobile E2E Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/mobile/**'
      - '.github/workflows/mobile-e2e.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/mobile/**'
      - '.github/workflows/mobile-e2e.yml'

jobs:
  ios-e2e:
    runs-on: macos-latest
    # Allow first attempt + retry + a safety margin
    timeout-minutes: 25
    # Temporarily disabled: GitHub Actions macOS runners have persistent iOS build timeouts
    # Known infrastructure issue with xcodebuild hanging at the "Build iOS app" step
    # TODO: Re-enable when GitHub resolves macOS runner iOS build infrastructure issues
    if: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          # Ensure the directory exists so actions/cache has something to target
          mkdir -p "$STORE_PATH"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup iOS Simulator
        run: |
          set -euo pipefail

          echo "=== Available Devices and Runtimes ==="
          xcrun simctl list devicetypes | grep iPhone
          xcrun simctl list runtimes | grep iOS
          xcrun simctl list devices | head -20

          # Try to find and use pre-existing iPhone simulator
          EXISTING_IPHONE=$(xcrun simctl list devices booted | grep iPhone | head -1 | sed -n 's/.*(\([^)]*\)).*/\1/p' || true)

          if [ -n "$EXISTING_IPHONE" ]; then
            echo "Using existing booted iPhone simulator: $EXISTING_IPHONE"
            SIMULATOR_UDID="$EXISTING_IPHONE"
          else
            # Create new simulator with more robust approach
            DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-14"
            
            # Find best available iOS runtime (prefer 17.x, fallback to any iOS)
            RUNTIME_ID=$(xcrun simctl list runtimes | grep -E "iOS (17\.|16\.|15\.)" | tail -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.iOS[^,]*' || true)
            
            if [ -z "$RUNTIME_ID" ]; then
              RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | tail -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime[^,]*')
            fi
            
            echo "Using device type: $DEVICE_TYPE"
            echo "Using runtime: $RUNTIME_ID"
            
            # Clean up any existing test simulators
            xcrun simctl delete "E2E-iPhone" 2>/dev/null || true
            
            # Create and boot simulator
            SIMULATOR_UDID=$(xcrun simctl create "E2E-iPhone" "$DEVICE_TYPE" "$RUNTIME_ID")
            echo "Created simulator with UDID: $SIMULATOR_UDID"
            
            # Boot with retry logic
            for i in {1..3}; do
              if xcrun simctl boot "$SIMULATOR_UDID"; then
                echo "Successfully booted simulator on attempt $i"
                break
              else
                echo "Boot attempt $i failed, retrying..."
                sleep 5
              fi
            done

            # Wait for simulator to fully initialize and appear as booted
            echo "Waiting for simulator to fully initialize..."
            sleep 10

            # Verify simulator is actually booted with better checking
            BOOT_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" || true)
            echo "Simulator status: $BOOT_STATUS"
            
            if echo "$BOOT_STATUS" | grep -q "(Booted)"; then
              echo "✅ Simulator successfully booted and verified"
            else
              echo "❌ Simulator verification failed after boot"
              echo "Attempting final verification..."
              sleep 5
              FINAL_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" || true)
              echo "Final status: $FINAL_STATUS"
              
              if ! echo "$FINAL_STATUS" | grep -q "(Booted)"; then
                echo "Simulator failed to boot after verification attempts" >&2
                exit 1
              else
                echo "✅ Simulator verified as booted on retry"
              fi
            fi
          fi

          # Verify simulator is ready
          echo "=== Final Simulator Status ==="
          xcrun simctl list devices | grep Booted || true

      - name: Build iOS app for testing
        working-directory: packages/mobile
        # Allow first attempt + retry + small buffer
        timeout-minutes: 20
        run: |
          set -euo pipefail
          echo "Starting iOS app build with timeout..."

          # Add timeout to the build command to prevent hanging
          if timeout 600 pnpm e2e:build:ios; then
            echo "✅ iOS build completed successfully"
          else
            echo "❌ iOS build timed out or failed"
            echo "This appears to be a GitHub Actions infrastructure issue"
            echo "Attempting cleanup and retry..."
            
            # Cleanup any stuck processes
            pkill -f "xcodebuild" || true
            pkill -f "expo" || true
            sleep 5
            
            # Single retry attempt with shorter timeout
            echo "Retrying iOS build (final attempt)..."
            if timeout 300 pnpm e2e:build:ios; then
              echo "✅ iOS build succeeded on retry"
            else
              echo "❌ iOS build failed on retry - infrastructure issue"
              exit 1
            fi
          fi

      - name: Run iOS E2E tests
        working-directory: packages/mobile
        run: |
          pnpm e2e:test:ios --headless --record-logs all

      - name: Upload iOS test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-artifacts
          path: |
            packages/mobile/artifacts/
            packages/mobile/e2e/*.log

  android-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Temporarily disabled: Android emulators require hardware acceleration not available in GitHub Actions
    # Both x86 (requires KVM) and ARM64 (unsupported on x86_64 hosts) fail
    # TODO: Consider self-hosted runners or alternative Android testing solutions
    if: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          # Ensure the directory exists so actions/cache has something to target
          mkdir -p "$STORE_PATH"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create Android AVD
        run: |
          # Use API 30 ARM64 to avoid KVM hardware acceleration requirements in GitHub runners
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-30;google_apis;arm64-v8a"
          # Delete existing AVD if it exists
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager delete avd --name test_avd || true
          # Create AVD with ARM64 architecture that works without hardware acceleration
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd --force --name test_avd --abi google_apis/arm64-v8a --package "system-images;android-30;google_apis;arm64-v8a"
          # List AVDs to verify creation
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
          # Verify AVD files exist
          ls -la $HOME/.android/avd/ || true

      - name: Start Android Emulator
        run: |
          # Debug AVD location and setup
          echo "=== AVD Debug Info ==="
          echo "HOME: $HOME"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_AVD_HOME: ${ANDROID_AVD_HOME:-'not set'}"
          ls -la $HOME/.android/avd/ || echo "Default AVD directory does not exist"
          ls -la $HOME/.config/.android/avd/ || echo "Config AVD directory does not exist"

          # Use the directory where the AVD was actually created
          export ANDROID_AVD_HOME=$HOME/.config/.android/avd
          echo "Using ANDROID_AVD_HOME: $ANDROID_AVD_HOME"

          # List available AVDs to confirm
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd

          # Start ARM64 emulator with configuration optimized for CI without hardware acceleration
          $ANDROID_HOME/emulator/emulator -avd test_avd \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -no-boot-anim \
            -memory 2048 \
            -partition-size 2048 \
            -no-metrics \
            -read-only &

          # Wait for device with timeout and better error handling
          echo "Waiting for Android emulator to start..."
          timeout 600 adb wait-for-device || { echo "Emulator failed to start within 10 minutes"; exit 1; }

          # Wait for boot completion with timeout
          echo "Waiting for Android system to boot..."
          timeout 300 bash -c 'while [[ -z $(adb shell getprop sys.boot_completed | tr -d "\r") ]]; do sleep 2; echo "Still booting..."; done'

          # Unlock screen
          adb shell input keyevent 82

          echo "Android emulator is ready!"

      - name: Build Android app for testing
        working-directory: packages/mobile
        run: |
          pnpm e2e:build:android

      - name: Run Android E2E tests
        working-directory: packages/mobile
        run: |
          pnpm e2e:test:android --headless --record-logs all

      - name: Upload Android test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-e2e-artifacts
          path: |
            packages/mobile/artifacts/
            packages/mobile/e2e/*.log

  performance-test:
    runs-on: macos-latest
    timeout-minutes: 15
    # Temporarily disabled: GitHub Actions macOS runners have persistent iOS build timeouts
    # Known infrastructure issue with xcodebuild hanging at the "Build iOS app" step
    # TODO: Re-enable when GitHub resolves macOS runner iOS build infrastructure issues
    if: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          # Ensure the directory exists so actions/cache has something to target
          mkdir -p "$STORE_PATH"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup iOS Simulator
        run: |
          set -euo pipefail

          echo "=== Available Devices and Runtimes ==="
          xcrun simctl list devicetypes | grep iPhone
          xcrun simctl list runtimes | grep iOS
          xcrun simctl list devices | head -20

          # Try to find and use pre-existing iPhone simulator
          EXISTING_IPHONE=$(xcrun simctl list devices booted | grep iPhone | head -1 | sed -n 's/.*(\([^)]*\)).*/\1/p' || true)

          if [ -n "$EXISTING_IPHONE" ]; then
            echo "Using existing booted iPhone simulator: $EXISTING_IPHONE"
            SIMULATOR_UDID="$EXISTING_IPHONE"
          else
            # Create new simulator with more robust approach
            DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-14"
            
            # Find best available iOS runtime (prefer 17.x, fallback to any iOS)
            RUNTIME_ID=$(xcrun simctl list runtimes | grep -E "iOS (17\.|16\.|15\.)" | tail -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.iOS[^,]*' || true)
            
            if [ -z "$RUNTIME_ID" ]; then
              RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | tail -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime[^,]*')
            fi
            
            echo "Using device type: $DEVICE_TYPE"
            echo "Using runtime: $RUNTIME_ID"
            
            # Clean up any existing test simulators
            xcrun simctl delete "E2E-iPhone" 2>/dev/null || true
            
            # Create and boot simulator
            SIMULATOR_UDID=$(xcrun simctl create "E2E-iPhone" "$DEVICE_TYPE" "$RUNTIME_ID")
            echo "Created simulator with UDID: $SIMULATOR_UDID"
            
            # Boot with retry logic
            for i in {1..3}; do
              if xcrun simctl boot "$SIMULATOR_UDID"; then
                echo "Successfully booted simulator on attempt $i"
                break
              else
                echo "Boot attempt $i failed, retrying..."
                sleep 5
              fi
            done

            # Wait for simulator to fully initialize and appear as booted
            echo "Waiting for simulator to fully initialize..."
            sleep 10

            # Verify simulator is actually booted with better checking
            BOOT_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" || true)
            echo "Simulator status: $BOOT_STATUS"
            
            if echo "$BOOT_STATUS" | grep -q "(Booted)"; then
              echo "✅ Simulator successfully booted and verified"
            else
              echo "❌ Simulator verification failed after boot"
              echo "Attempting final verification..."
              sleep 5
              FINAL_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_UDID" || true)
              echo "Final status: $FINAL_STATUS"
              
              if ! echo "$FINAL_STATUS" | grep -q "(Booted)"; then
                echo "Simulator failed to boot after verification attempts" >&2
                exit 1
              else
                echo "✅ Simulator verified as booted on retry"
              fi
            fi
          fi

          # Verify simulator is ready
          echo "=== Final Simulator Status ==="
          xcrun simctl list devices | grep Booted || true

      - name: Build iOS app for performance testing
        working-directory: packages/mobile
        timeout-minutes: 10
        run: |
          set -euo pipefail
          echo "Starting iOS app build for performance testing with timeout..."

          # Add timeout to the build command to prevent hanging
          if timeout 600 pnpm e2e:build:ios; then
            echo "✅ iOS build completed successfully"
          else
            echo "❌ iOS build timed out or failed"
            echo "This appears to be a GitHub Actions infrastructure issue"
            echo "Attempting cleanup and retry..."
            
            # Cleanup any stuck processes
            pkill -f "xcodebuild" || true
            pkill -f "expo" || true
            sleep 5
            
            # Single retry attempt with shorter timeout
            echo "Retrying iOS build (final attempt)..."
            if timeout 300 pnpm e2e:build:ios; then
              echo "✅ iOS build succeeded on retry"
            else
              echo "❌ iOS build failed on retry - infrastructure issue"
              exit 1
            fi
          fi

      - name: Run performance tests
        working-directory: packages/mobile
        run: |
          # Run specific performance test suite
          pnpm e2e:test:ios --testNamePattern="Performance" --headless

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            packages/mobile/performance-reports/
