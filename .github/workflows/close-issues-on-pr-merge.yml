name: Close Issues on PR Merge

on:
  pull_request:
    types: [closed]

permissions:
  issues: write
  pull-requests: read
  contents: read

jobs:
  close-linked-issues:
    name: Close Linked Issues
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Close linked issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            const prAuthor = context.payload.pull_request.user.login;

            console.log(`Processing merged PR #${prNumber}: ${prTitle}`);

            // Function to extract issue numbers from text
            function extractIssueNumbers(text) {
              const issuePattern = /#(\d+)/g;
              const matches = [];
              let match;
              while ((match = issuePattern.exec(text)) !== null) {
                matches.push(parseInt(match[1], 10));
              }
              return [...new Set(matches)]; // Remove duplicates
            }

            // Function to extract issue numbers from keywords
            function extractKeywordIssues(text) {
              const keywordPattern = /(?:clos(?:e[ds]?|ing)|fix(?:e[ds]?|ing)?|resolv(?:e[ds]?|ing))\s+#(\d+)/gi;
              const matches = [];
              let match;
              while ((match = keywordPattern.exec(text)) !== null) {
                matches.push(parseInt(match[1], 10));
              }
              return [...new Set(matches)]; // Remove duplicates
            }

            // Extract issue numbers from PR title and body
            const titleIssues = extractIssueNumbers(prTitle);
            const bodyIssues = extractIssueNumbers(prBody);
            const keywordIssues = extractKeywordIssues(prBody);

            // Combine all found issue numbers
            const allIssues = [...new Set([...titleIssues, ...bodyIssues, ...keywordIssues])];

            console.log(`Found issue references: ${allIssues.join(', ')}`);

            if (allIssues.length === 0) {
              console.log('No issue references found in PR title or body');
              return;
            }

            // Process each issue
            for (const issueNumber of allIssues) {
              try {
                // Check if issue exists and is open
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                if (issue.state === 'closed') {
                  console.log(`Issue #${issueNumber} is already closed`);
                  continue;
                }
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: 'closed'
                });
                
                // Add a comment explaining the closure
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `ðŸŽ‰ This issue has been automatically closed because PR #${prNumber} was merged.\n\n**Merged PR:** ${prTitle}\n**Author:** @${prAuthor}`
                });
                
                console.log(`Successfully closed issue #${issueNumber}`);
                
              } catch (error) {
                if (error.status === 404) {
                  console.log(`Issue #${issueNumber} not found, skipping`);
                } else {
                  console.error(`Error processing issue #${issueNumber}: ${error.message}`);
                }
              }
            }

            console.log('Finished processing all linked issues');
